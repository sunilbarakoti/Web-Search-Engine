Mobile Web Application Best Practices Mobile Web Application Best Practices W3C Recommendation December version: http://www.w3.org/TR/2010/REC-mwabp-20101214/ Latest version: http://www.w3.org/TR/mwabp/ Previous version: http://www.w3.org/TR/2010/PR-mwabp-20101021/ Editors: Adam Connors, Google Bryan Sullivan, AT&T refer errata document, include normative corrections. See also translations. Copyright Â©2010 W3CÂ® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract goal document aid development rich dynamic mobile Web applications. most relevant engineering practices, promoting enable better user experience warning are considered harmful. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. W3C Recommendation Mobile Web Application Best Practices. document was developed Mobile Web Best Practices Working Group part Mobile Web Initiative. publication Proposed Recommendation October Working Group clarified alternative compression formats EXI) referred section Use Transfer Compression not share impediments common compression formats. diff version available. substantive change been made. document statements be regarded forward-looking document published December Examples provided do sections sometimes reference on-going works technologies Working Group become prevalent development community soon. sections be taken grain salt, depending actual evolution technologies. best practices statements remain valid case. implementation report available. Comments specification be sent public-bpwg-comments@w3.org public archive). document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director W3C Recommendation. stable document be used reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. document was produced group operating February W3C Patent Policy. document informative only. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Â Â Â Â Purpose Document Â Â Â Â Audience Â Â Â Â Scope Â Â Â Â Â Â Â Â Best Practices Â Â Â Â Â Â Â Â Web Application Â Â Â Â Â Â Â Â Mobile Context Â Â Â Â Â Â Â Â Delivery Context Â Â Â Â Relationship other Best Practices recommendations Â Â Â Â Terminology Structure Best Practice Statements Best Practice Statements Â Â Â Â Application Data Â Â Â Â Â Â Â Â Use Cookies Sparingly Â Â Â Â Â Â Â Â Use Appropriate Client-Side Storage Technologies Local Data Â Â Â Â Â Â Â Â Replicate Local Data Â Â Â Â Security privacy Â Â Â Â Â Â Â Â Do not Execute Unescaped Untrusted JSON data Â Â Â Â User Awareness Control Â Â Â Â Â Â Â Â Ensure User Informed Use Personal Device Information Â Â Â Â Â Â Â Â Enable Automatic Sign-in Â Â Â Â Conservative use resources Â Â Â Â Â Â Â Â Use Transfer Compression Â Â Â Â Â Â Â Â Minimize Application Data Size Â Â Â Â Â Â Â Â Avoid Redirects Â Â Â Â Â Â Â Â Optimize Network Requests Â Â Â Â Â Â Â Â Minimize External Resources Â Â Â Â Â Â Â Â Aggregate Static Images Single Composite Resource Â Â Â Â Â Â Â Â Include Background Images Inline CSS Style Sheets Â Â Â Â Â Â Â Â Cache Resources Fingerprinting Resource References Â Â Â Â Â Â Â Â Cache AJAX Data Â Â Â Â Â Â Â Â Do not Send Cookie Information Unnecessarily Â Â Â Â Â Â Â Â Keep DOM Size Reasonable Â Â Â Â User Experience Â Â Â Â Â Â Â Â Optimize Application Start-up Time Â Â Â Â Â Â Â Â Minimize Perceived Latency Â Â Â Â Â Â Â Â Design Multiple Interaction Methods Â Â Â Â Â Â Â Â Preserve Focus Dynamic Page Updates Â Â Â Â Â Â Â Â Use Fragment IDs Drive Application View Â Â Â Â Â Â Â Â Make Telephone Numbers Â Â Â Â Â Â Â Â Ensure Paragraph Text Flows Â Â Â Â Â Â Â Â Ensure Consistency State Devices Â Â Â Â Â Â Â Â Consider Mobile Specific Technologies Initiating Web Applications Â Â Â Â Â Â Â Â Use Meta Viewport Element Identify Desired Screen Size Â Â Â Â Handling Variations Delivery Context Â Â Â Â Â Â Â Â Prefer Server-Side Detection Possible Â Â Â Â Â Â Â Â Use Client-Side Detection Necessary Â Â Â Â Â Â Â Â Use Device Classification Simplify Content Adaptation Â Â Â Â Â Â Â Â Support non-JavaScript Variant Appropriate Â Â Â Â Â Â Â Â Offer Users Choice Interfaces Â Â Â Â Further Considerations Â Â Â Â Â Â Â Â Consider Use Canvas Element SVG Dynamic Graphics Â Â Â Â Â Â Â Â Inform User Automatic Network Access Â Â Â Â Â Â Â Â Provide Sufficient Means Control Automatic Network Access Appendices Appendix Best Practice Dependent Device Properties Appendix References Â Â Â Â MWI References Â Â Â Â Device Independence Â Â Â Â Web, Protocols Languages Â Â Â Â Other References Appendix Acknowledgments List Best Practices following Best Practices are discussed document listed here convenience. Use Cookies Sparingly Use Appropriate Client-Side Storage Technologies Local Data Replicate Local Data Do not Execute Unescaped Untrusted JSON data Ensure User Informed Use Personal Device Information Enable Automatic Sign-in Use Transfer Compression Minimize Application Data Size Avoid Redirects Optimize Network Requests Minimize External Resources Aggregate Static Images Single Composite Resource Include Background Images Inline CSS Style Sheets Cache Resources Fingerprinting Resource References Cache AJAX Data Do not Send Cookie Information Unnecessarily Keep DOM Size Reasonable Optimize Application Start-up Time Minimize Perceived Latency Design Multiple Interaction Methods Preserve Focus Dynamic Page Updates Use Fragment IDs Drive Application View Make Telephone Numbers Ensure Paragraph Text Flows Ensure Consistency State Devices Consider Mobile Specific Technologies Initiating Web Applications Use Meta Viewport Element Identify Desired Screen Size Prefer Server-side Detection Possible Use Client-side Detection Necessary Use Device Classification Simplify Content Adaptation Support non-JavaScript Variant Appropriate Offer Users Choice Interfaces following advisory notes Mobile Web Best Practices Working Group are also discussed document listed here convenience. Consider Use Canvas Element SVG Dynamic Graphics Inform User Automatic Network Access Provide Sufficient Means Control Automatic Network Access Introduction Purpose Document document sets series recommendations designed facilitate development delivery Web applications mobile devices. recommendations are offered creators, maintainers operators mobile Web sites. Audience Readers document are expected be familiar creation Web applications, have general familiarity technologies involved, are not expected have background mobile technologies previous experience Mobile Web Best Practices document not targeted solely developers; others, such interaction graphic designers, site administrators, tool developers are encouraged read Scope recommendations expand recommendations BP1. focus BP1 primarily extension Web browsing mobile devices, document development Web applications mobile devices. Best Practices approach writing document been collate present most relevant engineering practices prevalent development community today identify facilitate exploitation device capabilities enable better user experience; b) are considered harmful have non-obvious detrimental effects overall quality application. goal document not invent endorse future technologies. However, there are number cases explicitly omitting Best Practice referred emerging technology grounds was too recent have received wide adoption have unnecessarily excluded valuable recommendation. such, Best Practices have been included grounds Working Group soon become fully qualified Best Practices prevalent use development community). building Web application, not necessary implement Best Practices. Instead, Best Practice be considered possible measure be implemented goal providing rich dynamic experience possible mobile Web browser. Web Application purposes document, term application" Web page variant thereof CSS) collection Web pages delivered HTTP use server-side client-side processing JavaScript) provide experience Web browser. Web applications are distinct simple Web content focus BP1) include locally executable elements interactivity persistent state. focus document Best Practices apply applications running Web browser, many cases recommendations are equally applicable other kinds Web run-time, such W3C work Web Widgets also number vendor-specific initiatives. Mobile Context world line mobile non-mobile necessarily blurred document focus solely best practices are uniquely mobile most likely be very short. mind, focus document address aspects Web application development there are additional, non-trivial concerns associated mobile context. equally limitations mobile context small screen, intermittent connectivity), also additional scope features be considered developing mobile context device context location, presence personal data device, etc). Delivery Context document builds concepts described Ubiquitous Web Applications Working Group Device Independence Principles also device delivery channel characteristics, UWA named Context" document not make explicit assumptions features Delivery Context, most Best Practices assume devices support standard XHTML, JavaScript, CSS capability. time writing, developers relatively complex Web applications targeting mid- high-end devices are most likely benefit Best Practices, technology expected range relevant devices increase. Additionally, Best Practices are relevant only device certain capabilities example, access device information such location). cases requirements are summarized separate sub-heading. Saying applications be sensitive Delivery Context level device knowledge content adaptation required. Best Practices specifically related area, see Handling Variations Delivery Context. Relationship other Best Practices recommendations recommendations are complementary recommendations Mobile Web Best Practices focus somewhat orthogonal. BP1 focused delivering good experience broad range devices, document's focus making use advanced device capabilities deliver best possible experience devices support reason, readers document are likely benefit reading BP1 not pre-requisite. Terminology Note term used place more correct) term order provide consistency companion Web application technologies AJAX) are common use implicitly refer JavaScript names. Also, terms XMLHttpRequest are used refer asynchronous browser request. Structure Best Practice Statements Heading summary functional area be addressed statements. means explanation intention Best Practice statement. do discussion techniques device capabilities required implement Best Practice. summary device capabilities required order Best Practice apply. Best Practice Statements Application Data Most applications have need store data various forms, intrinsic content emails email application, calendar events calendar application) supplementary personalization settings preferred theme, default view, etc). Best Practices relate appropriate technologies techniques use managing Web application's data. Use Cookies Sparingly means Cookies are common effective means store small amounts state client. are appropriate simple personalization data are commonly used store token representing user identity order enable automatic sign-in. Information stored cookies, however, sent server request so using excessive amounts data negatively impact performance, particularly mobile network. Also, mobile context, cookie support be relied be disabled device configuration mobile network. reason, applications endeavor remain functional even cookies are unavailable. See BP1 Do not rely cookies being available more cookie related caveats. Use Appropriate Client-Side Storage Technologies Local Data means supported device, client-side storage APIs provide mechanism store more extensive amounts data be appropriate cookies. time writing, work still undergoing unify APIs, see W3C WebApps working group Device APIs working group more information. Additionally, examples existing technologies support client-side storage APIs are BONDI HTML5 Opera Widgets Making use client-side storage Web applications powerful technique Web applications parity native applications terms start-up time responsiveness. key advantages are worth noting explicitly: Application data stored locally be displayed immediately application started need server roundtrip) allowing start-up latency be reduced. making updates locally first replicating changes back server background connectivity available, Web applications continue operate responsively even network signal unreliable. do technology offers variety storage facilities range simple = value" models appropriate relatively simple, unstructured data, full SQL Database APIs appropriate more extensive structured content. good technical discussion facilities context HTML5 see Offline Web Applications Client-Side Storage Local Storage API. Replicate Local Data Server Necessary means client-side storage API being used data not visible user's other devices. appropriate forms data preferences state relevant only given device), often necessary send data back server order provide consistent view devices mobile desktop instances application) make possible recover data device lost damaged. See Ensure Consistency State Devices further discussion topics. rule thumb, data needs be shared other devices recovered case lost damaged device, be replicated back server soon possible. do technologies provide client-side storage APIs provide facilities detect current network connectivity. example, HTML5 property navigator object indicate client currently online, dispatches events Window object indicate change network state offline). However, APIs be used caution. Even browser reporting online state, intermittent network guarantee subsequent connection succeed. most effective approach fail gracefully event connection failure, store unsaved data queue uncommitted changes, set timer try again later. Client-Side Storage Local Storage API. Security privacy Use trusted information, protect personally identifiable information. Mobile Web applications are subject same security considerations risks desktop Web applications, such most desktop related security advice applicable mobile. example, see OWASP good summary common Web security Best Practices). document not attempt provide exhaustive survey security issues following Best Practice been called grounds specifically relevant mobile. Do not Execute Unescaped Untrusted JSON data means common technique use JSON transfer data client then use JavaScript's eval() function parse powerful technique, constrained devices eval() execute more quickly alternatives. However, direct execution datafeed unescaped user-generated data significant security risk be avoided. Inadvertently executing malicious JavaScript particularly dangerous mobile devices personal information location, contact data, etc) be exposed. do possible, instead parsing JSON data executing eval() function, use JSON parser example JavaScript implementation JSON parser impractical ensure data user-generated content server responsible content fields datafeed) user-generated content correctly escaped. See RFC4627 details ensure JSON datafeed suitably escaped be safely passed JavaScript's eval() function. User Awareness Control Allow user control application behaviour not otherwise be apparent, such access network access device data. example: Pictures, music, video clips; Contacts, calendar data); Call history; System data coverage, roaming, location); Media recording audio/video clip, get new picture); Device context location, connectivity, profile setting). Note possible preferable rely browser's native functionality notify user activities, however Best Practices provide further advice appropriate application behaviour situations native functionality browser not be sufficient. Ensure User Informed Use Personal Device Information means Ensure user informed application needs access personal device information. user be informed types information be used application data be exchanged server. notices be provided user first accesses Web application, first access user information. provide user enough information judge not want allow application access data. do many cases use APIs provide access personal device information causes native confirmation dialog be presented user. case application not force user confirm again application level, make clear UI displayed data been accessed device. user declines prompt allow application access personal device information, application recover gracefully. example, request device API do not automatically retry lead user being presented repeated native confirmation dialog boxes. DEVICE DATA Device Data APIs. Enable Automatic Sign-in means application user identity usual prompt user credentials password) provide option sign-in automatically usage session. especially important mobile device data input more difficult desktop. Note automatic sign-in enabled, sign-out link also be provided. do User credentials be stored cookie local storage. However, important not store unencrypted password information insecure. Typically, securely hashed token necessary, be revoked server, stored locally order enable automatic sign-in. Conservative use resources most effective way ensure applications run smoothly low latency minimize use device memory, processor power, network bandwidth are more limited mobile devices desktop. Use Transfer Compression means Compress content efficient delivery. do HTTP compression, uses gzip DEFLATE algorithms, widely supported. Web servers be configured serve appropriately compressed responses. Note however, cost time battery usage) decompressing data be balanced gains transport efficiency. configuring HTTP compression note Most image formats JPEGs) do not benefit compression, SVG Most other media formats audio, video) do not benefit compression; Very small files <1k) generally do not benefit compression. supported, alternative compression formats EXI do not share impediments, provide benefit. Minimize Application Data Size means section elaborates Best Practices BP1 Smaller applications download execute more quickly more reliably larger ones constrained devices. do Process HTML, JavaScript CSS files remove whitespace minify delivery. take number forms simple removal white space comments, global substitution tokens method names, selector names) shorter alternatives. general, minification based lexical grammatical understanding source less fragile preferred simple regular-expression based tools. See JavaScript CompressorRater comparison JavaScript minification tools. Avoid Redirects means redirection requests HTTP 3xx status HTML meta refresh) typically used exchange information servers account authentication). delay incurred redirects much higher mobile networks so number redirects be kept minimum. do Try not use redirects. more redirects are required consider using interstitial page communicate user application still working. Optimize Network Requests means Establishing necessary connections order complete HTTP request take significantly longer mobile network fixed network. Even bandwidth typically more restricted mobile network still preferable make fewer, larger requests. do Consider following possibilities designing application: Batching requests: single request more data likely provide better user experience several smaller requests, possible, batch up multiple requests application level. Throttle low-priority requests: applications certain requests be less critical others logging requests). Throttle low-priority requests ensure don't block network prevent more critical requests being serviced quickly. Back periods inactivity: application polls updates, monitor user activity poll less frequently inactive periods. Device Context: supported device, use awareness current connectivity WiFi) select appropriate level interaction. Minimize External Resources means Web application typically number resources sheets, scripts, image, etc) HTTP request. above, HTTP requests are particularly expensive mobile network so fewer, larger requests be favored larger number smaller requests. do far makes sense taking account Minimize Perceived Latency combine style sheets single resource scripts single resource. multiple scripts style sheets are required part authoring process, then try arrange are merged page served. Aggregate Static Images Single Composite Resource means Web applications often depend number static images provide icons, buttons, etc. served separate image additional HTTP request detrimental performance. do Define candidate images CSS background images combine single image transfer optimize efficiency combine images similar sizes color palettes. Also, combine images do not change often, component images changes entire combination image need be refreshed. render individual components resource use CSS positioning clipping. Note technique only be applied decorative images don't require alt text). Spriting informational images leads undesirable coupling content layout detrimental accessibility. CSS CSS2 Clipping Positioning Support Include Background Images Inline CSS Style Sheets means Visual effects background images gradients) are often used improve look feel application. be included CSS base64 encoded strings order avoid additional HTTP request Note base64 encoding image size gzip compression additional cost be weighed benefits fewer requests. do Background images be encoded using data URI scheme: url('data:image/png;base64, CSS RFC2397 data uri support. Cache Resources Fingerprinting Resource References means Dynamic resources change occasionally user's avatar) still be cached identifying URI hash resource content. Using technique means browser not need check resource headers order validate cache, instead, change resource lead naturally corresponding change resource reference. example, <img src="http://www.example.com/userimages/joeblogs-67f90da089da"> actual resource joeblogs-[xxx] be generated offline process served dynamically. do Set resource caching policy expire" setting Expires header date far future. Reference resource using URI Hash content. content changes, reference change browser fetch updated data. Cache AJAX Data means possible, data designed be accessed AJAX requests client be cached same way primary content. do standard caching techniques header Cache-Control header), well resource fingerprinting be used AJAX data readily primary content pages. Do not Send Cookie Information Unnecessarily means Static resources do not need cookie information so performance be improved serving path sub-domain application's cookies are scope. do Use different domain, sub-domain, path name static resources main application, restrict valid path cookies such not be exchanged are not needed. example: Set-Cookie: somePreferenceInformation=purple; path=/myapp/ Application data served receive cookie information. Static data served not receive unneeded cookie information. Keep DOM Size Reasonable means in-memory size Document Object Model be limited mobile devices. Large complex pages exceed limit cause unpredictable errors. do Limit amount information DOM single time using pagination other appropriate techniques. User Experience Given additional complexities interacting application mobile device, special consideration be given overall user experience. User experience influenced number factors, including: latency, interaction method, data consistency. Optimize Application Start-up Time means User experience strongly influenced initial start-up time application. Offline Web application technologies HTML5 AppCache bring Web applications parity native applications terms start-up time ability be used even network coverage intermittent. following steps be considered minimize start time Web application. do Consider following techniques help minimize application start time: Use Offline Technology: Offline Web technologies example, AppCache) allow resources Web application HTML, JavaScript, CSS files) be specified stored locally so application start requiring round-trip server. Consider Partitioning Large Scripts: complex Web applications, JavaScript parsing contribute significant portion start time. functionality rarely used be moved separate scripts be loaded demand, lowering amount core code needs be parsed start-up. Use Local Storage: appropriate, store snapshot last application state so be displayed immediately start-up requiring server roundtrip. Minimize Number Local Storage Queries: number local storage queries required generate initial view significant contribution start-up latency. Try minimize number local storage queries required first view be displayed. Minimize Perceived Latency means Lowering perceived latency important factor improving overall usability Web application. do number techniques be used lower perceived latency: Enable Incremental Rendering: Place JavaScript bottom page browsers rendering halts parsing JavaScript) configure page so useful information be available viewable main content application still loading. Keep User Informed Activity: Use spinners progress bars keep user informed network device API accesses so do not think application halted. Avoid Page Reloads: reflect changes state show different views application, update pages dynamically manipulating DOM) rather reloading Preload Probable Next Views: Preload data frequently traversed paths application so be displayed more quickly user requests Design Multiple Interaction Methods means Interaction methods vary devices. main interaction methods be considered designing UI: Focus Based: browser focus element element; Pointer Based: Key-based navigation controls pointer cover part screen; Touch Based: Events are related directly finger stylus touch position screen. optimum configuration UI elements depending interaction method used device. Ideally, UI be adapted based knowledge interaction methods supported target device. not possible, then UI be designed provide good experience different interaction methods. Additionally note always) new interaction methods are likely emerge future, particularly fields voice assistive technology. additional, non-mobile specific, guidelines accessibility designing assistive technologies, see Web Content Accessibility Guidelines do Particularly navigation content multiple links back/forward carousel) following factors be considered: Focus Based: current focus page easily determined focus element be highlighted; Focus area jump automatically selectable element link link) affecting usability even widely spaced. Pointer Based: Selectable elements are associated other need be close moving pointer be slow; Selectable elements need be large enough be easily selected pointer often moves steps pixels; Selectable elements have rollovers make clear pointer entered active area. Touch Based: Selectable elements be don't have be) widely spaced user select directly; Selectable elements be large enough be easily selected list items have screen height least elements are focus are selected so extra information be passed user rollovers not work). Preserve Focus Dynamic Page Updates means JavaScript focus method be used move focus part page changed. However, unexpected, confuse irritate user, especially returning previous focus not easy. do Use JavaScript focus method only essential use application, not inhibit user control/interaction. Use Fragment IDs Drive Application View means Web applications switch views full page reload showing hiding sections content. However, means browser <back> button work default, not possible link directly specific views application. Usability enhanced enabling features: Enabling deep links content specific email) means user bookmark view return quickly; Enabling browser history natural method navigate application views natively supported browser. do Assign URI distinguishing fragment identifier http://myapp.example.org/myapp#view). Use JavaScript interrogate browser location order determine view display. further discussion topic see: Unique URLs pattern Ajax Design Patterns Web site. Note showing hiding content way have adverse accessibility not carefully handled. See WAI-ARIA more information writing accessible rich Web applications. Make Telephone Numbers means Standardized URI schemes have been defined common device functions, e.g. making phone calls, sending SMS, managing address books. URI schemes, supported, enable users easily use functions Web applications. do most broadly supported scheme tel: described RFC3966 Code such following be used enable <a href="tel:[PHONE-NUMBER]">[PHONE-NUMBER]</a> Note always be entered using full international prefix +1-201-555-0111) ensure works home country. Similarly RFC5724 be used send GSM SMS message) <a href="sms:[PHONE-NUMBER]?body=[MESSAGE]">[PHONE-NUMBER]</a> Note time writing support RFC limited device compatibility be verified deployment. Ensure Paragraph Text Flows means small screens important paragraph text flows so require horizontal scrolling so re-flow view orientation changed. See BP1 more details. do Do not use absolute pixel measures. Use percentage RELATIVE measures containers so text re-flow automatically. Ensure Consistency State Devices means recommendation builds recommendation BP1 Thematic Consistency) expands consider application preferences, personalization data, state form part overall experience mobile Web application. User credentials valid device be valid other devices. User preferences captured device be accessible other devices. Data updated device be viewable consistently other devices. important example offering consistent experience data entered desktop available mobile vice versa. do application data not exclusively relevant current device, favor storing server so be shared other devices. See Application Data more details. Consider Mobile Specific Technologies Initiating Web Applications means Network-initiated content delivery methods allow notifications updates be sent user even are application context. do Push method support be disclosed User Agent Profile document published device vendor, device classification repository. supported user agent, options Push methods include: OMA Push: widely supported enabler providing methods user-confirmed automatic content push, directed mobile browsers other user-agents. See OMA Push specifications more details; SMS; QR Codes; Alternative vendor-specific initiatives. Use Meta Viewport Element Identify Desired Screen Size means Certain classes browser attempt display desktop pages small screen automatically zooming display. be problematic applications have already been optimized small screen. viewport meta tag device scale render page. do typical viewport setting looks <meta name="viewport" content="width=device-width, initial-scale=1.0"/> inserted <head> element HTML document. setting informs browser always render page browser based scaling) appropriate pages specifically designed target screen-size. Handling Variation Delivery Context Variations Delivery Context different device capabilities) prominent feature mobile Web. Web applications adapt known discoverable properties Delivery Context adjusting content, navigation page flow, view offering good user experience broad range devices possible. Prefer Server-Side Detection Possible means possible, use evidence available server determine properties Delivery Context, adapt responses client transfer, thus improving user experience avoiding transfer unnecessary incompatible data. do most basic form, minimum evidence requesting device HTTP request header fields. Typically, following header fields provide evidence device capabilities: Accept: list MIME types aid selection creation alternative content representations suit requesting device. field not always reliable however, value often suggesting clients accept MIME type. User-Agent: generally unique opaque) string be used key device description repository set properties recorded repositories implementation implementation. W3C DDR Simple API common interface means expressing vocabulary properties such repositories. X-Wap-Profile: reference User Agent Profile requesting device. practice, referenced profile not always guaranteed be available, valid up-to-date, so value field sometimes used DDR corrections profiles are stored. devices send additional field X-Wap-Profile-Diff advertising temporary permanent variations specific device respect standard profile. Use Client-Side Capability Detection Necessary means not possible determine certain properties Delivery Context server, information be available client. Once obtained client, information be used directly adapt presentation, used request alternative, adapted content server. do are few client-side solutions available developer: JavaScript: most common solution. script device browser properties content behaviour application accordingly. be done ways: encapsulating differing behaviors control logic application Typically Delivery Context information gathered start session, dynamic information current screen orientation) be refreshed session. passing gathered information back server requesting alternative content dynamically adding new <script> element DOM XHR request). CSS Media Types: CSS Media Types allow different stylesheets be associated different media types print, screen, mobile) are traditionally used repurpose content destinations. list recognized media types limited, however, devices are notoriously idiosyncratic interpretation types, general not helpful technology context. See Media Types more details. CSS Media Queries: Media queries are extension paradigm allow developers apply specific style rules based device display characteristics screen width, orientation, resolution). time writing specification not fully supported, provide useful way modify page layout example re-flow sections text) more maintainable, declarative way possible script. See Media Queries more details. Use Device Classification Simplify Content Adaptation means large number devices are being targeted, application sensitive permutations large number configuration properties, number application variants required quickly become unmanageable. combat classify target devices build single application variant class. exploit device capabilities manageable code base. do Identify target devices application assign device classes varying capability. Focus application variants work class rather building device-specific exceptions variation device configuration. Device classes be defined application application basis, so variants be tailored accordingly. Example Possible definition application classes based rendering device API capabilities: Class Basic XHTML support, very basic scripting. XHR support. kind devices are not being explicitly supported, often advisable support non-XHR version case JavaScript been disabled device). Class Full AJAX JavaScript support. Class Advanced device APIs, example: access location API, device PIM data, application cache. Example Possible definition application classes based supported user-interaction modes: Class Pointer Based. Class Touch Based. Support non-JavaScript Variant Appropriate means Scripted XHR based applications are not supported browsers. broadest reach primary concern then consider providing variant application uses synchronous FORM posts place XHR requests. Best Practice related differing focus) BP OBJECTS_OR_SCRIPT]. do Essentially BP states favorable support devices defined first example appropriate. Doing ensure application be used broad range devices possible. Furthermore, cases non-JavaScript version be useful simple operations low-bandwidth situations. cases, however, particular application simply non-JavaScript counterpart Web based game, Instant Messaging client) case server return response human readable content explaining situation more detail. Ideally, content be adapted transfer checking not device supports JavaScript using DDR local index. However, cases device disabled JavaScript) JavaScript still be sent device process cover case, <noscript> element always be included contain suitably informative message. Offer Users Choice Interfaces means Not only device characteristic detection imperfect, always account differing use cases application. Therefore automatic detection not sufficient only mechanism determining version appropriate. do multiple versions application exist support various device classifications) always offer user opportunity change selection. Always attempt default most appropriate UI first use. Always remember user's preference future visits cookie local data store. Further Considerations Mobile Web Best Practices Working Group draw attention Web application developers following considerations. considerations not be viewed best practices, are not prevalent development community time writing. are published advisory notes. Consider Use Canvas Element SVG Dynamic Graphics means Canvas SVG provide alternative options incorporating graphics Web application. Support technologies devices so many cases choice technology use depend target devices given application. canvas element display region JavaScript be used draw simple graphics. contrast, SVG XML language defining vector graphic elements are added DOM be modified using JavaScript. SVG well-suited graphics be scalable components need be modified panning zooming map) canvas better suited static bitmap sufficient drawing scatter-chart creating visual effects). speed important, canvas be more effective. However Canvas flat bitmap not inherently accessible so not be used sole means conveying information. do See Canvas Element HTML5 specification section information use Canvas element. See W3C Scalable Vector Graphics home page information use SVG. Inform User Automatic Network Access means Network traffic mobile device battery incur expense so important inform user accessing network. Whenever application makes asynchronous XHR data requests, response user action automatically, be indicated appropriate manner so user remains informed control. do Applications disclose use network resources. simple icon indicating background activity usually sufficient not interrupt flow application. extensive background network activity required user be informed first visit site, first sign-in, associated help pages. kinds detailed information be disclosed associated help pages terms service are: often application interact Internet e.g. minutes, hourly, daily; long automatic behavior continue; heavy overall usage expected be type service plan recommended. Provide Sufficient Means Control Automatic Network Access means application makes automatic network requests poll server updates automatically store updated client state) means control activity be provided. do applications access network automatically provide means user disable activity. automatic network activity disabled, periodically prompt user make network requests. Consider allowing user adjust polling schedule control activities are allowed initiate network requests. Appendix Best Practice Dependent Device Properties following device properties included DDR Core Vocabulary are particular value supporting best practices recommended document. be available DDR supporting W3C's DDR Core Vocabulary: Display Width, Display Height, Display Color Depth Input Devices Markup Support Stylesheet Support Image Format Support Input Mode Support Cookie Support Script Support Appendix References MWI References MWBP Mobile Web Best Practices Jo Rabin, Editor, W3C Recommendation, July http://www.w3.org/TR/mobile-bp/) Device Independence DCODI Delivery Context Overview Device Independence, R. Gimson, R. Lewis, S. Sathish, Editors, W3C Working Group Note, March http://www.w3.org/TR/di-dco/) DIGLOSS Glossary Terms Device Independence, R. Lewis, Editor, W3C Working Draft progress), January http://www.w3.org/TR/2005/WD-di-gloss-20050118/) DIP Device Independence Principles, R. Gimson, Editor, W3C Working Group Note, September http://www.w3.org/TR/2003/NOTE-di-princ-20030901/) Web, Protocols Languages CSS Cascading Style Sheets Level Specification, HÃ¥kon Wium Lie, Bert Bos, Editors, W3C Recommendation, January revised April http://www.w3.org/TR/2008/REC-CSS1-20080411/) CSS2 Cascading Style Sheets, level CSS2 Specification, Bert Bos, HÃ¥kon Wium Lie, Chris Lilley, Ian Jacobs, Editors, W3C Recommendation, May revised April http://www.w3.org/TR/2008/REC-CSS2-20080411/) HTTP1.0 Hypertext Transfer Protocol HTTP/1.0 Request Comments: T. Berners-Lee, R. Fielding, H. Frystyk, May http://www.w3.org/Protocols/rfc1945/rfc1945) HTTP1.1 Hypertext Transfer Protocol HTTP/1.1 Request Comments: R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, T. Berners-Lee, June http://www.w3.org/Protocols/rfc2616/rfc2616.html) XML Extensible Markup Language Edition), Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler, FranÃ§ois Yergeau, Editors, W3C Recommendation, November http://www.w3.org/TR/2008/REC-xml-20081126/) Other References AJAX-UNIQUE Unique URLs pattern Ajax Design Patterns Web site http://ajaxpatterns.org/Unique_URLs) ARIA Accessible Rich Internet Applications James Craig et al, W3C Working Draft, September http://www.w3.org/TR/wai-aria/) BONDI OMTP Reference Implementation http://bondi.omtp.org/) CSSMQ Media Queries, HÃ¥kon Wium Lie, Tantek elik, Daniel Glazman, Anne van Kesteren, W3C Candidate Recommendation, July http://www.w3.org/TR/css3-mediaqueries/) CSSMT Cascading Style Sheets Level Revision Specification, Bert Bos et al, W3C Candidate Recommendation, September http://www.w3.org/TR/CSS21/media.html) DAP W3C Device APIs Working Group http://www.w3.org/2009/dap/) DDR Device Description Repository Simple API, Jo Rabin et al, W3C Recommendation, December http://www.w3.org/TR/DDR-Simple-API/) DDR-VOCAB Device Description Repository Core Vocabulary, Jo Rabin et al, W3C Working Group Note, April http://www.w3.org/TR/ddr-core-vocabulary/) EXI Efficient XML Interchange, W3C Candidate Recommendation, John Schneider Takuki Kamiya, December http://www.w3.org/TR/exi/) HTML5 HTML5, Ian Hickson David Hyatt, W3C Working Draft, October http://www.w3.org/TR/html5/) HTML5-OFFLINE HTML5, Ian Hickson David Hyatt, W3C Working Draft, October http://www.w3.org/TR/html5/offline.html#offline) JSCOMP JavaScript CompressorRater http://compressorrater.thruhere.net) JSON-PARSE Implementation secure JSON parser JavaScript https://github.com/douglascrockford/JSON-js/raw/master/json_parse.js) OFFLINE Offline Web Applications, Anne Van Kesteren Ian Hickson, W3C Working Group Note, May http://www.w3.org/TR/offline-webapps/) OMA-PUSH OMA Push http://www.openmobilealliance.org/Technical/wapindex.aspx) OPERA Opera Web Widget API http://dev.opera.com/libraries/widgetobject/) OWASP Open Web Application Security Project http://www.owasp.org/index.php/Main_Page) RFC2397 URL scheme, L.Masinter. IETF, August http://www.ietf.org/rfc/rfc2397.txt) RFC3966 tel URI Telephone Numbers, H. Schulzrinne. IETF, December http://www.ietf.org/rfc/rfc3966.txt) RFC4627 application/json Media Type JavaScript Object Notation D. Crockford, July http://www.ietf.org/rfc/rfc4627) RFC5724 URI Scheme Global System Mobile Communications Short Message Service E. Wilde A. Vaha-Sipila. IETF, January http://www.ietf.org/rfc/rfc5724.txt) SVG W3C Scalable Vector Graphics home page http://www.w3.org/Graphics/SVG/) UAPROF Open Mobile Alliance OMA-TS-UAProf-V2_0-20060206-A User Agent Profile Approved Version Feb http://www.openmobilealliance.org/technical/release_program/docs/UAProf/V2_0-20060206-A/OMA-TS-UAProf-V2_0-20060206-A.pdf) WCAG20 Web Content Accessibility Guidelines B. Caldwell, M. Cooper, L. Guarino Reid, G. Vanderheiden et al, W3C Recommendation December http://www.w3.org/TR/WCAG20/) WEBAPPS W3C WebApps Working Group http://www.w3.org/2008/webapps/) WIDGETS Widget Packaging Configuration, Marcos CÃ¡ceres, W3C Working Draft, October http://www.w3.org/TR/widgets/) WTAI WAP Forum wap-268-wtai-20010908-a Wireless Telephony Application Interface Specification http://www.openmobilealliance.org/tech/affiliates/LicenseAgreement.asp?DocName=/wap/wap-268-wtai-20010908-a.pdf) XHTML-Basic XHTML Basic Second Edition, Shane McCarron, Masayasu Ishikawa, Editors, W3C Recommendation, November http://www.w3.org/TR/2010/REC-xhtml-basic-20101123/) Appendix Acknowledgments editors thank members BPWG contributions various kinds. editors also thank contributors public list, contributors Last Call comments comments have been taken account creation document. editors acknowledge significant written contributions Daniel Appelquist, Vodafone Jo Rabin, mTLD Mobile Top Level Domain Phil Archer, W3C Jeff Sonstein, Rochester Institute Technology FranÃ§ois Daoust, W3C Scott Hughes, Vodafone 