XML Signature Syntax Processing Version XML Signature Syntax Processing Version W3C Recommendation April version: http://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/ Latest published version: http://www.w3.org/TR/xmldsig-core1/ Latest editor's draft: http://www.w3.org/2008/xmlsec/Drafts/xmldsig-core-11/ Previous version: http://www.w3.org/TR/2013/PR-xmldsig-core1-20130124/ Editors: Donald Eastlake, d3e3e3@gmail.com Joseph Reagle, reagle@mit.edu David Solo, dsolo@alum.mit.edu Frederick Hirsch, frederick.hirsch@nokia.com edition, Magnus Nyström, mnystrom@microsoft.com Thomas Roessler, tlr@w3.org edition, Kelvin Yiu, kelviny@microsoft.com Authors: Mark Bartel, mbartel@adobe.com John Boyer, boyerj@ca.ibm.com Barb Fox, bfox@Exchange.Microsoft.com Brian LaMacchia, bal@microsoft.com Ed Simon, edsimon@xmlsec.com refer errata document, include normative corrections. English version specification only normative version. Non-normative translations also be available. Copyright © IETF Trust W3C® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract document XML digital signature processing rules syntax. XML Signatures provide integrity, message authentication, signer authentication services data type, located XML signature elsewhere. Status Document Note: April reference XML Security URIs" RFC was updated. Director previously authorized publication knowing reference be updated future. section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director W3C Recommendation. stable document be used reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. original version specification was produced IETF/W3C XML Signature Working Group; Interoperability Report shows least implementations least interoperable implementations feature. Second Edition was produced W3C XML Security Specifications Maintenance Working Group, adding Canonical XML required canonicalization algorithm incorporating known errata. detailed list Second Edition changes available Second Edition implementation report demonstrating more implementations new features. Conformance-affecting changes XML Signature previous recommendation mainly affect set mandatory implement cryptographic algorithms, including Elliptic Curve DSA mark-up corresponding key material), additional hash algorithms. detailed explanation changes last Recommendation are available are also described diff document showing changes Second Edition, well diff document showing changes previous PR draft. refer implementation report version specification additional details implementation status features added revision. document was published XML Security Working Group Recommendation. wish make comments regarding document, please send public-xmlsec@w3.org archives). comments are welcome. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Additional information related IPR status XML Signature available. Table Contents Introduction Conformance Design Philosophy Versions, Namespaces Identifiers Acknowledgements Signature Overview Examples Simple Example SignedInfo, Methods, References) More Reference Extended Example SignatureProperty) Extended Example Manifest) Processing Rules Signature Generation Reference Generation Signature Generation Core Validation Reference Validation Signature Validation Core Signature Syntax ds:CryptoBinary Simple Type Signature element SignatureValue Element SignedInfo Element CanonicalizationMethod Element SignatureMethod Element Reference Element URI Attribute Reference Processing Model Same-Document URI-References Element DigestMethod Element DigestValue Element KeyInfo Element KeyName Element KeyValue Element DSAKeyValue Element RSAKeyValue Element ECKeyValue Element Explicit Curve Parameters Compatibility RFC RetrievalMethod Element X509Data Element Distinguished Name Encoding Rules PGPData Element SPKIData Element MgmtData Element XML Encryption EncryptedKey DerivedKey Elements DEREncodedKeyValue Element KeyInfoReference Element Object Element Additional Signature Syntax Manifest Element SignatureProperties Element Processing Instructions Signature Elements Comments Signature Elements Algorithms Algorithm Identifiers Implementation Requirements Message Digests SHA-1 SHA-224 SHA-256 SHA-384 SHA-512 Message Authentication Codes HMAC Signature Algorithms DSA RSA v1.5) ECDSA Canonicalization Algorithms Canonical XML Canonical XML Exclusive XML Canonicalization Transform Algorithms Canonicalization Base64 XPath Filtering Enveloped Signature Transform XSLT Transform XML Canonicalization Syntax Constraint Considerations XML Syntax Constraints, Canonicalization DOM/SAX Processing Canonicalization Namespace Context Portable Signatures Security Considerations Only Signed Secure Only be Signed Signed Check Security Model Algorithms, Key Lengths, Certificates, Etc. Error Messages Schema XSD Schema RNG Schema Definitions A. References A.1 Normative references A.2 Informative references Introduction document XML syntax processing rules creating representing digital signatures. XML Signatures be applied digital content object), including XML. XML Signature be applied content more resources. Enveloped enveloping signatures are data same XML document signature; detached signatures are data external signature element. More specifically, specification XML signature element type XML signature application; conformance requirements are specified way schema definitions prose respectively. specification also other useful types identify methods referencing collections resources, algorithms, keying management information. XML Signature method associating key referenced data not normatively specify keys are associated persons institutions, meaning data being referenced signed. Consequently, specification important component secure XML applications, not sufficient address application security/trust concerns, particularly respect using signed XML other data formats) basis human-to-human communication agreement. Such application specify additional key, algorithm, processing rendering requirements. further information, please see see section Security Considerations. Working Group implementers developers read XML Signature Best Practices number best practices related use XML Signature, including implementation considerations practical ways improving security. Conformance readability, brevity, historic reasons document uses term generally refer digital authentication values types. Obviously, term also strictly used refer authentication values are based public keys provide signer authentication. specifically discussing authentication values based symmetric secret key codes use terms authenticators authentication codes. section Check Security Model.) specification normative XML Schema full normative grammar defined XSD schema normative text specification. standalone XSD schema file authoritative case there disagreement XSD schema portions specification. key words NOT", NOT", NOT", specification are be interpreted described MUST only be used actually required interoperation limit behavior potential causing harm limiting retransmissions)" Consequently, use capitalized key words unambiguously specify requirements protocol application features behavior affect interoperability security implementations. key words are not used describe XML grammar; schema definitions unambiguously describe such requirements wish reserve prominence terms natural language descriptions protocols features. instance, XML attribute be described being Compliance Namespaces XML specification described document optional mandatory support algorithms, providing references algorithms. means conformant implementation given inputs be able produce outputs algorithms interoperate specified referenced specification. conformant implementation use technique achieve results were implemented according referenced specification, not required follow detailed implementation techniques specification. Design Philosophy design philosophy requirements specification are addressed original XML-Signature Requirements document XML Security Requirements document Versions, Namespaces Identifiers specification makes use XML namespaces, uses Uniform Resource Identifiers identify resources, algorithms, semantics. Implementations specification MUST use following XML namespace URIs: URI namespace prefix XML internal entity http://www.w3.org/2000/09/xmldsig# default namespace, ds:, dsig: <!ENTITY dsig http://www.w3.org/2009/xmldsig11# dsig11: <!ENTITY dsig11 implementations MUST support XML XML namespaces, use namespace URIs REQUIRED, namespace prefixes entity declarations given are merely editorial conventions used document. use implementations OPTIONAL. namespace URIs are also used prefix algorithm identifiers are control specification. resources not control specification, use designated Uniform Resource Names Uniform Resource Identifiers defined relevant normative external specification. http://www.w3.org/2000/09/xmldsig# namespace was introduced first edition specification. version not coin new elements algorithm identifiers namespace; instead, http://www.w3.org/2009/xmldsig11# namespace used. specification uses algorithm identifiers namespace http://www.w3.org/2001/04/xmldsig-more# were originally coined RFC associates identifiers specific algorithms. Implementations specification MUST be fully interoperable algorithms specified MAY compute requisite values technique leads same output. Examples items various namespaces include: SignatureProperties identified defined disg: namespace http://www.w3.org/2000/09/xmldsig#SignatureProperties ECKeyValue identified defined dsig11: namespace http://www.w3.org/2009/xmldsig11#ECKeyValue XSLT identified defined external URI http://www.w3.org/TR/1999/REC-xslt-19991116 SHA1 identified specification's namespace defined normative reference http://www.w3.org/2001/04/xmlenc#sha256 FIPS PUB Secure Hash Standard. U.S. Department Commerce/National Institute Standards Technology. provision made explicit version number syntax. future version specification explicit versioning document format, different namespace be used. Acknowledgements contributions members XML Signature Working Group first edition specification are gratefully acknowledged: Mark Bartel, Adobe, was Accelio John Boyer, IBM Mariano P. Consens, University Waterloo; John Cowan, Reuters Health; Donald Eastlake 3rd, Motorola Author/Editor); Barb Fox, Microsoft Christian Geuer-Pollmann, University Siegen; Tom Gindin, IBM; Phillip Hallam-Baker, VeriSign Inc; Richard Himes, US Courts; Merlin Hughes, Baltimore; Gregor Karlinger, IAIK TU Graz; Brian LaMacchia, Microsoft Peter Lipp, IAIK TU Graz; Joseph Reagle, NYU, was W3C Author/Editor); Ed Simon, XMLsec David Solo, Citigroup Petteri Stenius, Capslock; Raghavan Srinivas, Sun; Kent Tamura, IBM; Winchel Todd Vincent III, GSU; Carl Wallace, Corsec Security, Inc.; Greg Whitehead, Signio Inc. are first edition Last Call comments following: Dan Connolly, W3C Paul Biron, Kaiser Permanente, behalf XML Schema WG. Martin J. Duerst, W3C; Masahiro Sekiguchi, Fujitsu; behalf Internationalization WG/IG. Jonathan Marsh, Microsoft, behalf Extensible Stylesheet Language WG. following members XML Security Specification Maintenance Working Group contributed second edition: Juan Carlos Cruellas, Universitat Politècnica Catalunya; Pratik Datta, Oracle Corporation; Phillip Hallam-Baker, VeriSign, Inc.; Frederick Hirsch, Nokia, Editor); Konrad Lanz, Applied Information processing Kommunications Hal Lockhart, BEA Systems, Inc.; Robert Miller, MITRE Corporation; Sean Mullan, Sun Microsystems, Inc.; Bruce Rich, IBM Corporation; Thomas Roessler, W3C/ERCIM, contact, Editor); Ed Simon, W3C Invited Expert; Greg Whitehead, HP. Contributions version were received members XML Security Working Group: Scott Cantor, Juan Carlos Cruellas, Pratik Datta, Gerald Edgar, Ken Graf, Phillip Hallam-Baker, Brad Hill, Frederick Hirsch Editor), Brian LaMacchia, Konrad Lanz, Hal Lockhart, Cynthia Martin, Rob Miller, Sean Mullan, Shivaram Mysore, Magnus Nyström, Bruce Rich, Thomas Roessler contact, Editor), Ed Simon, Chris Solc, John Wray, Kelvin Yiu Working Group thanks Makoto Murata assistance RELAX NG schemas. Signature Overview Examples section overview examples XML digital signature syntax. specific processing given section Processing Rules. formal syntax found section Core Signature Syntax section Additional Signature Syntax. section, informal representation examples are used describe structure XML signature syntax. representation examples omit attributes, details potential features are fully explained later. XML Signatures are applied arbitrary digital content objects) indirection. Data objects are digested, resulting value placed element other information) element then digested cryptographically signed. XML digital signatures are represented Signature element following structure occurrence; more occurrences; more occurrences): Example <Signature ID?> <SignedInfo> <CanonicalizationMethod <SignatureMethod URI? > <DigestMethod> <DigestValue> </Reference>)+ </SignedInfo> <SignatureValue> ID?>)*</Signature> Signatures are related data objects URIs XML document, signatures are related local data objects fragment identifiers. Such local data be included enveloping signature enclose enveloped signature. Detached signatures are external network resources local data objects reside same XML document sibling elements; case, signature enveloping parent) enveloped child). Signature element Id attribute value/name) co-exist be combined other elements IDs) single XML document, care be taken choosing names such there are subsequent collisions violate ID uniqueness validity constraint Simple Example SignedInfo, Methods, References) following example detached signature content HTML4 XML specification. Example <Signature Id="MyFirstSignature" xmlns="http://www.w3.org/2000/09/xmldsig#"> <SignedInfo> <CanonicalizationMethod Algorithm="http://www.w3.org/2006/12/xml-c14n11"/> <SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/> <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/"> <Transforms> <Transform Algorithm="http://www.w3.org/2006/12/xml-c14n11"/> </Transforms> <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/> <DigestValue>dGhpcyBpcyBub3QgYSBzaWduYXR1cmUK...</DigestValue> </Reference> </SignedInfo> <SignatureValue>...</SignatureValue> <KeyInfo> <KeyValue>[s15b] <DSAKeyValue> <P>...</P><Q>...</Q><G>...</G><Y>...</Y> </DSAKeyValue> </KeyValue> </KeyInfo> </Signature> required SignedInfo element information actually signed. Core validation SignedInfo mandatory processes: validation signature SignedInfo validation Reference digest SignedInfo. Note algorithms used calculating SignatureValue are also included signed information SignatureValue element SignedInfo. CanonicalizationMethod algorithm used canonicalize SignedInfo element digested part signature operation. Note example not canonical form. examples specification are canonical form.) SignatureMethod algorithm used convert canonicalized SignedInfo SignatureValue. combination digest algorithm key dependent algorithm possibly other algorithms such padding, example RSA-SHA1. algorithm names are signed resist attacks based substituting weaker algorithm. promote application interoperability specify set signature algorithms MUST be implemented, use discretion signature creator. specify additional algorithms RECOMMENDED OPTIONAL implementation; design also permits arbitrary user specified algorithms. Reference element digest method resulting digest value calculated identified data object. also include transformations produced input digest operation. data object signed computing digest value signature value. signature later checked reference signature validation. KeyInfo key be used validate signature. Possible forms identification include certificates, key names, key agreement algorithms information define only few. KeyInfo optional reasons. First, signer not wish reveal key information document processing parties. Second, information be known application's context need not be represented explicitly. KeyInfo SignedInfo, signer wishes bind keying information signature, Reference easily identify include KeyInfo part signature. Use KeyInfo optional, however note senders receivers agree be used mechanism scope specification. More Reference Example <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/"> <Transforms> <Transform Algorithm="http://www.w3.org/2006/12/xml-c14n11"/> </Transforms> <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/> <DigestValue>dGhpcyBpcyBub3QgYSBzaWduYXR1cmUK...</DigestValue> </Reference> optional URI attribute Reference data object be signed. attribute be omitted most Reference Signature. limitation imposed order ensure references objects be matched unambiguously.) identification, description provided signer obtained signed data object form was digested digested content). verifier obtain digested content method so long digest particular, verifier obtain content different location such local store specified URI. optional ordered list processing steps were applied resource's content was digested. include operations such canonicalization, encoding/decoding compression/inflation), XSLT, XPath, XML schema validation, XInclude. XPath permit signer derive XML document portions source document. Consequently excluded portions change affecting signature validity. example, resource being signed signature such transform be used exclude signature value own computation. element present, resource's content digested directly. Working Group specified mandatory optional) canonicalization decoding algorithms, user specified are permitted. DigestMethod algorithm applied data applied specified) yield DigestValue. signing DigestValue content resource signer's key. Extended Example SignatureProperty) specification not address mechanisms making statements assertions. Instead, document means something be signed XML Signature message authentication, signer authentication). Applications wish represent other semantics rely other technologies, such instance, application use foo:assuredby attribute own markup reference Signature element. Consequently, application understand know make trust decisions given validity signature meaning assuredby syntax. also define SignatureProperties element type inclusion assertions signature signature semantics, time signing serial number hardware used cryptographic processes). Such assertions be signed including Reference SignatureProperties SignedInfo. signing application be very careful signs understand SignatureProperty) receiving application obligation understand semantic parent trust engine wish content signature generation be located SignatureProperty element. mandatory Target attribute references Signature element property Consider preceding example additional reference local Object SignatureProperty element. signature not only be detached enveloping Example <Signature Id="MySecondSignature" <SignedInfo> <Reference URI="http://www.w3.org/TR/xml-stylesheet/"> <Reference URI="#AMadeUpTimeStamp" Type="http://www.w3.org/2000/09/xmldsig#SignatureProperties">[p05] <Transforms> <Transform Algorithm="http://www.w3.org/2006/12/xml-c14n11"/> </Transforms> <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/> <DigestValue>dGhpcyBpcyBub3QgYSBzaWduYXR1cmUK...</DigestValue>[p10] </Reference> </SignedInfo> <Object> <SignatureProperties> <SignatureProperty Id="AMadeUpTimeStamp" Target="#MySecondSignature"> <timestamp xmlns="http://www.ietf.org/rfcXXXX.txt"> <date>19990914</date> <time>14:34:34:34</time> </timestamp> </SignatureProperty> </SignatureProperties> </Object> optional Type attribute Reference information resource identified URI. particular, indicate Object, SignatureProperty, Manifest element. be used applications initiate special processing Reference elements. References XML data element Object element identify actual element pointed element content not XML binary encoded data) reference identify Object Reference Type, given, indicate Object. Note Type advisory action based checking correctness required core behavior. Object optional element including data objects signature element elsewhere. Object be optionally typed encoded. Signature properties, such time signing, be optionally signed identifying Reference. properties are traditionally called signature term relationship XML term Extended Example Manifest) Manifest element provided meet additional requirements not directly addressed mandatory parts specification. requirements way Manifest satisfies follow. First, applications frequently need efficiently sign multiple data objects even signature operation expensive public key signature. requirement be met including multiple Reference elements SignedInfo inclusion digest data digested. However, applications not want core validation behavior associated approach Reference SignedInfo undergo reference validation DigestValue elements are checked. applications wish reserve reference validation decision logic example, application receive signature valid SignedInfo element Reference elements. single Reference identified data object digested not yield specified DigestValue) signature fail core validation. However, application wish treat signature valid Reference elements valid take different actions depending accomplish SignedInfo reference Manifest element more Reference elements same structure SignedInfo). Then, reference validation Manifest application control. Second, consider application many signatures different keys) are applied large number documents. inefficient solution have separate signature key) repeatedly applied large SignedInfo element many References); wasteful redundant. more efficient solution include many references single Manifest then referenced multiple Signature elements. example Reference signs Manifest found Object element. Example <Reference URI="#MyFirstManifest"[m02] Type="http://www.w3.org/2000/09/xmldsig#Manifest">[m03] <Transforms> <Transform Algorithm="http://www.w3.org/2006/12/xml-c14n11"/> </Transforms> <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/> <DigestValue>dGhpcyBpcyBub3QgYSBzaWduYXR1cmUK...=</DigestValue> </Reference> <Object>[m10] <Manifest Id="MyFirstManifest">[m11] <Reference>[m12] </Reference> <Reference>[m15] </Reference>[m17] </Manifest>[m18] </Object> Processing Rules sections describe operations be performed part signature generation validation. Signature Generation REQUIRED steps include generation Reference elements SignatureValue SignedInfo. Reference Generation data object being signed: Apply determined application, data object. Calculate digest value resulting data object. Create Reference element, including identification data object, transform elements, digest algorithm DigestValue. canonical form references are signed section Signature Generation validated section Reference Validation.) Reference Processing Model Reference Processing Model) use Canonical XML default processing behavior transformation expecting octet-stream, data object resulting URI dereferencing previous transformation list Transform elements node-set. RECOMMEND generating signatures, signature applications do not rely default behavior, explicitly identify transformation applied perform mapping. cases inclusive canonicalization desired, RECOMMEND Canonical XML be used. Signature Generation Create SignedInfo element SignatureMethod, CanonicalizationMethod Reference(s). Canonicalize then calculate SignatureValue SignedInfo based algorithms specified SignedInfo. Construct Signature element SignedInfo, Object(s) desired, encoding be different used signing), KeyInfo required), SignatureValue. Note, Signature same-document references, validation document introduce changes break signature. Consequently, applications be careful consistently process document refrain using external contributions defaults entities). Core Validation REQUIRED steps core validation include reference validation, verification digest contained Reference SignedInfo, cryptographic signature validation signature calculated SignedInfo. Note, there be valid signatures signature applications are unable validate. Reasons include failure implement optional parts specification, inability unwillingness execute specified algorithms, inability unwillingness dereference specified URIs URI schemes cause undesirable side effects), etc. Comparison value reference signature validation numeric integer) decoded octet sequence value. Different implementations produce different encoded digest signature values processing same resources variances encoding, such accidental white space. uses numeric octet comparison stated computed values problems are eliminated. Reference Validation Canonicalize SignedInfo element based CanonicalizationMethod SignedInfo. Reference SignedInfo: Obtain data object be digested. example, signature application dereference URI execute provided signer Reference element, obtain content other means such local cache.) Digest resulting data object using DigestMethod specified Reference specification. Compare generated digest value DigestValue SignedInfo Reference; there mismatch, validation Note, SignedInfo canonicalized step application ensure CanonicalizationMethod dangerous side effects, such rewriting URIs, note Canonicalization Method Signed, canonical form. Note, Signature element been created Signature Generation signature same document reference, implementation serialize XML content variations serialization. means Reference Validation needs canonicalize XML document digesting step avoid issues related variations serialization. Signature Validation Obtain keying information KeyInfo external source. Obtain canonical form SignatureMethod using CanonicalizationMethod use result previously obtained KeyInfo) confirm SignatureValue SignedInfo element. Note, KeyInfo transformed version thereof) be signed Reference element. Transformation validation reference orthogonal Signature Validation uses KeyInfo parsed. Additionally, SignatureMethod URI have been altered canonicalization SignedInfo absolutization relative URIs) canonical form MUST be used. However, required canonicalization specification not change URIs. Core Signature Syntax general structure XML signature described section Signature Overview Examples. section detailed syntax core signature features. Features described section are mandatory implement otherwise indicated. syntax defined following XML preamble, declaration, internal entity. Schema Definition: <?xml version="1.0" encoding="utf-8"?><!DOCTYPE schema PUBLIC XMLSchema schemaxmlns:ds CDATA #FIXED dsig % p % s xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="0.1" elementFormDefault="qualified"> Additional markup defined version specification uses dsig11: namespace. syntax defined XML schema following preamble: Schema Definition: <?xml version="1.0" encoding="utf-8"?><!DOCTYPE schema PUBLIC XMLSchema dsig dsig11 % p % s xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:dsig11="http://www.w3.org/2009/xmldsig11#" targetNamespace="http://www.w3.org/2009/xmldsig11#" version="0.1" elementFormDefault="qualified"> ds:CryptoBinary Simple Type specification ds:CryptoBinary simple type representing arbitrary-length integers XML octet strings. integer value first converted endian" bitstring. bitstring then padded leading bits so total number bits == mod there are integral number octets). bitstring entire leading octets are are removed high-order octet always non-zero). octet string then base64 encoded. conversion integer octet string equivalent IEEE I2OSP minimal length). type used values such RSAKeyValue DSAKeyValue. value be type base64Binary ds:CryptoBinary are defined base64Binary. example, signature algorithm RSA DSA then SignatureValue bignum be ds:CryptoBinary. However, HMAC-SHA1 signature algorithm then SignatureValue have leading octets be preserved. Thus SignatureValue generically defined type base64Binary. Schema Definition: <simpleType name="CryptoBinary"> <restriction base="base64Binary" Signature element Signature element root element XML Signature. Implementation MUST generate laxly schema valid Signature elements specified following schema: Schema Definition: <element name="Signature" type="ds:SignatureType"/><complexType name="SignatureType"> <sequence> <element ref="ds:SignedInfo"/> <element ref="ds:SignatureValue"/> <element ref="ds:KeyInfo" minOccurs="0"/> <element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/> </sequence> <attribute name="Id" type="ID" use="optional"/></complexType> SignatureValue Element SignatureValue element actual value digital signature; always encoded using base64 Schema Definition: <element name="SignatureValue" type="ds:SignatureValueType" <complexType name="SignatureValueType"> <simpleContent> <extension base="base64Binary"> <attribute name="Id" type="ID" use="optional"/> </extension> </simpleContent></complexType> SignedInfo Element structure SignedInfo canonicalization algorithm, signature algorithm, more references. SignedInfo element contain optional ID attribute allow be referenced other signatures objects. SignedInfo not include explicit signature digest properties calculation time, cryptographic device serial number, etc.). application needs associate properties signature digest, include such information SignatureProperties element Object element. Schema Definition: <element name="SignedInfo" type="ds:SignedInfoType"/> <complexType name="SignedInfoType"> <sequence> <element ref="ds:CanonicalizationMethod"/> <element ref="ds:SignatureMethod"/> <element ref="ds:Reference" maxOccurs="unbounded"/> </sequence> <attribute name="Id" type="ID" use="optional"/> </complexType> CanonicalizationMethod Element CanonicalizationMethod required element canonicalization algorithm applied SignedInfo element prior performing signature calculations. element uses general structure algorithms described section Algorithm Identifiers Implementation Requirements. Implementations MUST support REQUIRED canonicalization algorithms. Alternatives REQUIRED canonicalization algorithms such Canonical XML Comments minimal canonicalization CRLF charset normalization) be explicitly specified are NOT REQUIRED. Consequently, use not interoperate other applications do not support specified algorithm XML Canonicalization Syntax Constraint Considerations, section Security issues also arise treatment entity processing comments non-XML aware canonicalization algorithms are not properly constrained section Only be Signed). way SignedInfo element presented canonicalization method dependent method. following algorithms process XML nodes characters: XML based canonicalization implementations MUST be provided node-set originally formed document containing SignedInfo currently indicating SignedInfo, descendants, attribute namespace nodes SignedInfo descendant elements. Text based canonicalization algorithms CRLF charset normalization) be provided UTF-8 octets represent well-formed SignedInfo element, first character last character XML representation, inclusive. entire text start end tags SignedInfo element well descendant markup character data text) tags. Use text based canonicalization SignedInfo NOT RECOMMENDED. recommend applications implement text-based instead XML-based canonicalization such resource constrained apps generate canonicalized XML output serialization so mitigate interoperability security concerns. instance, such implementation least) generate standalone XML instances Note: signature application exercise great care accepting executing arbitrary CanonicalizationMethod. example, canonicalization method rewrite URIs References being validated. method massively transform SignedInfo so validation always succeed converting trivial signature known key trivial data). CanonicalizationMethod SignedInfo, resulting canonical form erase SignedInfo modify SignedInfo element so different canonicalization function was used! Thus Signature authenticate desired data desired key, DigestMethod, SignatureMethod, be meaningless capricious CanonicalizationMethod used. Schema Definition: <element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/> <complexType name="CanonicalizationMethodType" mixed="true"> <sequence> <any namespace="##any" minOccurs="0" maxOccurs="unbounded"/> <!-- elements namespace </sequence> <attribute name="Algorithm" type="anyURI" use="required"/> </complexType> SignatureMethod Element SignatureMethod required element algorithm used signature generation validation. algorithm cryptographic functions involved signature operation hashing, public key algorithms, MACs, padding, etc.). element uses general structure here algorithms described section Algorithm Identifiers Implementation Requirements. there single identifier, identifier specify format containing multiple distinct signature values. Schema Definition: <element name="SignatureMethod" type="ds:SignatureMethodType"/><complexType name="SignatureMethodType" mixed="true"> <sequence> <element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/> <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/> <!-- elements external namespace </sequence> <attribute name="Algorithm" type="anyURI" use="required"/> </complexType> ds:HMACOutputLength parameter used HMAC algorithms. parameter truncation length bits. parameter trusted further verification, then lead security bypass Signatures MUST be deemed invalid truncation length larger half underlying hash algorithm's output length, bits. Note implementations are known not accept truncation lengths are lower underlying hash algorithm's output length. Reference Element Reference element occur more times. digest algorithm digest value, optionally identifier object being signed, type object, list be applied prior digesting. identification describe digested content input digest method) was created. Type attribute facilitates processing referenced data. example, specification makes requirements external data, application wish signal referent Manifest. optional ID attribute permits Reference be referenced elsewhere. Schema Definition: <element name="Reference" type="ds:ReferenceType"/><complexType name="ReferenceType"> <sequence> <element ref="ds:Transforms" minOccurs="0"/> <element ref="ds:DigestMethod"/> <element ref="ds:DigestValue"/> </sequence> <attribute name="Id" type="ID" use="optional"/> <attribute name="URI" type="anyURI" use="optional"/> <attribute name="Type" type="anyURI" use="optional"/> </complexType> URI Attribute URI attribute data object using URI-Reference mapping attribute's value URI reference MUST be performed specified section Additionally: existing implementations are known verify value URI attribute grammar therefore safest perform necessary escaping generating URI attribute. RECOMMEND XML Signature applications be able dereference URIs HTTP scheme. Dereferencing URI HTTP scheme MUST comply Status Code Definitions redirects are followed obtain entity-body status code response). Applications also be cognizant fact protocol parameter state information, HTTP cookies, HTML device profiles content negotiation), affect content yielded dereferencing URI. resource identified more URI, most specific be used http://www.w3.org/2000/06/interop-pressrelease.html.en instead http://www.w3.org/2000/06/interop-pressrelease). section Core Validation further information reference processing.) URI attribute omitted altogether, receiving application expected know identity object. example, lightweight data protocol omit attribute given identity object part application context. attribute be omitted most Reference particular SignedInfo, Manifest. optional Type attribute information type object being signed ds:Reference have been applied. represented URI. example: Type="http://www.w3.org/2000/09/xmldsig#Object" Type="http://www.w3.org/2000/09/xmldsig#Manifest" Type attribute item being pointed not contents. example, reference results digesting Object element containing SignatureProperties element still type #Object. Type attribute advisory. validation type information required specification. Reference Processing Model Note: XPath RECOMMENDED. Signature applications need not conform specification order conform specification. However, XPath data model, definitions node-sets) syntax used document order describe functionality want process XML-as-XML octets) part signature generation. want use features, conformant implementation way implement features, not required. Such applications use sufficiently functional replacement node-set implement only XPath expression behaviors REQUIRED specification. However, simplicity generally use XPath terminology including qualification point. Requirements node-sets" include node-set functional equivalent. Requirements XPath processing include application behaviors are equivalent corresponding XPath behavior. data-type result URI dereferencing subsequent octet stream XPath node-set. specified document are defined respect input require. following default signature application behavior: data object octet stream transform node-set, signature application MUST attempt parse octets yielding required node-set well-formed processing. data object node-set transform octets, signature application MUST attempt convert node-set octet stream using Canonical XML Users specify alternative override defaults transitions expect different inputs. final octet stream data octets being secured. digest algorithm specified DigestMethod then applied data octets, resulting DigestValue. Note: section Reference Generation further restrictions reliance defined default transformations applications generate signatures. specification, reference defined URI-Reference hash sign followed fragment alternatively empty URI URI-Reference such reference result dereferencing URI-Reference MUST be octet stream. particular, XML document identified URI not parsed signature application URI same-document reference transform XML parsing applied. fragment preceded absolute relative URI URI-Reference, meaning fragment defined resource's MIME type Even XML documents, URI dereferencing fragment processing) be done signature application proxy. Therefore, reference validation fail fragment processing not performed standard way defined following section same-document references). Consequently, RECOMMEND case URI attribute not include fragment identifiers such processing be specified additional XPath Transform XPath Filter Transform fragment not preceded URI URI-Reference, XML Signature applications MUST support null URI shortname XPointer RECOMMEND support same-document XPointers application also support canonicalization comments. URI="#foo" automatically remove comments canonicalization even be invoked due processing defined Same-Document URI-References other support XPointers OPTIONAL, especially support shortname other XPointers external resources application not have control fragment generated interoperability problems validation failures). MUST be interpreted identify root node document URI attribute. MUST be interpreted identify element node identified evaluated respect document URI attribute. original edition specification referenced XPointer Candidate Recommendation implementations support optionally. Candidate Recommendation been superseded Recommendations, time edition Working Draft. Therefore, use xpointer() scheme usage discussed section discouraged. following examples demonstrate URI attribute dereferenced: URI="http://example.com/bar.xml" octets represent external resource probably XML document given file extension. URI="http://example.com/bar.xml#chapter1" element ID attribute value external XML resource provided octet stream. Again, sake interoperability, element identified be obtained using XPath transform rather URI fragment XPointer resolution external resources not REQUIRED specification). URI="" node-set comment nodes) XML resource containing signature URI="#chapter1" node-set containing element ID attribute value XML resource containing signature. XML Signature applications) modify node-set include element descendants including namespaces attributes not comments. Same-Document URI-References Dereferencing same-document reference MUST result XPath node-set suitable use Canonical XML Specifically, dereferencing null URI MUST result XPath node-set non-comment node XML document containing URI attribute. fragment URI, characters number sign character conform XPointer syntax processing XPointer, application MUST behave XPointer was evaluated respect XML document containing URI attribute application MUST behave result XPointer processing were node-set derived resultant subresource include XPath nodes having full partial content subresource replace root node children node-set) replace element node E E descendants E comment, PI, element) namespace attribute nodes E descendant elements. URI fragment identifier fragment identifier shortname XPointer, then delete comment nodes second last replacement necessary XPointer typically subtree XML document's parse tree using just element node root subtree, Canonical XML node-set set nodes absence descendant nodes results absence representative text canonical form. last step performed null URIs shortname XPointers necessary passed node-set, processes node-set comments. Only called octet stream invoke own XPath expressions comments). Therefore retain default behavior stripping comments passed node-set, are removed last step URI not scheme-based XPointer. retain comments selecting element identifier ID, use following scheme-based XPointer: URI='#xpointer(id('ID'))'. retain comments selecting entire document, use following scheme-based XPointer: URI='#xpointer(/)'. interpretation XPointers defined Reference Processing Model Element optional element ordered list Transform elements; describe signer obtained data object was digested. output Transform input Transform. input first Transform result dereferencing URI attribute Reference element. output last Transform input DigestMethod algorithm. are applied signer not signing native document resulting document. Only Signed Secure 8.1.1).) Transform Algorithm attribute content parameters, appropriate given algorithm. Algorithm attribute value name algorithm be performed, Transform content additional data govern algorithm's processing transform input. section Algorithm Identifiers Implementation Requirements) described Reference Processing Model take XPath node-set input, others require octet stream. actual input matches input needs transform, then transform unaltered input. transform input requirement format actual input, then input be converted. require explicit MIME type, charset registered set"), other such information concerning data are receiving earlier Transform source data, Transform algorithm specified document needs such explicit information. Such data characteristics are provided parameters Transform algorithm be described specification algorithm. Examples include are not limited base64 decoding canonicalization XPath filtering XSLT generic definition Transform element also application-specific transform algorithms. example, transform be decompression routine given Java class appearing base64 encoded parameter Java Transform algorithm. However, applications refrain using application-specific wish signatures be verifiable application domain. Transform Algorithms list standard transformations. Schema Definition: <element name="Transforms" type="ds:TransformsType"/><complexType name="TransformsType"> <sequence> <element ref="ds:Transform" maxOccurs="unbounded"/> </sequence></complexType><element name="Transform" type="ds:TransformType"/><complexType name="TransformType" mixed="true"> <choice minOccurs="0" maxOccurs="unbounded"> <any namespace="##other" processContents="lax"/> <!-- elements namespaces <element name="XPath" type="string"/> </choice> <attribute name="Algorithm" type="anyURI" use="required"/> </complexType> DigestMethod Element DigestMethod required element digest algorithm be applied signed object. element uses general structure here algorithms specified section Algorithm Identifiers Implementation Requirements. result URI dereference application XPath node-set sufficiently functional replacement implemented application) then be converted described section Reference Processing Model. result URI dereference application octet stream, then conversion be present Canonical XML Comments was specified digest algorithm applied data octets resulting octet stream. Schema Definition: <element name="DigestMethod" type="ds:DigestMethodType"/><complexType name="DigestMethodType" mixed="true"> <sequence> <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/> </sequence> <attribute name="Algorithm" type="anyURI" use="required"/> </complexType> DigestValue Element DigestValue element encoded value digest. digest always encoded using base64 Schema Definition: <element name="DigestValue" type="ds:DigestValueType"/><simpleType name="DigestValueType"> <restriction base="base64Binary"/></simpleType> KeyInfo Element KeyInfo optional element recipient(s) obtain key needed validate signature. KeyInfo contain keys, names, certificates other public key management information, such in-band key distribution key agreement data. specification few simple types applications extend types together replace own key identification exchange semantics using XML namespace facility However, questions trust such key information authenticity strength) are scope specification left application. Details structure usage element children KeyInfo other simple types described specification are scope. example, definition PKI certificate contents, certificate ordering, certificate revocation CRL management are scope. KeyInfo omitted, recipient expected be able identify key based application context. Multiple declarations KeyInfo refer same key. applications define use mechanism choose inclusion elements different namespace, compliant versions MUST implement KeyValue KeyValue Element) implement KeyInfoReference KeyInfoReference Element). KeyInfoReference preferred use RetrievalMethod avoids use Transform child elements introduce security risk implementation challenges. Support other children KeyInfo OPTIONAL. schema specification many KeyInfo's children PGPData, SPKIData, X509Data) permit content be extended/complemented elements namespace. be done only safe ignore extension elements claiming support types defined specification. Otherwise, external elements, including alternative structures defined specification, MUST be child KeyInfo. example, complete XML-PGP standard be defined, root element MUST be child KeyInfo. course, new structures external namespaces incorporate elements dsig: namespace features type definition language. instance, create schema permits, imports, new types based dsig: elements.) following list KeyInfo types are allocated identifier dsig: namespace; be used RetrievalMethod Type attribute describe remote KeyInfo structure. http://www.w3.org/2000/09/xmldsig#DSAKeyValue http://www.w3.org/2000/09/xmldsig#RSAKeyValue http://www.w3.org/2000/09/xmldsig#X509Data http://www.w3.org/2000/09/xmldsig#PGPData http://www.w3.org/2000/09/xmldsig#SPKIData http://www.w3.org/2000/09/xmldsig#MgmtData following list additional KeyInfo types are allocated identifier dsig11: namespace. http://www.w3.org/2009/xmldsig11#ECKeyValue http://www.w3.org/2009/xmldsig11#DEREncodedKeyValue addition types define XML structure, specify additional type indicate binary DER) X.509 Certificate. http://www.w3.org/2000/09/xmldsig#rawX509Certificate Schema Definition: <element name="KeyInfo" type="ds:KeyInfoType"/> <complexType name="KeyInfoType" mixed="true"> <choice maxOccurs="unbounded"> <element ref="ds:KeyName"/> <element ref="ds:KeyValue"/> <element ref="ds:RetrievalMethod"/> <element ref="ds:X509Data"/> <element ref="ds:PGPData"/> <element ref="ds:SPKIData"/> <element ref="ds:MgmtData"/> <!-- <element ref="dsig11:DEREncodedKeyValue"/> <!-- DEREncodedKeyValue use element <!-- <element ref="dsig11:KeyInfoReference"/> <!-- KeyInfoReference use element <!-- <element ref="xenc:EncryptedKey"/> <!-- EncryptedKey use element <!-- <element ref="xenc:Agreement"/> <!-- Agreement use element <any processContents="lax" namespace="##other"/> <!-- elements namespaces </choice> <attribute name="Id" type="ID" use="optional"/></complexType> KeyName Element KeyName element string value white space significant) be used signer communicate key identifier recipient. Typically, KeyName identifier related key pair used sign message, contain other protocol-related information indirectly key pair. uses KeyName include simple string names keys, key index, distinguished name email address, etc.) Schema Definition: <element name="KeyName" type="string" KeyValue Element KeyValue element single public key be useful validating signature. Structured formats defining DSA RSA ECDSA public keys are defined section Signature Algorithms. KeyValue element include externally defined public keys values represented PCDATA element types external namespace. Schema Definition: <element name="KeyValue" type="ds:KeyValueType" <complexType name="KeyValueType" mixed="true"> <choice> <element ref="ds:DSAKeyValue"/> <element ref="ds:RSAKeyValue"/> <!-- <element ref="dsig11:ECKeyValue"/> <!-- ECC keys use element <any namespace="##other" processContents="lax"/> </choice></complexType> DSAKeyValue Element Identifier Type="http://www.w3.org/2000/09/xmldsig#DSAKeyValue" be used RetrievalMethod Reference element identify referent's type) DSA keys DSA signature algorithm are specified DSA public key values have following fields: P prime modulus meeting requirements Q integer range < Q < prime divisor P-1 G integer certain properties respect P Q Y G**X mod P X part private key not made public) J Q seed DSA prime generation seed pgenCounter DSA prime generation counter Parameter J available inclusion solely efficiency calculatable P Q. Parameters seed pgenCounter are used DSA prime number generation algorithm specified such, are optional be present be absent. prime generation algorithm designed provide assurance weak prime not being used yields P Q value. Parameters P, Q, G be public common group users. be known application context. such, are optional P Q appear be absent. P, Q, seed, pgenCounter are present, implementations are not required check are consistent are free use P Q seed pgenCounter. parameters are encoded base64 values. Arbitrary-length integers such RSA moduli) are represented XML octet strings defined ds:CryptoBinary type. Schema Definition: <element name="DSAKeyValue" type="ds:DSAKeyValueType" <complexType name="DSAKeyValueType"> <sequence> <sequence minOccurs="0"> <element name="P" type="ds:CryptoBinary"/> <element name="Q" type="ds:CryptoBinary"/> </sequence> <element name="G" type="ds:CryptoBinary" minOccurs="0"/> <element name="Y" type="ds:CryptoBinary"/> <element name="J" type="ds:CryptoBinary" minOccurs="0"/> <sequence minOccurs="0"> <element name="Seed" type="ds:CryptoBinary"/> <element name="PgenCounter" type="ds:CryptoBinary"/> </sequence> </sequence></complexType> RSAKeyValue Element Identifier Type="http://www.w3.org/2000/09/xmldsig#RSAKeyValue" be used RetrievalMethod Reference element identify referent's type) RSA key values have fields: Modulus Exponent. Example <RSAKeyValue> <Modulus>xA7SEU+e0yQH5rm9kbCDN9o3aPIo7HbP7tX6WOocLZAtNfyxSZDU16ksL6W jubafOqNEpcwR3RdFsT7bCqnXPBe5ELh5u4VEy19MzxkXRgrMvavzyBpVRgBUwUlV 5foK5hhmbktQhyNdy/6LpQRhDUDsTvK+g9Ucj47es9AQJ3U= </Modulus> <Exponent>AQAB</Exponent></RSAKeyValue> Arbitrary-length integers such RSA moduli) are represented XML octet strings defined ds:CryptoBinary type. Schema Definition: <element name="RSAKeyValue" type="ds:RSAKeyValueType" name="RSAKeyValueType"> <sequence> <element name="Modulus" type="ds:CryptoBinary" <element name="Exponent" type="ds:CryptoBinary" </sequence></complexType> ECKeyValue Element Identifier Type="http://www.w3.org/2009/xmldsig11#ECKeyValue" be used RetrievalMethod Reference element identify referent's type) ECKeyValue element defined http://www.w3.org/2009/xmldsig11# namespace. EC public key values sub components: Domain parameters PublicKey. Example <ECKeyValue xmlns="http://www.w3.org/2009/xmldsig11#"> <NamedCurve URI="urn:oid:1.2.840.10045.3.1.7" <PublicKey> vWccUP6Jp3pcaMCGIcAh3YOev4gaa2ukOANC7Ufg Cf8KDO7AtTOsGJK7/TA8IC3vZoCy9I5oPjRhyTBulBnj7Y </PublicKey></ECKeyValue> Note line break been added PublicKey content preserve printed page width. Domain parameters be encoded explicitly using dsig11:ECParameters element reference using dsig11:NamedCurve element. named curve specified URI attribute. named curves are identified OIDs, such defined OID be encoded according Conformant applications MUST support dsig11:NamedCurve element 256-bit prime field curve identified OID PublicKey element Base64 encoding binary representation y point. value computed Convert elliptic curve point octet string first converting field elements y octet strings specified Section then prepend concatenated result conversion 0x04. Support Elliptic-Curve-Point-to-Octet-String conversion point compression REQUIRED. Base64 encode octet string resulting conversion Step Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="ECKeyValue" type="dsig11:ECKeyValueType" name="ECKeyValueType"> <sequence> <choice> <element name="ECParameters" type="dsig11:ECParametersType" <element name="NamedCurve" type="dsig11:NamedCurveType" </choice> <element name="PublicKey" type="dsig11:ECPointType" </sequence> <attribute name="Id" type="ID" use="optional" name="NamedCurveType"> <attribute name="URI" type="anyURI" use="required" name="ECPointType"> <restriction base="ds:CryptoBinary" Explicit Curve Parameters ECParameters element following subelements. Note definitions are based described FieldID element finite field elliptic curve defined. Additional details structures defining prime characteristic fields provided dsig11:Curve element coefficients b elliptic curve E. coefficient first converted field element octet string specified section then resultant octet string encoded base64. Base element base point P elliptic curve. base point represented value type ECPointType. Order element order n base point encoded positiveInteger. Cofactor element optional element integer h = cofactor not required support ECDSA, parameter validation. cofactor MAY be included support parameter validation ECDSA keys. Parameter validation not required specification. cofactor required ECDH public key parameters. dsig11:ValidationData element optional element hash algorithm used generate elliptic curve E base point G verifiably random. also seed was used generate curve base point. Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="ECParametersType"> <sequence> <element name="FieldID" type="dsig11:FieldIDType" <element name="Curve" type="dsig11:CurveType" <element name="Base" type="dsig11:ECPointType" <element name="Order" type="ds:CryptoBinary" <element name="CoFactor" type="integer" minOccurs="0" <element name="ValidationData" type="dsig11:ECValidationDataType" minOccurs="0" </sequence></complexType><complexType name="FieldIDType"> <choice> <element ref="dsig11:Prime" <element ref="dsig11:TnB" <element ref="dsig11:PnB" <element ref="dsig11:GnB" <any namespace="##other" processContents="lax" </choice></complexType><complexType name="CurveType"> <sequence> <element name="A" type="ds:CryptoBinary" <element name="B" type="ds:CryptoBinary" </sequence></complexType><complexType name="ECValidationDataType"> <sequence> <element name="seed" type="ds:CryptoBinary" </sequence> <attribute name="hashAlgorithm" type="anyURI" use="required" Prime fields are described single subelement P, field size bits. encoded positiveInteger. Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="Prime" type="dsig11:PrimeFieldParamsType" name="PrimeFieldParamsType"> <sequence> <element name="P" type="ds:CryptoBinary" </sequence></complexType> Structures are defined types characteristic fields: gaussian normal basis, pentanomial basis trinomial basis. Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="GnB" type="dsig11:CharTwoFieldParamsType" name="CharTwoFieldParamsType"> <sequence> <element name="M" type="positiveInteger" </sequence></complexType><element name="TnB" type="dsig11:TnBFieldParamsType" name="TnBFieldParamsType"> <complexContent> <extension base="dsig11:CharTwoFieldParamsType"> <sequence> <element name="K" type="positiveInteger" </sequence> </extension> </complexContent></complexType><element name="PnB" type="dsig11:PnBFieldParamsType" name="PnBFieldParamsType"> <complexContent> <extension base="dsig11:CharTwoFieldParamsType"> <sequence> <element name="K1" type="positiveInteger" <element name="K2" type="positiveInteger" <element name="K3" type="positiveInteger" </sequence> </extension> </complexContent></complexType> Compatibility RFC Implementations need support format ECDSA keys avoid known interoperability problems specification adhering following profile: Avoid validating ECDSAKeyValue element schema. XML schema validators not support integer types decimal data exceeding decimal digits. Support only NamedCurve element. Support 256-bit prime field curve, identified URN urn:oid:1.2.840.10045.3.1.7. following example ECDSAKeyValue element profile described section. Example <ECDSAKeyValue xmlns="http://www.w3.org/2001/04/xmldsig-more#"> <DomainParameters> <NamedCurve URN="urn:oid:1.2.840.10045.3.1.7" </DomainParameters> <PublicKey> <X Value="5851106065380174439324917904648283332 0204931884267326155134056258624064349885" <Y Value="1024033521368277752409102672177795083 </PublicKey></ECDSAKeyValue> Note line break been added X Y Value attribute values preserve printed page width. RetrievalMethod Element RetrievalMethod element KeyInfo used convey reference KeyInfo information stored location. example, several signatures document use key verified X.509v3 certificate chain appearing once document remotely document; signature's KeyInfo reference chain using single RetrievalMethod element instead including entire chain sequence X509Certificate elements. RetrievalMethod uses same syntax dereferencing behavior Reference URI attribute URI Attribute) Reference Processing Model there are DigestMethod DigestValue child elements presence URI attribute mandatory. Type optional identifier type data retrieved have been applied. result dereferencing RetrievalMethod Reference KeyInfo types defined specification section KeyInfo Element) corresponding XML structure XML element document element root. rawX509Certificate KeyInfo there XML structure) returns binary X509 certificate. Note referencing defined KeyInfo types same document, remote documents, least Transform required turn ID-based reference KeyInfo element child element located due lack XML ID attribute defined KeyInfo types. such cases, use KeyInfoReference encouraged instead, see section KeyInfoReference Element. Note: KeyInfoReference element preferred use RetrievalMethod avoids use Transform child elements introduce security risk implementation challenges. Schema Definition: <element name="RetrievalMethod" type="ds:RetrievalMethodType" <complexType name="RetrievalMethodType"> <sequence> <element ref="ds:Transforms" minOccurs="0" </sequence> <attribute name="URI" type="anyURI" <attribute name="Type" type="anyURI" use="optional" Note: schema URI attribute RetrievalMethod erroneously omitted attribute: use="required". However, error only results more lax schema permits valid RetrievalMethod elements. existing schema embedded many applications, include schema signatures, schema not been corrected be more restrictive. X509Data Element Identifier Type="http://www.w3.org/2000/09/xmldsig#X509Data be used RetrievalMethod Reference element identify referent's type) X509Data element KeyInfo more identifiers keys X509 certificates certificates' identifiers revocation list). content X509Data least element, following set element types; appear together more once iff only instance related same certificate: deprecated X509IssuerSerial element, X.509 issuer distinguished name/serial number pair. distinguished name be represented string complies section RFC4514 be generated according Distinguished Name Encoding Rules section X509SubjectName element, X.509 subject distinguished name be represented string complies section RFC4514 be generated according Distinguished Name Encoding Rules section X509SKI element, base64 encoded plain non-DER-encoded) value X509 V.3 SubjectKeyIdentifier extension, X509Certificate element, base64-encoded certificate, X509CRL element, base64-encoded certificate revocation list dsig11:X509Digest element base64-encoded digest certificate. digest algorithm URI identified required Algorithm attribute. input digest MUST be raw octets be base64-encoded were same certificate appear X509Certificate element. Elements external namespace accompanies/complements elements X509IssuerSerial, X509SKI, X509SubjectName, dsig11:X509Digest elements appear MUST refer certificate certificates containing validation key. such elements refer particular individual certificate MUST be grouped single X509Data element certificate refer MUST also be X509Data element. X509IssuerSerial, X509SKI, X509SubjectName, dsig11:X509Digest elements relate same key different certificates MUST be grouped single KeyInfo MAY occur multiple X509Data elements. Note X509Data child elements are used identify trusted certificate solely untrusted hint supplemented validation policy), complete set such elements are intended identify certificate be integrity protected, typically signing entire X509Data KeyInfo element. certificates appearing X509Data element MUST relate validation key containing being part certification chain certificate containing validation key. ordering implied constraints. comments following instance demonstrate constraints: Example <KeyInfo> <X509Data> <!-- pointers certificate-A <X509IssuerSerial> <X509IssuerName> CN=TAMURA Kent, OU=TRL, O=IBM, L=Yamato-shi, ST=Kanagawa, C=JP </X509IssuerName> <X509SerialNumber>12345678</X509SerialNumber> </X509IssuerSerial> <X509SKI>31d97bd7</X509SKI> </X509Data> <X509Data><!-- single pointer certificate-B <X509SubjectName>Subject Certificate B</X509SubjectName> </X509Data> <X509Data> <!-- certificate chain <!--Signer cert, issuer CN=arbolCA,OU=FVT,O=IBM,C=US, serial <X509Certificate>MIICXTCCA..</X509Certificate> <!-- Intermediate cert subject CN=arbolCA,OU=FVT,O=IBM,C=US issuer CN=tootiseCA,OU=FVT,O=Bridgepoint,C=US <X509Certificate>MIICPzCCA...</X509Certificate> <!-- Root cert subject CN=tootiseCA,OU=FVT,O=Bridgepoint,C=US <X509Certificate>MIICSTCCA...</X509Certificate> </X509Data></KeyInfo> Note, there direct provision PKCS#7 encoded certificates CRLs. However, set certificates CRLs occur X509Data element multiple X509Data elements occur KeyInfo. Whenever multiple certificates occur X509Data element, least such certificate contain public key signature. principle many certificate encodings are possible, RECOMMENDED certificates appearing X509Certificate element be limited encoding BER DER subset, allowing certificate other content be present. use other encodings lead interoperability issues. case, XML Signature implementations NOT alter re-encode certificates, doing so invalidate signatures. X509IssuerSerial element been deprecated favor newly-introduced dsig11:X509Digest element. XML Schema type serial number was defined be integer, XML Schema validators not support integer types decimal data exceeding decimal digits proven insufficient, many Certificate Authorities issue certificates large, random serial numbers exceed limit. result, deployments do make use element take care schema validation involved. New deployments avoid use element. Distinguished Name Encoding Rules encode distinguished name KeyName appropriate), encoding rules section RFC be applied, character escaping rules section RFC MAY be augmented Escape occurrences ASCII control characters range replacing followed digit hex number showing Unicode number. Escape trailing space characters replacing instead using escape sequence XML document logically characters, not octets, resulting Unicode string finally encoded according character encoding used producing physical representation XML document. Schema Definition: <element name="X509Data" type="ds:X509DataType"/> <complexType name="X509DataType"> <sequence maxOccurs="unbounded"> <choice> <element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/> <element name="X509SKI" type="base64Binary"/> <element name="X509SubjectName" type="string"/> <element name="X509Certificate" type="base64Binary"/> <element name="X509CRL" type="base64Binary"/> <!-- <element ref="dsig11:X509Digest"/> <!-- X509Digest element use element <any namespace="##other" processContents="lax"/> </choice> </sequence></complexType><complexType name="X509IssuerSerialType"> <sequence> <element name="X509IssuerName" type="string"/> <element name="X509SerialNumber" type="integer"/> </sequence></complexType><!-- Note, schema permits X509Data be empty; precluded text <a href="#sec-KeyInfo" class="sectionRef"></a> states least element dsig namespace be present PGP, SPKI, X509 structures. easily expressed other key types, not X509Data rich structure. targetNameSpace="http://www.w3.org/2009/xmldsig11#" name="X509Digest" type="dsig11:X509DigestType"/><complexType name="X509DigestType"> <simpleContent> <extension base="base64Binary"> <attribute name="Algorithm" type="anyURI" use="required"/> </extension> </simpleContent></complexType> PGPData Element Identifier Type="http://www.w3.org/2000/09/xmldsig#PGPData be used RetrievalMethod Reference element identify referent's type) PGPData element KeyInfo used convey information related PGP public key pairs signatures such keys. PGPKeyID's value base64Binary sequence containing standard PGP public key identifier defined section PGPKeyPacket base64-encoded Key Material Packet defined section children element types be complemented/extended siblings external namespace PGPData, PGPData be replaced together alternative PGP XML structure child KeyInfo. PGPData contain PGPKeyID PGPKeyPacket more elements external namespace. Schema Definition: <element name="PGPData" type="ds:PGPDataType"/> <complexType name="PGPDataType"> <choice> <sequence> <element name="PGPKeyID" type="base64Binary"/> <element name="PGPKeyPacket" type="base64Binary" minOccurs="0"/> <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/> </sequence> <sequence> <element name="PGPKeyPacket" type="base64Binary"/> <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/> </sequence> </choice></complexType> SPKIData Element Identifier Type="http://www.w3.org/2000/09/xmldsig#SPKIData be used RetrievalMethod Reference element identify referent's type) SPKIData element KeyInfo used convey information related SPKI public key pairs, certificates other SPKI data. SPKISexp base64 encoding SPKI canonical S-expression. SPKIData have least SPKISexp; SPKISexp be complemented/extended siblings external namespace SPKIData, SPKIData be entirely replaced alternative SPKI XML structure child KeyInfo. Schema Definition: <element name="SPKIData" type="ds:SPKIDataType"/> <complexType name="SPKIDataType"> <sequence maxOccurs="unbounded"> <element name="SPKISexp" type="base64Binary"/> <any namespace="##other" processContents="lax" minOccurs="0"/> </sequence></complexType> MgmtData Element Identifier Type="http://www.w3.org/2000/09/xmldsig#MgmtData be used RetrievalMethod Reference element identify referent's type) MgmtData element KeyInfo string value used convey in-band key distribution agreement data. However, use element NOT RECOMMENDED NOT be used. section XML Encryption EncryptedKey DerivedKey Elements new KeyInfo types conveying key information. Schema Definition: <element name="MgmtData" type="string" XML Encryption EncryptedKey DerivedKey Elements <xenc:EncryptedKey> <xenc:DerivedKey> elements defined children ds:KeyInfo be used convey in-band encrypted derived key material. particular, xenc:DerivedKey> element be present key used calculating Message Authentication Code derived shared secret. DEREncodedKeyValue Element Identifier Type="http://www.w3.org/2009/xmldsig11#DEREncodedKeyValue" be used RetrievalMethod Reference element identify referent's type) public key algorithm value are DER-encoded accordance value be used Subject Public Key Info field X.509 certificate, section DER-encoded value then base64-encoded. key value types supported specification, refer following normative references format Subject Public Key Info relevant OID values identify key/algorithm type: RSA See section DSA See section EC See section Specifications define additional key types provide such normative reference own key types possible. Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="DEREncodedKeyValue" type="dsig11:DEREncodedKeyValueType" name="DEREncodedKeyValueType"> <simpleContent> <extension base="base64Binary"> <attribute name="Id" type="ID" use="optional"/> </extension> </simpleContent></complexType> Historical note: DEREncodedKeyValue element was added XML Signature order support certain interoperability scenarios least signer verifier are not able serialize keys XML formats described section KeyValue Element KeyValue element be used XML key representations XML wrappings other binary encodings ASN.1 DER); reason DEREncodedKeyValue element not child KeyValue. DEREncodedKeyValue element also not child X509Data element, keys represented DEREncodedKeyValue not have X.509 certificates associated requirement X509Data). KeyInfoReference Element KeyInfoReference element KeyInfo used convey reference KeyInfo element location same different document. example, several signatures document use key verified X.509v3 certificate chain appearing once document remotely document; signature's KeyInfo reference chain using single KeyInfoReference element instead including entire chain sequence X509Certificate elements repeated multiple places. KeyInfoReference uses same syntax dereferencing behavior Reference's URI section URI Attribute) Reference Processing Model Reference Processing Model) there are child elements presence URI attribute mandatory. result dereferencing KeyInfoReference MUST be KeyInfo element, XML document KeyInfo element root. Note: KeyInfoReference element desirable alternative use RetrievalMethod data being referred KeyInfo element use RetrievalMethod require more Transform child elements, introduce security risk implementation challenges. Schema Definition: <!-- targetNamespace="http://www.w3.org/2009/xmldsig11#" name="KeyInfoReference" type="dsig11:KeyInfoReferenceType"/> <complexType name="KeyInfoReferenceType"> <attribute name="URI" type="anyURI" use="required"/> <attribute name="Id" type="ID" use="optional"/></complexType> Object Element Identifier Type="http://www.w3.org/2000/09/xmldsig#Object" be used Reference element identify referent's type) Object optional element occur more times. present, element contain data. Object element include optional MIME type, ID, encoding attributes. Object's Encoding attributed be used provide URI method object encoded binary file). MimeType attribute optional attribute data Object encoding). string values defined example, Object base64 encoded PNG, Encoding be specified MimeType attribute purely advisory; validation MimeType information required specification. Applications require normative type encoding information signature validation specify well defined resulting types encodings. Object's Id commonly referenced Reference SignedInfo, Manifest. element typically used enveloping signatures object being signed be included signature element. digest calculated entire Object element including start end tags. Note, application wishes exclude <Object> tags digest calculation Reference identify actual data object XML documents) transform be used remove Object tags data object non-XML). Exclusion object tags be desired cases signature remain valid data object moved signature signature vice versa), content Object encoding original binary document desired extract decode so sign original bitwise representation. Schema Definition: <element name="Object" type="ds:ObjectType" <complexType name="ObjectType" mixed="true"> <sequence minOccurs="0" maxOccurs="unbounded"> <any namespace="##any" processContents="lax" </sequence> <attribute name="Id" type="ID" use="optional" <attribute name="MimeType" type="string" use="optional" <attribute name="Encoding" type="anyURI" use="optional" </complexType> Additional Signature Syntax section optional implement Manifest SignatureProperties elements handling XML processing instructions comments. respect elements Manifest SignatureProperties section syntax little behavior left application. elements appear anywhere parent's content model permits; Signature content model only permits Object. Manifest Element Identifier Type="http://www.w3.org/2000/09/xmldsig#Manifest" be used Reference element identify referent's type) Manifest element list References. difference list SignedInfo application defined digests are actually checked objects referenced do object inaccessible digest compare Manifest pointed SignedInfo, digest Manifest be checked core signature validation behavior. digests such Manifest are checked application's discretion. Manifest referenced Manifest, even overall digest level deep Manifest not be checked. Schema Definition: <element name="Manifest" type="ds:ManifestType" <complexType name="ManifestType"> <sequence> <element ref="ds:Reference" maxOccurs="unbounded" </sequence> <attribute name="Id" type="ID" use="optional" </complexType> SignatureProperties Element Identifier Type="http://www.w3.org/2000/09/xmldsig#SignatureProperties" be used Reference element identify referent's type) Additional information items concerning generation signature(s) be placed SignatureProperty element date/time stamp serial number cryptographic hardware used signature generation). Schema Definition: <element name="SignatureProperties" type="ds:SignaturePropertiesType" <complexType name="SignaturePropertiesType"> <sequence> <element ref="ds:SignatureProperty" maxOccurs="unbounded" </sequence> <attribute name="Id" type="ID" use="optional" </complexType><element name="SignatureProperty" type="ds:SignaturePropertyType" <complexType name="SignaturePropertyType" mixed="true"> <choice maxOccurs="unbounded"> <any namespace="##other" processContents="lax" <!-- elements namespaces </choice> <attribute name="Target" type="anyURI" use="required" <attribute name="Id" type="ID" use="optional" </complexType> Processing Instructions Signature Elements XML processing instructions are used specification. Note PIs placed SignedInfo application be signed CanonicalizationMethod algorithm discards true signed XML content.) CanonicalizationMethods identified specification retain PIs. PI part content signed SignedInfo referenced XML documents) change PI obviously result signature failure. Comments Signature Elements XML comments are not used specification. Note CanonicalizationMethod comments SignedInfo other referenced XML be signed. Consequently, are retained, change comment cause signature failure. Similarly, XML signature XML data be sensitive comment changes comment-ignoring canonicalization/transform method, such Canonical XML specified. Algorithms section algorithms used XML digital signature specification. Entries contain identifier be used Signature elements, reference formal specification, definitions, applicable, representation keys results cryptographic operations. Algorithm Identifiers Implementation Requirements Algorithms are identified URIs appear attribute element algorithms' role Transform, SignatureMethod, CanonicalizationMethod). algorithms used herein take parameters many cases parameters are implicit. example, SignatureMethod implicitly given parameters: keying info output CanonicalizationMethod. Explicit additional parameters algorithm appear content elements algorithm role element. Such parameter elements have descriptive element name, frequently algorithm specific, MUST be XML Signature namespace algorithm specific namespace. specification set algorithms, URIs, requirements implementation. Requirements are specified implementation, not requirements signature use. Furthermore, mechanism extensible; alternative algorithms be used signature applications. Digest Required SHA1 DISCOURAGED; see SHA-1 Warning) http://www.w3.org/2000/09/xmldsig#sha1 SHA256 http://www.w3.org/2001/04/xmlenc#sha256 Optional SHA224 http://www.w3.org/2001/04/xmldsig-more#sha224 SHA384 http://www.w3.org/2001/04/xmldsig-more#sha384 SHA512 http://www.w3.org/2001/04/xmlenc#sha512 Encoding Required base64 http://www.w3.org/2000/09/xmldsig#base64 MAC Required HMAC-SHA1 DISCOURAGED; see SHA-1 Warning) http://www.w3.org/2000/09/xmldsig#hmac-sha1 HMAC-SHA256 http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 Recommended HMAC-SHA384 http://www.w3.org/2001/04/xmldsig-more#hmac-sha384 HMAC-SHA512 http://www.w3.org/2001/04/xmldsig-more#hmac-sha512 Optional HMAC-SHA224 http://www.w3.org/2001/04/xmldsig-more#hmac-sha224 Signature Required RSAwithSHA256 http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 RSA v1.5)] ECDSAwithSHA256 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256 ECDSA] DSAwithSHA1 verification) http://www.w3.org/2000/09/xmldsig#dsa-sha1 DSA] Recommended RSAwithSHA1 verification; use signature generation DISCOURAGED; see SHA-1 Warning) http://www.w3.org/2000/09/xmldsig#rsa-sha1 Optional RSAwithSHA224 http://www.w3.org/2001/04/xmldsig-more#rsa-sha224 RSA v1.5)] RSAwithSHA384 http://www.w3.org/2001/04/xmldsig-more#rsa-sha384 RSA v1.5)] RSAwithSHA512 http://www.w3.org/2001/04/xmldsig-more#rsa-sha512 ECDSAwithSHA1 DISCOURAGED; see SHA-1 Warning) http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1 ECDSA] ECDSAwithSHA224 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224 ECDSA] ECDSAwithSHA384 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384 ECDSA] ECDSAwithSHA512 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512 ECDSA] DSAwithSHA1 generation) http://www.w3.org/2000/09/xmldsig#dsa-sha1 DSA] DSAwithSHA256 http://www.w3.org/2009/xmldsig11#dsa-sha256 DSA] Canonicalization Required Canonical XML comments) http://www.w3.org/TR/2001/REC-xml-c14n-20010315 Canonical XML comments) http://www.w3.org/2006/12/xml-c14n11 Exclusive XML Canonicalization comments) http://www.w3.org/2001/10/xml-exc-c14n# Recommended Canonical XML comments) http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments Canonical XML comments) http://www.w3.org/2006/12/xml-c14n11#WithComments Exclusive XML Canonicalization comments) http://www.w3.org/2001/10/xml-exc-c14n#WithComments Transform Required base64 http://www.w3.org/2000/09/xmldsig#base64 Enveloped Signature http://www.w3.org/2000/09/xmldsig#enveloped-signature Recommended XPath http://www.w3.org/TR/1999/REC-xpath-19991116 XPath Filter http://www.w3.org/2002/06/xmldsig-filter2 Optional XSLT http://www.w3.org/TR/1999/REC-xslt-19991116 Note same URI used identify base64 context Object element) well context identifying base64 transform). Enveloped Signature transform Signature element calculation signature signature content being signed. MAY be implemented XPath specification specified Enveloped Signature Transform; MUST have same effect specified XPath Transform. using RECOMMEND selecting least expressive choice still accomplishes needs use case hand: Use XPath filter recommended use XPath filter. Use XPath filter recommended use XSLT. Note: Implementation requirements XPath transform be downgraded OPTIONAL future version specification. Message Digests specification several possible digest algorithms DigestMethod element, including REQUIRED algorithm SHA-256. Use SHA-256 strongly recommended SHA-1 recent advances cryptanalysis e.g. have cast doubt long-term collision resistance SHA-1. Therefore, SHA-1 support REQUIRED specification only backwards-compatibility reasons. Digest algorithms are known not be collision resistant NOT be used DigestMethod elements. example, MD5 message digest algorithm NOT be used specific collisions have been demonstrated algorithm. SHA-1 Identifier: http://www.w3.org/2000/09/xmldsig#sha1 Note: Use SHA-256 strongly recommended SHA-1 recent advances cryptanalysis e.g. have cast doubt long-term collision resistance SHA-1. SHA-1 algorithm explicit parameters. example SHA-1 DigestAlg element Example <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/> SHA-1 digest 160-bit string. content DigestValue element be base64 encoding bit string viewed 20-octet octet stream. example, DigestValue element message digest: Example A9993E36 4706816A BA3E2571 9CD0D89D Appendix SHA-1 standard be: Example <DigestValue>qZk+NkcGgWq6PiVxeFDCbJzQ2J0=</DigestValue> SHA-224 Identifier: http://www.w3.org/2001/04/xmldsig-more#sha224 SHA-224 algorithm explicit parameters. SHA-224 digest 224-bit string. content DigestValue element be base64 encoding bit string viewed 28-octet octet stream. SHA-256 Identifier: http://www.w3.org/2001/04/xmlenc#sha256 SHA-256 algorithm explicit parameters. SHA-256 digest 256-bit string. content DigestValue element be base64 encoding bit string viewed 32-octet octet stream. SHA-384 Identifier: http://www.w3.org/2001/04/xmldsig-more#sha384 SHA-384 algorithm explicit parameters. SHA-384 digest 384-bit string. content DigestValue element be base64 encoding bit string viewed 48-octet octet stream. SHA-512 Identifier: http://www.w3.org/2001/04/xmlenc#sha512 SHA-512 algorithm explicit parameters. SHA-512 digest 512-bit string. content DigestValue element be base64 encoding bit string viewed 64-octet octet stream. Message Authentication Codes MAC algorithms take implicit parameters, keying material determined KeyInfo octet stream output CanonicalizationMethod. MACs signature algorithms are syntactically identical MAC shared secret key. HMAC Identifier: http://www.w3.org/2000/09/xmldsig#hmac-sha1 http://www.w3.org/2001/04/xmldsig-more#hmac-sha224 http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 http://www.w3.org/2001/04/xmldsig-more#hmac-sha384 http://www.w3.org/2001/04/xmldsig-more#hmac-sha512 HMAC algorithm output length bits parameter; specification truncation length be multiple fall byte boundary) Base64 encoding full bytes. truncation parameter not specified then bits hash are output. signature truncation length less half output length underlying hash algorithm MUST be deemed invalid. example HMAC SignatureMethod element: Example <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1"> <HMACOutputLength>128</HMACOutputLength></SignatureMethod> output HMAC algorithm ultimately output truncated) chosen digest algorithm. value be base64 encoded same straightforward fashion output digest algorithms. Example: SignatureValue element HMAC-SHA1 digest Example 9294727A 3638BB1C 158BFC9D test vectors be Example <SignatureValue>kpRyejY4uxwT9I74FYv8nQ==</SignatureValue> Schema Definition: <simpleType name="HMACOutputLengthType"> <restriction base="integer" Signature Algorithms Signature algorithms take implicit parameters, keying material determined KeyInfo octet stream output CanonicalizationMethod. Signature MAC algorithms are syntactically identical signature public key cryptography. DSA Identifier: http://www.w3.org/2000/09/xmldsig#dsa-sha1 http://www.w3.org/2009/xmldsig11#dsa-sha256 DSA family algorithms defined FIPS FIPS DSA terms security parameters L N L = N = p prime modulus, prime divisor FIPS valid pairs N); are: pair algorithm DSAwithSHA1, identified specification URI http://www.w3.org/2000/09/xmldsig#dsa-sha1. pairs correspond algorithm DSAwithSHA256, identified specification URI http://www.w3.org/2009/xmldsig11#dsa-sha256. specification not use instance DSA DSAwithSHA224). DSA explicit parameters; example DSA SignatureMethod element Example <SignatureMethod Algorithm="http://www.w3.org/2009/xmldsig11#dsa-sha256"/> output DSA algorithm pair integers usually referred pair s). signature value base64 encoding concatenation octet-streams respectively result octet-encoding values r s order. Integer octet-stream conversion be done according I2OSP operation defined RFC specification l parameter equal example, SignatureValue element DSA signature s) values specified hexadecimal: Example r = 8BAC1AB6 B7181F95 B16AB97C 92B341C0s = 1F56DF24 58F426D1 55B4BA2D B6DCD8C8 example Appendix DSS standard be Example <SignatureValue>i6watmQQQ1y3GB+VsWq5fJKzQcBB4jRfH1bfJFj0JtFVtLotttzYyA==</SignatureValue> Security considerations regarding DSA key sizes FIPS DSA security parameter L defined be bits corresponding DSA value defined be bits respectively. NIST guidance use keys various strength various time frames special Publication SP Part Implementers consult publication guidance acceptable key lengths applications, however 2048-bit public keys are minimum recommended key length 3072-bit keys are recommended securing information SP800-57 Part states DSA 1024-bit key sizes not be used verify honor signatures created using older legacy systems. XML Signature implementations support DSA-based digital signatures, XML Signature revision verifiers verify DSA signatures DSA keys bits order validate existing signatures. XML Signature implementations MAY are NOT REQUIRED support DSA-based signature generation. Given short key size SP800-57 guidelines, DSA 1024-bit prime moduli NOT be used create signatures. DSA 1024-bit prime moduli MAY be used verify older legacy signatures, understanding associated risks. Important older signatures be re-signed stronger signatures. RSA v1.5) Identifier: http://www.w3.org/2000/09/xmldsig#rsa-sha1 http://www.w3.org/2001/04/xmldsig-more#rsa-sha224 http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 http://www.w3.org/2001/04/xmldsig-more#rsa-sha384 http://www.w3.org/2001/04/xmldsig-more#rsa-sha512 expression algorithm" used specification RSASSA-PKCS1-v1_5 algorithm described RFC RSA algorithm explicit parameters. example RSA SignatureMethod element Example <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/> SignatureValue content RSA signature base64 encoding octet string computed RFC section Signature generation RSASSA-PKCS1-v1_5 signature scheme]. Computation signature require concatenation hash value constant string determined RFC Signature computation verification not require implementation ASN.1 parser. resulting base64 string value child text node SignatureValue element, e.g. Example <SignatureValue> IWijxQjUrcXBYoCei4QxjWo9Kg8D3p9tlWoT4t0/gyTE96639In0FZFY2/rvP+/bMJ01EArmKZsR5VW3rwoPxw=</SignatureValue> Note line break been added preserve printed page width. Security considerations regarding RSA key sizes NIST guidance use keys various strength various time frames special Publication SP Part Implementers consult publication guidance acceptable key lengths applications, however 2048-bit public keys are minimum recommended key length 3072-bit keys are recommended securing information conforming implementations XML Signature MUST support RSA signature generation verification public keys least bits length. RSA public keys bits less NOT be used create new signatures MAY be used verify signatures created older legacy systems. XML Signature implementations MUST use least 2048-bit keys creating signatures, use least 3072-bit keys signatures be verified ECDSA Identifiers: http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384 http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512 ECDSA algorithm explicit parameters. example ECDSA SignatureMethod element Example <SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256" output ECDSA algorithm pair integers usually referred pair s). signature value base64 encoding concatenation octet-streams respectively result octet-encoding values r s order. Integer octet-stream conversion be done according I2OSP operation defined RFC specification l parameter equal size base point order curve bytes P-256 curve P-521 curve). specification implementations implement algorithm leads same results ECDSA P-256 prime curve specified Section D.2.3 FIPS using SHA-256 hash algorithm), referred ECDSAwithSHA256 signature algorithm further RECOMMENDED implementations also implement algorithms lead same results ECDSA P-384 P-521 prime curves; curves are defined Sections D.2.4 D.2.5 FIPS respectively Note: described IETF RFC Elliptic Curve DSA KT-I signature methods are mathematically functionally equivalent fields characteristic greater See IETF RFC Section Canonicalization Algorithms canonicalization performed octets, canonicalization algorithms take implicit parameters: content charset. charset derived according rules transport protocols media types media types XML). information necessary correctly sign verify documents often careful server side configuration. Various canonicalization algorithms require conversion algorithms understand least input encodings. RECOMMEND externally specified algorithms do same. Knowledge other encodings OPTIONAL. Various canonicalization algorithms transcode non-Unicode encoding Unicode. output algorithms be NFC XML processor used prepare XPath data model input required Data Model) use Normalization Form C converting XML document UCS character domain encoding not UCS-based. RECOMMEND externally specified canonicalization algorithms do same. there be ambiguities converting existing charsets Unicode, example see XML Japanese Profile Note specification implementation Canonical XML Canonical XML Exclusive XML Canonicalization RECOMMEND applications generate signatures choose Canonical XML inclusive canonicalization desired. Note: Canonical XML Canonical XML specify standard serialization XML applied subdocument, subdocument's ancestor context including namespace declarations attributes namespace. However, applications require method extent practical, unused ancestor context canonicalized subdocument. Exclusive XML Canonicalization Recommendation be used address requirements resulting scenarios subdocument moved contexts. Canonical XML Identifier REQUIRED Canonical XML comments): http://www.w3.org/TR/2001/REC-xml-c14n-20010315 Identifier Canonical XML Comments: http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments Input: octet-stream, node-set Output: octet-stream example XML canonicalization element Example <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/> normative specification Canonical XML1.0 algorithm capable taking input octet stream XPath node-set sufficiently functional alternative). algorithm octet stream output. Canonical XML easily parameterized additional URI) omit retain comments. Canonical XML Identifier REQUIRED Canonical XML comments): http://www.w3.org/2006/12/xml-c14n11 Identifier Canonical XML Comments: http://www.w3.org/2006/12/xml-c14n11#WithComments Input: octet-stream, node-set Output: octet-stream normative specification Canonical XML algorithm capable taking input octet stream XPath node-set sufficiently functional alternative). algorithm octet stream output. Canonical XML easily parameterized additional URI) omit retain comments. Exclusive XML Canonicalization Identifier REQUIRED Exclusive XML Canonicalization comments): http://www.w3.org/2001/10/xml-exc-c14n# Identifier Exclusive XML Canonicalization Comments: http://www.w3.org/2001/10/xml-exc-c14n#WithComments Input: octet-stream, node-set Output: octet-stream normative specification Exclusive XML Canonicalization Transform Algorithms Transform algorithm single implicit parameter: octet stream Reference output earlier Transform. implementation requirements, please see Algorithm Identifiers Implementation Requirements. Application developers are strongly encouraged support are listed RECOMMENDED application environment resource constraints make such support impractical. Compliance recommendation maximize application interoperability libraries be available enable support applications extensive development. Canonicalization canonicalization algorithm be used CanonicalizationMethod Canonicalization Algorithms be used Transform. Base64 Identifiers: http://www.w3.org/2000/09/xmldsig#base64 Input: octet-stream, node-set Output: octet-stream normative specification base64 decoding base64 Transform element content. input decoded algorithms. transform useful application needs sign raw data associated encoded content element. transform octet-stream node-set input. octet-string given input, then octet-stream processed directly. XPath node-set sufficiently functional alternative) given input, then converted octet stream performing operations logically equivalent applying XPath transform expression self::text(), then sorting nodeset document order, then concatenating string-value nodes long string. Thus, XML element identified shortname XPointer Reference URI, content solely base64 encoded character data, then transform automatically strips away start end tags identified element descendant elements well descendant comments processing instructions. output transform octet stream. XPath Filtering Identifier: http://www.w3.org/TR/1999/REC-xpath-19991116 Input: octet-stream, node-set Output: node-set normative specification XPath expression evaluation XPath expression be evaluated character content transform parameter child element named XPath. input required transform XPath node-set octet-stream. Note actual input XPath node-set resulting null URI shortname XPointer dereference, then comment nodes have been omitted. actual input octet stream, then application MUST convert octet stream XPath node-set suitable use Canonical XML Comments. subsequent application REQUIRED Canonical XML algorithm strip away comments.) other words, input node-set be equivalent be created following process: Initialize XPath evaluation context setting initial node equal input XML document's root node, set context position size Evaluate XPath expression evaluation expression document's nodes comments) node-set representing octet stream. transform output always XPath node-set. XPath expression appearing XPath parameter evaluated once node input node-set. result converted boolean. boolean true, then node included output node-set. boolean false, then node omitted output node-set. Note: Even input node-set had comments removed, comment nodes still exist underlying parse tree separate text nodes. example, markup <e>Hello, <!-- comment text nodes. Therefore, expression self::text()[string()="Hello, world!"] fail. problem arise application, be solved canonicalizing document XPath transform physically remove comments matching node based parent element's string value using expression self::text()[string(parent::e)="Hello, world!"]). primary purpose transform ensure only specifically defined changes input XML document are permitted signature affixed. done omitting precisely nodes are allowed change once signature affixed, including other input nodes output. responsibility XPath expression author include nodes change affect interpretation transform output application context. Note XML-Signature XPath Filter Recommendation be used purpose. recommendation XPath transform permits easy specification subtree selection omission be efficiently implemented. important scenario be document requiring enveloped signatures. signature omit own digest calculations, also necessary exclude second signature element digest calculations first signature so adding second signature not break first signature. XPath transform following evaluation context node input node-set: context node equal node input node-set. context position, initialized context size, initialized library functions equal function set defined augmented function named here be treated part library not namespace prefixed). set variable bindings. means initializing defined. Thus, set variable bindings used evaluating XPath expression empty, use variable reference XPath expression results error. set namespace declarations scope XPath expression. result context node setting, XPath expressions appearing transform be quite similar used used size position are always reflect fact transform automatically visiting node XSLT, recursively calls command apply-templates visit nodes input tree). function here() defined Function: node-set here() here function returns node-set containing attribute processing instruction node parent element text node directly bears XPath expression. expression results error containing XPath expression not appear same XML document XPath expression being evaluated. example, consider creating enveloped signature Signature element descendant element being signed). signed content not be changed signing, elements Signature element are changing digest value be put DigestValue SignatureValue be subsequently calculated). way prevent changes invalidating digest value DigestValue add XPath Transform Signature elements descendants. example, Example <Document> <Signature xmlns="http://www.w3.org/2000/09/xmldsig#"> <SignedInfo> <Reference URI=""> <Transforms> <Transform Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116"> <XPath xmlns:dsig="&dsig;"> not(ancestor-or-self::dsig:Signature) </XPath> </Transform> </Transforms> <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/> <DigestValue></DigestValue> </Reference> </SignedInfo> <SignatureValue></SignatureValue> </Signature> Due null Reference URI example, XPath transform input node-set nodes entire parse tree starting root node comment nodes). node node-set, node included output node-set node ancestors tag Signature namespace given replacement text entity more elegant solution uses here function omit only Signature containing XPath Transform, thus allowing enveloped signatures sign other signatures. example above, use XPath element: Example <XPath xmlns:dsig="&dsig;">count(ancestor-or-self::dsig:Signature >count(ancestor-or-self::dsig:Signature)</XPath> XPath equality operator converts node sets string values comparison, instead use XPath union operator node document, predicate expression true only node-set containing node Signature element ancestors not include enveloped Signature element containing XPath expression union not produce larger set enveloped Signature element node-set given ancestor-or-self::Signature). Enveloped Signature Transform Identifier: http://www.w3.org/2000/09/xmldsig#enveloped-signature Input: node-set Output: node-set enveloped signature transform T whole Signature element containing T digest calculation Reference element containing T. entire string characters used XML processor match Signature XML production element removed. output transform equivalent output result replacing T XPath transform containing following XPath parameter element: Example <XPath xmlns:dsig="&dsig;">count(ancestor-or-self::dsig:Signature >count(ancestor-or-self::dsig:Signature)</XPath> input output requirements transform are identical XPath transform, only be applied node-set parent XML document. Note not necessary use XPath expression evaluator create transform. However, transform MUST produce output exactly same manner XPath transform parameterized XPath expression XSLT Transform Identifier: http://www.w3.org/TR/1999/REC-xslt-19991116 Input: octet-stream Output: octet-stream normative specification XSL Transformations Specification namespace-qualified stylesheet element, MUST be sole child Transform element, specified style sheet be used. instantiates in-line processing local XSLT declarations resource determined XSLT processing model; ordered application multiple stylesheet require multiple special provision made identification remote stylesheet given URI be communicated xsl:include xsl:import stylesheet child Transform. transform octet stream input. output transform octet stream. processing rules XSL style sheet transform element are stated XSLT specification RECOMMEND XSLT transform authors use output method xml XML HTML. XSLT implementations do not produce consistent serializations output, further RECOMMEND inserting transform XSLT transform canonicalize output. steps help ensure interoperability resulting signatures applications support XSLT transform. Note output actually HTML, then result steps logically equivalent XML Canonicalization Syntax Constraint Considerations Digital signatures only work verification calculations are performed exactly same bits signing calculations. surface representation signed data change signing verification, then way standardize changeable aspect be used signing verification. example, even simple ASCII text there are least widely used line ending sequences. possible signed text be modified line ending convention time signing signature verification, then line endings need be canonicalized standard form signing verification signatures break. XML subject surface representation changes processing discards surface information. reason, XML digital signatures have provision indicating canonicalization methods signature so verifier use same canonicalization signer. specification distinguish canonicalization Signature element other signed XML data objects. possible isolated XML document be treated were binary data so changes occur. case, digest document not change need not be canonicalized signed verified such. However, XML read processed using standard XML parsing processing techniques frequently changed such surface representation information lost modified. particular, occur many cases Signature enclosed SignedInfo elements possibly encompassing XML document, be processed XML. Similarly, considerations apply Manifest, Object, SignatureProperties elements elements have been digested, DigestValue be checked, are being processed XML. kinds changes XML need be canonicalized be divided categories. are related basic described are related similar processing described Third, there possibility coded character set conversion, such UTF-8 UTF-16, compliant processors are required support, described paragraph immediately fourth, there are changes related namespace declaration XML namespace attribute context described canonicalization algorithm yield output specific fixed coded character set. canonicalization algorithms identified document use UTF-8 byte order mark do not provide character normalization. RECOMMEND signature applications create XML content elements descendants/content) Normalization Form C check XML being consumed form well; not, signatures consequently fail validate). Additionally, none algorithms provide data type normalization. Applications normalize data types varying formats false) not be able validate other's signatures. XML Syntax Constraints, Canonicalization XML interface conformant application reading XML given certain information XML not other information. particular, line endings are normalized single character #xA dropping #xD characters are immediately followed #xA replacing #xA other cases, missing attributes declared have default values are provided application present default value, character references are replaced corresponding character, entity references are replaced corresponding declared entity, attribute values are normalized replacing character entity references above, replacing occurrences #x9, #xA, #xD #x20 sequence #xD#xA replaced single space, attribute not declared be CDATA, stripping leading trailing spaces replacing interior runs spaces single space. Note items depend presence schema, DTD similar declarations. Signature element type laxly schema valid consequently external XML even XML same document signature be well-formed namespace permitted signature schema); noted items not be present. Thus, signature such content only be verifiable other signature applications following syntax constraints are observed generating signed material including SignedInfo element: attributes having default values be explicitly present, entity references other character entities not representable encoding chosen) be expanded, attribute value white space be normalized DOM/SAX Processing Canonicalization addition canonicalization syntax constraints discussed above, many XML applications use Document Object Model Simple API XML DOM maps XML tree structure nodes typically be used entire document subsequent processing being done tree. SAX converts XML series events such start tag, content, etc. case, many surface characteristics such ordering attributes insignificant white space start/end tags lost. addition, namespace declarations are mapped nodes apply, losing namespace prefixes source text most cases, losing namespace declarations appeared original instance. XML Signature be produced verified system using DOM SAX processing, canonical method needed serialize relevant part DOM tree sequence SAX events. XML canonicalization specifications, such are based only information preserved DOM SAX. XML Signature be verifiable implementation using DOM SAX, not only XML syntax constraints given section XML Syntax Constraints, Canonicalization be followed appropriate XML canonicalization MUST be specified so verifier re-serialize DOM/SAX mediated input same octet stream was signed. Namespace Context Portable Signatures consequently Canonical XML data model element namespace nodes correspond declarations element ancestors: element E namespace nodes represent namespace declarations well namespace declarations made ancestors have not been overridden E's declarations, default namespace non-empty, declaration prefix xml." serializing Signature element signed XML data child other elements using data models, Signature element children have in-scope namespaces inherited ancestral context. addition, Canonical XML Canonical XML Comments algorithms define special treatment attributes XML namespace, cause be part canonicalized XML even were document subset. Simple inheritable attributes attributes have value most simple redeclaration such xml:lang xml:space) are inherited nearest ancestor are declared apex node canonicalized XML are already declared node. frustrate intent signer create signature context remains valid example, given signature child B grandchild Example <A xmlns:n1="http://foo.example"> <B xmlns:n2="http://bar.example"> <Signature xmlns="http://www.w3.org/2000/09/xmldsig#"> <Reference URI="#signme"/> </Signature> <C ID="signme" xmlns="http://baz.example" </B></A> element B signed element C moved envelope transport: Example <SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"> <SOAP:Body> <B xmlns:n2="http://bar.example"> <Signature xmlns="http://www.w3.org/2000/09/xmldsig#"> </Signature> <C ID="signme" xmlns="http://baz.example" </B> </SOAP:Body></SOAP:Envelope> canonical form signature context contain new namespace declarations SOAP:Envelope context, invalidating signature. Also, canonical form lack namespace declarations have originally had element context, also invalidating signature. avoid problems, application Rely enveloping application properly divorce body signature payload) context envelope) signature validated. Use canonicalization method instead ancestor context. purposefully such context. Security Considerations XML Signature specification very flexible digital signature mechanism. Implementers give consideration application threat models following factors. additional security considerations implementation deployment specification, see requirement specification permit signatures part totality XML document." section mechanism requirement permitting sign data derived processing content identified resource. instance, applications wish sign form, permit users enter limited field data invalidating previous signature form use exclude portions user needs change. be arbitrarily specified include encoding canonicalization instructions even XSLT transformations. are raised respect feature following sections. Note, core validation behavior not confirm signed data was obtained applying step indicated check digest resulting content matches specified signature.) example, applications be satisfied verifying XML signature cached copy already transformed data. Other applications require content be freshly dereferenced transformed. Only Signed Secure First, obviously, signatures transformed document do not secure information discarded only signed secure. Note use Canonical XML internal entities XML namespaces are expanded content being signed. entities are replaced definitions canonical form explicitly namespace element otherwise inherit. Applications do not canonicalize XML content SignedInfo element) NOT use internal entities represent namespace explicitly content being signed not rely canonicalization do Also, users concerned integrity element type definitions associated XML instance being signed wish sign definitions well schema, DTD, natural language description associated namespace/identifier). Second, envelope containing signed information not secured signature. instance, encrypted envelope signature, signature not protect authenticity integrity unsigned envelope headers ciphertext form, only plaintext actually signed. Only be Signed Additionally, signature information introduced transform: only represented user visual, auditory other media) be signed. signing intended convey judgment consent user automated mechanism person), then normally necessary secure exactly practical information was presented user. Note be accomplished literally signing was presented, such screen images shown user. However, result data difficult subsequent software manipulate. Instead, sign data filters, style sheets, client profile other information presentation. Signed Just user only sign persons automated mechanism trust validity transformed document basis valid signature operate data was transformed canonicalization) signed, not original pre-transformed data. recommendation specified signature well included part document instance, XML document embedded style sheet transformed document be represented user signed. meet recommendation document references external style sheet, content external resource also be signed signature Reference otherwise content external content change resulting document invalidating signature. applications operate original intermediary data be extremely careful potential weaknesses introduced original transformed data. trust decision character meaning application needs make caution. Consider canonicalization algorithm character case upper) character composition accent' adversary introduce changes are normalized consequently inconsequential signature validity material DOM processor. instance, changing case character influence result XPath selection. serious risk introduced change normalized signature validation processor original data returns different result intended. result: documents operated generated signature applications MUST be intermediate processors unintentionally break signature) Encoding normalizations NOT be done part signature transform, state way) normalization occur, application always normalized form. Check Security Model specification uses public key signatures keyed hash authentication codes. have substantially different security models. Furthermore, permits user specified algorithms have other models. public key signatures, number parties hold public key verify signatures only parties private key create signatures. number holders private key be minimized preferably be Confidence verifiers public key are using binding entity capabilities represented corresponding private key important issue, usually addressed certificate online authority systems. Keyed hash authentication codes, based secret keys, are typically much more efficient terms computational effort required have characteristic verifiers need have possession same key signer. Thus verifier forge signatures. specification permits user provided signature algorithms keying information designators. Such user provided algorithms have different security models. example, methods involving biometrics usually depend physical characteristic authorized user not be changed way public secret keys be have other security model differences. Algorithms, Key Lengths, Certificates, Etc. strength particular signature links security chain. signature digest algorithms used, strength key generation size key, security key certificate authentication distribution mechanisms, certificate chain validation policy, protection cryptographic processing hostile observation tampering, etc. Care be exercised applications executing various algorithms be specified XML signature processing content" be provided such algorithms parameters, such XSLT algorithms specified document usually be implemented trusted library even there perverse parameters cause unacceptable processing memory demand. Even more care be warranted application defined algorithms. security overall system also depend security integrity operating procedures, personnel, administrative enforcement procedures. factors listed section are important overall security system; however, most are scope specification. Error Messages Implementations NOT provide detailed error responses related security algorithm processing. Error messages be limited generic error message avoid providing information potential attacker related specifics algorithm implementation. example, error signature verification processing error response be generic message providing specifics details processing error. Schema XSD Schema XML Signature Core Schema Instance xmldsig-core-schema.xsd Valid XML schema instance based XML Signature Schema Instance xmldsig11-schema.xsd schema document additional elements defined version XML Signature specification. XML Signature Schema Driver xmldsig1-schema.xsd schema instance together XML Signature Core Schema Instance XML Signature Schema Instance RNG Schema section non-normative. Non-normative RELAX NG schema information available separate document Definitions Authentication Code Checksum) value generated application shared key message cryptographic algorithm such properties message authentication integrity) not signer authentication. Equivalent protected checksum, checksum computed data object means protect active attacks attempt change checksum make match changes made data object." Authentication, Message property, given authentication code/protected checksum, tampering data checksum, so introduce changes seemingly preserving integrity, are still detected. signature identify signed, making impracticable falsify alter signed matter signature detection." Authentication, Signer property identity signer claimed. signature indicate signed document, message record, be difficult person produce authorization." Note, signer authentication application decision signing key actually correspond specific identity) supported scope, specification. Checksum value computed function dependent contents data object stored transmitted together object, purpose detecting changes data." Core syntax processing defined specification, including core validation. use term distinguish other markup, processing, applications semantics own. Data Object actual binary/octet data being operated digested, signed) application frequently HTTP entity Note proper noun Object specific XML element. Occasionally refer data object document resource's content. term element content used describe data XML start end tags term XML document used describe data objects conform XML specification Integrity property data not been changed, destroyed, lost unauthorized accidental manner." simple checksum provide integrity incidental changes data; message authentication similar also active attack alter data change checksum introduced so match change data. Object XML Signature element arbitrary data be placed. Object element merely type digital data document) be signed Reference. Resource resource be anything identity. Familiar examples include electronic document, image, service weather report Los Angeles'), collection other resources.... resource conceptual mapping entity set entities, not necessarily entity mapping particular instance time. Thus, resource remain constant even content---the entities currently time, provided conceptual mapping not changed process." order avoid collision term entity URI XML specifications, use term data object, content document refer actual bits/octets being operated Signature Formally speaking, value generated application private key message cryptographic algorithm such properties integrity, message authentication signer authentication. sometimes use term signature generically such Authentication Code values well, are careful make distinction property signer authentication relevant exposition.) signature be described detached, enveloping, enveloped. Signature, Application application MANDATORY portions specification; conformance requirements are application behavior, structure Signature element type children SignatureValue) specified algorithms. Signature, Detached signature content external Signature element, be identified URI transform. Consequently, signature content signs. definition typically separate data objects, also instance Signature data object reside same XML document are sibling elements. Signature, Enveloping signature content found Object element signature Object content) identified Reference URI fragment identifier transform). Signature, Enveloped signature XML content signature element. content root XML document element. Obviously, enveloped signatures take care not include own value calculation SignatureValue. Transform processing data source derived form. Typical include XML Canonicalization, XPath, XSLT. Validation, Core core processing requirements specification requiring signature validation SignedInfo reference validation. Validation, Reference hash value identified transformed content, specified Reference, matches specified DigestValue. Validation, Signature SignatureValue matches result processing SignedInfo CanonicalizationMethod SignatureMethod specified Core Validation Validation, Trust/Application application semantics associated signature are valid. example, application validate time stamps integrity signer key behavior external core specification. A. References Dated references are latest known appropriate edition referenced work. referenced works be subject revision, conformant implementations follow, are encouraged investigate appropriateness following, more recent editions replacements works cited. case implementation-defined editions are supported. A.1 Normative references D. McGrew; K. Igoe; M. Salter. RFC Fundamental Elliptic Curve Cryptography Algorithms. February IETF Informational RFC. URL: http://www.rfc-editor.org/rfc/rfc6090.txt FIPS PUB Secure Hash Standard. U.S. Department Commerce/National Institute Standards Technology. URL: http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf FIPS PUB Digital Signature Standard June U.S. Department Commerce/National Institute Standards Technology. URL: http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf H. Krawczyk, M. Bellare, R. Canetti. HMAC: Keyed-Hashing Message Authentication. February IETF RFC URL: http://www.ietf.org/rfc/rfc2104.txt R. Fielding et al. Hypertext Transfer Protocol HTTP/1.1. June RFC URL: http://www.ietf.org/rfc/rfc2616.txt K. Zeilenga. Lightweight Directory Access Protocol String Representation Distinguished Names. June IETF RFC URL: http://www.ietf.org/rfc/rfc4514.txt M. Davis, Ken Whistler. TR15, Unicode Normalization Forms.. September URL: http://www.unicode.org/reports/tr15/ J. Callas, L. Donnerhacke, H. Finney, D. Shaw, R. Thayer. OpenPGP Message Format. IETF RFC November URL: http://www.ietf.org/rfc/rfc4880.txt J. Jonsson B. Kaliski. Public-Key Cryptography Standards RSA Cryptography Specifications Version RFC February URL: http://www.ietf.org/rfc/rfc3447.txt N. Freed N. Borenstein. Multipurpose Internet Mail Extensions Part Format Internet Message Bodies. November URL: http://www.ietf.org/rfc/rfc2045.txt S. Bradner. Key words use RFCs Indicate Requirement Levels. March Internet RFC URL: http://www.ietf.org/rfc/rfc2119.txt W. Polk, R. Housley, L. Bassham. Algorithmupdates Identifiers Internet X.509 Public Key Infrastructure Certificate Certificate Revocation List Profile. April Internet RFC URL: http://www.ietf.org/rfc/rfc3279.txt L. Daigle, D. van Gulik, R. Iannella, P. Faltstrom. URN Namespace Definition Mechanisms.. IETF RFC October URL: http://www.ietf.org/rfc/rfc3406.txt J. Schaad, B. Kaliski, R. Housley. Additional Algorithms Identifiers RSA Cryptography use Internet X.509 Public Key Infrastructure Certificate Certificate Revocation List Profile. June IETF RFC URL: http://www.ietf.org/rfc/rfc4055.txt D. Cooper, et. al. Internet X.509 Public Key Infrastructure Certificate Certificate Revocation List Profile. IETF RFC May URL: http://www.ietf.org/rfc/rfc5280.txt S. Turner, et. al. Elliptic Curve Cryptography Subject Public Key Information.. IETF RFC March URL: http://www.ietf.org/rfc/rfc5480.txt D. Eastlake 3rd. Additional XML Security Uniform Resource Identifiers. RFC April URL: http://tools.ietf.org/html/rfc6931 Recommendation Key Management – Part General SP800-57. July U.S. Department Commerce/National Institute Standards Technology. URL: http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf T. Berners-Lee; R. Fielding; L. Masinter. Uniform Resource Identifiers generic syntax. January RFC URL: http://www.ietf.org/rfc/rfc3986.txt R. Moats. URN Syntax. IETF RFC May URL: http://www.ietf.org/rfc/rfc2141.txt M. Mealling. URN Namespace Object Identifiers. IETF RFC February URL: http://www.ietf.org/rfc/rfc3061.txt F. Yergeau. UTF-8, transformation format ISO IETF RFC November URL: http://www.ietf.org/rfc/rfc3629.txt ITU-T Recommendation X.509 version Technology Open Systems Interconnection Directory Authentication Framework" ISO/IEC John Boyer. Canonical XML Version March W3C Recommendation. URL: http://www.w3.org/TR/2001/REC-xml-c14n-20010315 John Boyer; Glenn Marcy. Canonical XML Version May W3C Recommendation. URL: http://www.w3.org/TR/2008/REC-xml-c14n11-20080502/ Donald E. Eastlake 3rd; Joseph Reagle; John Boyer. Exclusive XML Canonicalization Version July W3C Recommendation. URL: http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/ Ümit Yalçınalp; Anish Karmarkar. Describing Media Content Binary Data XML. May W3C Note. URL: http://www.w3.org/TR/2005/NOTE-xml-media-types-20050504/ Richard Tobin et al. Namespaces XML Edition). December W3C Recommendation. URL: http://www.w3.org/TR/2009/REC-xml-names-20091208/ C. M. Sperberg-McQueen et al. Extensible Markup Language Edition). November W3C Recommendation. URL: http://www.w3.org/TR/2008/REC-xml-20081126/ Merlin Hughes; John Boyer; Joseph Reagle. XML-Signature XPath Filter November W3C Recommendation. URL: http://www.w3.org/TR/2002/REC-xmldsig-filter2-20021108/ J. Reagle; D. Eastlake; F. Hirsch; T. Roessler. XML Encryption Syntax Processing Version April W3C Recommendation. URL: http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/ Henry S. Thompson et al. XML Schema Part Structures Second Edition. October W3C Recommendation. URL: http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/ Paul V. Biron; Ashok Malhotra. XML Schema Part Datatypes Second Edition. October W3C Recommendation. URL: http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/ James Clark; Steven DeRose. XML Path Language Version November W3C Recommendation. URL: http://www.w3.org/TR/1999/REC-xpath-19991116/ Norman Walsh et al. XPointer element() Scheme. March W3C Recommendation. URL: http://www.w3.org/TR/2003/REC-xptr-element-20030325/ Paul Grosso et al. XPointer Framework. March W3C Recommendation. URL: http://www.w3.org/TR/2003/REC-xptr-framework-20030325/ Jeremy Richman et al. Extensible Stylesheet Language Version October W3C Recommendation. URL: http://www.w3.org/TR/2001/REC-xsl-20011015/ James Clark. XSL Transformations Version November W3C Recommendation. URL: http://www.w3.org/TR/1999/REC-xslt-19991116 A.2 Informative references Digital Signature Guidelines. August Information Security Committee, American Bar Association. URL: http://www.signelec.com/content/download/digital_signature_guidelines.pdf Common Vulnerabilities Exposures List, CVE-2009-0217 URL: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0217 Vidur Apparao et al. Document Object Model Level October W3C Recommendation. URL: http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/ IEEE Standard Specifications Public Key Cryptography. August URL: http://grouper.ieee.org/groups/1363/ D. Eastlake, S. Crocker, J. Schiller. Randomness Recommendations Security.. IETF RFC June URL: http://www.ietf.org/rfc/rfc4086.txt Frank Manola; Eric Miller. RDF Primer. February W3C Recommendation. URL: http://www.w3.org/TR/2004/REC-rdf-primer-20040210/ Information technology Document Schema Definition Language Part Regular-grammar-based validation RELAX NG. ISO/IEC URL: http://standards.iso.org/ittf/PubliclyAvailableStandards/c052348_ISO_IEC_19757-2_2008(E).zip S. Blake-Wilson; G. Karlinger; T. Kobayashi; Y. Wang. Using Elliptic Curve Signature Algorithm XML Digital Signatures April RFC. URL: http://www.ietf.org/rfc/rfc4050.txt R. Shirey. Internet Security Glossary, Version IETF RFC August URL: http://www.ietf.org/rfc/rfc4949.txt D. Megginson, et al. SAX: Simple API XML. May URL: http://www.megginson.com/downloads/SAX/ McDonald, C., Hawkes, P., J. Pieprzyk. SHA-1 collisions now EuroCrypt Rump session. URL: http://eurocrypt2009rump.cr.yp.to/837a0a8086fa6ca714249409ddfae43d.pdf X. Wang, Y.L. Yin, H. Yu. Finding Collisions Full SHA-1. Shoup, V., editor, Advances Cryptology CRYPTO 25th Annual International Cryptology Conference, Santa Barbara, California, USA, August Proceedings, volume LNCS, pages 17–36. Springer, URL: http://people.csail.mit.edu/yiqun/SHA1AttackProceedingVersion.pdf published http://www.springerlink.com/content/26vljj3xhc28ux5m/) Noah Mendelsohn et al. SOAP Version Part Messaging Framework Edition). April W3C Recommendation. URL: http://www.w3.org/TR/2007/REC-soap12-part1-20070427/ P. Hoffman F. Yergeau. UTF-16, encoding ISO IETF RFC February URL: http://www.ietf.org/rfc/rfc2781.txt Steven Pemberton. XHTML™ Extensible HyperText Markup Language Edition). August W3C Recommendation. URL: http://www.w3.org/TR/2002/REC-xhtml1-20020801/ M. Murata. XML Japanese Profile Edition). March W3C Member Submission. URL: http://www.w3.org/Submission/2005/SUBM-japanese-xml-20050324/ Pratik Datta; Frederick Hirsch. XML Signature Best Practices. April W3C Working Group Note. URL: http://www.w3.org/TR/2013/NOTE-xmldsig-bestpractices-20130411/ Joseph Reagle et al. XML Signature Syntax Processing Edition). June W3C Recommendation. URL: http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/ Frederick Hirsch. Functional Explanation Changes XML Signature April W3C Working Group Note. URL: http://www.w3.org/TR/2013/NOTE-xmldsig-core1-explain-20130411/ Joseph Reagle Jr. XML-Signature Requirements. October W3C Working Draft. URL: http://www.w3.org/TR/1999/WD-xmldsig-requirements-19991014 Makoto Murata; Frederick Hirsch. XML Security RELAX NG Schemas. April W3C Working Group Note. URL: http://www.w3.org/TR/2013/NOTE-xmlsec-rngschema-20130411/ Frederick Hirsch; Thomas Roessler. XML Security Requirements Design Considerations. April W3C Working Group Note. URL: http://www.w3.org/TR/2013/NOTE-xmlsec-reqs-20130411/ Jonathan Marsh et al. XPointer xmlns() Scheme. March W3C Recommendation. URL: http://www.w3.org/TR/2003/REC-xptr-xmlns-20030325/ Ron Daniel Jr; Eve Maler; Steven DeRose. XPointer xpointer() Scheme. December W3C Working Draft. URL: http://www.w3.org/TR/2002/WD-xptr-xpointer-20021219/ Ron Daniel Jr; Eve Maler; Steven DeRose. XPointer xpointer() Scheme. September W3C Candidate Recommendation. URL: http://www.w3.org/TR/2001/CR-xptr-20010911/ 