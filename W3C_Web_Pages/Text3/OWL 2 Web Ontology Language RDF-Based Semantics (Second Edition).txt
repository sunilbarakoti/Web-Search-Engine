OWL Web Ontology Language RDF-Based Semantics Edition) OWL Web Ontology Language RDF-Based Semantics Edition) W3C Recommendation December version: http://www.w3.org/TR/2012/REC-owl2-rdf-based-semantics-20121211/ Latest version http://www.w3.org/TR/owl2-rdf-based-semantics/ Latest Recommendation: http://www.w3.org/TR/owl-rdf-based-semantics Previous version: http://www.w3.org/TR/2012/PER-owl2-rdf-based-semantics-20121018/ Editors: Michael Schneider, FZI Research Center Information Technology Contributors: alphabetical order) Jeremy Carroll, HP TopQuadrant) Ivan Herman, W3C/ERCIM Peter F. Patel-Schneider, Nuance Communications refer errata document, include normative corrections. color-coded version document showing changes made previous version also available. document also available non-normative formats: PDF version. See also translations. Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract OWL Web Ontology Language, informally OWL ontology language Semantic Web formally defined meaning. OWL ontologies provide classes, properties, individuals, data values are stored Semantic Web documents. OWL ontologies be used information written RDF, OWL ontologies are primarily exchanged RDF documents. OWL Document Overview overall state OWL be read other OWL documents. document RDF-compatible model-theoretic semantics OWL Status Document May Be Superseded section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. Summary Changes have been substantive changes previous version. details minor changes see change log color-coded diff. Send Comments send comments public-owl-comments@w3.org archive). work document OWL Working Group complete, comments be addressed errata future revisions. Open discussion developers welcome public-owl-dev@w3.org archive). Endorsed W3C document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director W3C Recommendation. stable document be used reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. Patents document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. Table Contents Introduction Ontologies Syntax Content Ontologies Vocabulary Standard Prefixes Vocabulary Terms Datatype Names Facet Names Interpretations Datatype Maps Vocabulary Interpretations Satisfaction, Consistency Entailment Parts Universe Class Extensions Semantic Conditions Semantic Conditions Parts Universe Semantic Conditions Vocabulary Classes Semantic Conditions Vocabulary Properties Semantic Conditions Boolean Connectives Semantic Conditions Enumerations Semantic Conditions Property Restrictions Semantic Conditions Datatype Restrictions Semantic Conditions RDFS Vocabulary Semantic Conditions Equivalence Disjointness Semantic Conditions N-ary Disjointness Semantic Conditions Sub Property Chains Semantic Conditions Inverse Properties Semantic Conditions Property Characteristics Semantic Conditions Keys Semantic Conditions Negative Property Assertions Appendix: Axiomatic Triples Axiomatic Triples RDF Axiomatic Triples Vocabulary Classes Axiomatic Triples Vocabulary Properties Set Axiomatic Triples Appendix: Relationship Direct Semantics Example Semantic Differences Correspondence Theorem Proof Correspondence Theorem Appendix: Comprehension Conditions Comprehension Conditions Sequences Comprehension Conditions Boolean Connectives Comprehension Conditions Enumerations Comprehension Conditions Property Restrictions Comprehension Conditions Datatype Restrictions Comprehension Conditions Inverse Properties Appendix: Changes OWL Appendix: Change Log Changes Recommendation Changes Proposed Recommendation Changes Candidate Recommendation Changes Last Call Acknowledgments References Normative References Nonnormative References Introduction document RDF-compatible model-theoretic semantics OWL referred RDF-Based Semantics".The OWL RDF-Based Semantics formal meaningto RDF graph[RDF Concepts]and fully compatible RDF Semantics specification[RDF Semantics].The specification provided hereis successor original OWL RDF-Compatible Semantics specification[OWL RDF-Compatible Semantics]. Technically,the OWL RDF-Based Semantics defined semantic extension datatype support),as specified RDF Semantics[RDF Semantics].In other words,the meaning given RDF graph OWL RDF-Based Semanticsincludes meaning provided semantics RDFS datatypes,and additional meaning specified language constructs OWL Boolean connectives, sub property chains qualified cardinality restrictions(see OWL Structural Specification Specification]for further informationon language constructs OWL definition semantics extra constructsfollows design principles applied RDF Semantics. content document not meant be self-containedbut builds top RDF Semantics document Semantics]by adding aspects are specific OWL complete definition OWL RDF-Based Semantics given combination boththe RDF Semantics document document hand.In particular,the terminology used RDF Semanticsis reused hereexcept cases conflict rest OWL specification. remainder sectionprovides overviewof distinguishing features OWL RDF-Based Semanticsand document's structure content. Section syntaxover OWL RDF-Based Semantics definedis set RDF graphs Concepts].The OWL RDF-Based Semanticsprovides precise formal meaningfor RDF graph.The languagethat determinedby RDF graphsbeing interpreted using OWL RDF-Based Semanticsis called Full".In document,RDF graphs are also called"OWL Full ontologies",or simply there risk confusion. OWL RDF-Based Semanticsinterprets RDFS vocabularies[RDF Semantics]and OWL RDF-Based vocabularytogether extended set datatypesand constraining facets Section OWL RDF-Based interpretations are defined universe(see Section RDF Semantics specification[RDF Semantics]for overview ofthe basic intuition model-theoretic semantics).The universe divided parts,namely individuals, classes, properties,which are identified RDF counterparts(see Figure part individuals whole universe.This means classes properties are alsoindividuals own right.Further, name interpreted OWL RDF-Based interpretationdenotes individual. basic parts are divided further parts follows.The part individuals part data values,which denotations literals.Also subsumed individuals part ontologies.The part classes part datatypes,which are classes consisting entirely data values.Finally, part properties parts ofobject properties, data properties,ontology properties annotation properties.The part object properties whole part properties,and therefore other kinds properties are also object properties. annotations properties note annotations are not OWL RDF-Based Semantics.Just other triple set triples occurring RDF graph,an annotation assigned truth value given OWL RDF-Based interpretation.Hence,although annotations are meant be weak",i.e., formal meaning not significantly exceed originating RDF Semantics specification,adding annotation still change meaning ontology.A similar discussion statements are built ontology properties,such owl:imports,which are used define relationships ontologies. class specific set individuals,called class extension class:an individual instance class C,if member class extension ICEXT(C).Since class individual OWL RDF-Based Semantics,classes are distinguished respective class extensions.This distinction example, class be instance being member own class extension.Also,two classes be equivalent sharing same class extension, being different individuals, e.g., do not need share same properties.Similarly,every property associated property extensionthat pairs individuals:an individual a1 relationship individual a2 respect property pif pair a1 a2 member property extension IEXT(p). Again, properties are distinguished property extensions.In general, there are further constraints,an arbitrary extension be associated witha given class property,and interpretations associate distinct extensionswith same class property. Individuals play different example,an individual be data property annotation property,since different parts universeof OWL RDF-Based interpretation are not required be mutually disjoint,or individual beboth class propertyby associatingboth class extension property extensionwith it.In latter casethere be specific relationshipbetween class extension property extensionof such individualwithout further constraints.For example,the same individual have empty class extensionwhile having nonempty property extension. main part OWL RDF-Based Semantics Section formal meaning OWL language constructs means RDF-Based semantic conditions.These semantic conditions extend semantic conditions given RDF Semantics Semantics].The OWL RDF-Based semantic conditions effectively determinewhich sets RDF triples are assigned specific meaningand meaning is.For example,semantic conditions existthat allow interpret triple owl:disjointWith D"to mean denotations IRIs C D have disjoint class extensions. usually need provide localizing information means triples")for IRIs occurring ontology.As RDF Semantics,the OWL RDF-Based semantic conditions have been designed ensure denotation IRIwill be appropriate part universe.For example,the RDF triple"C owl:disjointWith D"is sufficient deduce denotations IRIs C Dare actually classes.It not necessary explicitly add additional typing triples"C rdf:type rdfs:Class"and"D rdf:type rdfs:Class"to ontology. RDF Semantics,this kind localization" was extent achieved so called triples" Semantics],such rdf:type rdf:Property"or"rdf:type rdfs:domain rdfs:Resource".However, there explicit normative collection additional axiomatic triples OWL RDF-Based Semantics;instead, specific axiomatic aspects OWL RDF-Based Semantics are determined subset OWL RDF-Based semantic conditions.Section axiomatic triples generaland example set axiomatic triplesthat compatible OWL RDF-Based Semantics. Section comparesthe OWL RDF-Based Semanticswith OWL Direct Semantics[OWL Direct Semantics].While OWL RDF-Based Semantics based RDF Semantics specification[RDF Semantics],the OWL Direct Semanticsis description logic style semantics.Several fundamental differencesexist semantics,but there also strong relationship basically stating OWL RDF-Based Semantics able reflect logical conclusions OWL Direct Semantics.This means OWL Direct Semanticscanin sensebe regarded semantics subset OWL RDF-Based Semantics.The precise relationship given OWL correspondence theorem. Significant effort been spentin keeping design OWL RDF-Based Semantics close possible original specification OWL RDF-Compatible Semantics[OWL RDF-Compatible Semantics].While aim was achieved large degree, OWL RDF-Based Semantics actually predecessor several aspects.In most cases, serious technical problems have arisen conservative semantic extension.One important change thatwhile so called conditions"for OWL RDF-Based Semantics(see Section exist,these are not part normative set semantic conditions anymore.The OWL RDF-Based Semantics also several errors OWL list differences languages given Section italicized keywords MUST, MUST NOT, NOT, MAY are used specify normative features OWL documents tools, are interpreted specified RFC Figure Parts Hierarchy OWL RDF-Based Semantics node labeled class IRI part universeof OWL RDF-based interpretation.Arrows point parts super parts. Ontologies section syntax OWL RDF-Based Semantics,and overview typical content ontologiesfor ontology management tasks. Syntax Following Sections RDF Semantics specification[RDF Semantics],the OWL RDF-Based Semantics defined RDF graph(Section RDF Concepts Concepts]),i.e. set RDF triples(Section RDF Concepts Concepts]). accordance rest OWL specification(see Section OWL Structural Specification Specification]),this documentuses extended notion RDF graphby allowing RDF triples RDF graphto contain arbitrary IRIs("Internationalized Resource Identifiers")according RFC contrast,the RDF Semantics specification Semantics]is defined RDF graphs containing URIs[RFC change backward compatiblewith RDF specification,since URIs are also IRIs. Terminological note:The document hand uses term accordance rest OWL specification Section OWL Structural Specification Specification]), RDF Semantics specification Semantics] uses term reference".According RFC term absolute resource identifier optional fragment,which being used document.In contrast,the term reference" additionally covers relative references,which are never used document. Convention:In document,IRIs are abbreviatedin way defined Section OWL Structural Specification Specification], i.e., abbreviations consist prefix name local part,such definition RDF triple according Section RDF Concepts Concepts]is restricted caseswhere subject RDF triple IRIor ablank node(Section RDF Concepts Concepts]),and predicate RDF triple isan IRI.As consequence,the definition not treat cases,where, example,the subject triple literal RDF Concepts Concepts]),as ex:p ex:o,or predicate triple blank node,as ex:s _:p ex:o.In order allow interoperability other existing future technologies tools,the document handdoes not explicitly forbid use generalized RDF graphs consisting generalized RDF triples,which are defined allow forIRIs, literals blank nodesto occur subject, predicate object position.Thus,an RDF graphMAYcontain generalized RDF triples,but implementation not required support generalized RDF graphs.Note RDF graph consisting entirely RDF triples according toSection RDF Concepts Concepts]is also generalized RDF graph. Terminological notes:The term Full"refers languagethat determined set RDF graphsbeing interpreted using OWL RDF-Based Semantics.Further,in documentthe term Full ontology"(or simply there risk confusion)will be used interchangeably term graph". Content Ontologies there do not exist syntactic restrictionson set RDF graphsthat be interpreted OWL RDF-Based Semantics,in practice ontology often contain certain kinds constructs are aimed support ontology management tasks.Examples are ontology headers ontology IRIs, well constructs are versioning, importingandannotating ontologies, including concept incompatibility ontologies. topics are scope semantics specification.Section OWL Structural Specification Specification] deals topics detail,and therefore be used guide apply constructs OWL Full ontologies accordingly.The mappings constructs respective RDF encodingare defined inthe OWL RDF Mapping RDF Mapping]. Vocabulary section OWL RDF-Based vocabulary,and lists names datatypes facets used OWL RDF-Based Semantics. Standard Prefixes Table standard prefix names prefix IRIsused document. Table Standard Prefixes Prefix Name Prefix IRI OWL owl http://www.w3.org/2002/07/owl# RDF rdf http://www.w3.org/1999/02/22-rdf-syntax-ns# RDFS rdfs http://www.w3.org/2000/01/rdf-schema# XML Schema xsd http://www.w3.org/2001/XMLSchema# Vocabulary Terms Table lists IRIs OWL RDF-Based vocabulary,which set vocabulary terms are specific OWL RDF-Based Semantics.This vocabularyextends RDF RDFS vocabulariesas specified Sections RDF Semantics Semantics],respectively.Table not mention IRIsthat be listed Section datatype names orSection facet names. Implementations are not required support IRI owl:onProperties, MAY support order realize n-ary dataranges arity Sections7and8.4of OWL Structural Specification Specification] further information). Note: use IRI owl:DataRange been deprecated OWL IRI rdfs:Datatype be used instead. Table OWL RDF-Based Vocabulary owl:AllDifferent owl:AllDisjointClasses owl:AllDisjointProperties owl:allValuesFrom owl:annotatedProperty owl:annotatedSource owl:annotatedTarget owl:Annotation owl:AnnotationProperty owl:assertionProperty owl:AsymmetricProperty owl:Axiom owl:backwardCompatibleWith owl:bottomDataProperty owl:bottomObjectProperty owl:cardinality owl:Class owl:complementOf owl:DataRange owl:datatypeComplementOf owl:DatatypeProperty owl:deprecated owl:DeprecatedClass owl:DeprecatedProperty owl:differentFrom owl:disjointUnionOf owl:disjointWith owl:distinctMembers owl:equivalentClass owl:equivalentProperty owl:FunctionalProperty owl:hasKey owl:hasSelf owl:hasValue owl:imports owl:incompatibleWith owl:intersectionOf owl:InverseFunctionalProperty owl:inverseOf owl:IrreflexiveProperty owl:maxCardinality owl:maxQualifiedCardinality owl:members owl:minCardinality owl:minQualifiedCardinality owl:NamedIndividual owl:NegativePropertyAssertion owl:Nothing owl:ObjectProperty owl:onClass owl:onDataRange owl:onDatatype owl:oneOf owl:onProperty owl:onProperties owl:Ontology owl:OntologyProperty owl:priorVersion owl:propertyChainAxiom owl:propertyDisjointWith owl:qualifiedCardinality owl:ReflexiveProperty owl:Restriction owl:sameAs owl:someValuesFrom owl:sourceIndividual owl:SymmetricProperty owl:targetIndividual owl:targetValue owl:Thing owl:topDataProperty owl:topObjectProperty owl:TransitiveProperty owl:unionOf owl:versionInfo owl:versionIRI owl:withRestrictions Datatype Names Table lists IRIs datatypes used OWL RDF-Based Semantics.The datatype rdf:XMLLiteral described Section RDF Semantics Semantics].All other datatypes are described Section OWL Structural Specification Specification].The normative set datatypes OWL RDF-Based Semantics set datatypesdescribed Section OWL Structural Specification Specification]. Table Datatypes OWL RDF-Based Semantics xsd:anyURI xsd:base64Binary xsd:boolean xsd:byte xsd:dateTime xsd:dateTimeStamp xsd:decimal xsd:double xsd:float xsd:hexBinary xsd:int xsd:integer xsd:language xsd:long xsd:Name xsd:NCName xsd:negativeInteger xsd:NMTOKEN xsd:nonNegativeInteger xsd:nonPositiveInteger xsd:normalizedString rdf:PlainLiteral xsd:positiveInteger owl:rational owl:real xsd:short xsd:string xsd:token xsd:unsignedByte xsd:unsignedInt xsd:unsignedLong xsd:unsignedShort rdf:XMLLiteral Facet Names Table lists IRIs facets used OWL RDF-Based Semantics.Each datatype listed Section empty) set constraining facets.All facets are described Section OWL Structural Specification Specification]in context respective datatypes.The normative set facets OWL RDF-Based Semantics set facetsdescribed Section OWL Structural Specification Specification]. specification,facets are used defining datatype restrictions(see Section example,to refer set strings length 5one restrictthe datatype xsd:string facet xsd:lengthand value Table Facets OWL RDF-Based Semantics rdf:langRange xsd:length xsd:maxExclusive xsd:maxInclusive xsd:maxLength xsd:minExclusive xsd:minInclusive xsd:minLength xsd:pattern Interpretations OWL RDF-Based Semantics vocabulary interpretations vocabulary entailment(see Section RDF Semantics Semantics])for andRDFS vocabularies OWL RDF-Based vocabulary.This section definesOWL RDF-Based datatype mapsandOWL RDF-Based interpretations,and satisfaction ontologies, consistency entailment means OWL RDF-Based Semantics.In addition,the so called universe OWL RDF-Based interpretationare defined. Datatype Maps According Section RDF Semantics specification[RDF Semantics],a datatype d following components: LS(d), lexical space d, set lexical forms; VS(d), value space d, set data values; L2V(d), lexical-to-value mapping d, maps lexical forms LS(d) data values VS(d). Terminological notes:The document hand uses term"data value"in accordance rest OWL specification(see Section OWL Structural Specification Specification]),whereas RDF Semantics specification Semantics]uses term"datatype value" instead.Further, names stand lexical space value space datatype, respectively,are not used RDF Semantics specification,but have been introduced here easier reference. document,the basic definition datatype extended take facets account.See Section information example facets.Note thatSection RDF Semantics specification[RDF Semantics]explicitly permits semantic extensions impose more elaborate datatyping conditionsthan listed datatype facets dis datatype following additional components: FS(d), facet space d, set pairs form F F IRI called constraining facet arbitrary data value called constraining value; F2V(d), facet-to-value mapping d, maps facet-value pair F FS(d) subset VS(d). Note not further specified nature denotation facet IRI only known facet IRI individual.Semantic extensions MAYimpose further restrictions denotations facets.In fact,Section define additional restrictions facets. Also note datatype dand facet-value pair F FS(d)the value vis not requiredto be included value space VS(d) d itself.For example, datatype xsd:string(Section facet xsd:length(Section nonnegative integers constraining values rather strings. document,it always be assumed now thatany datatype d datatype facets. facet space FS(d) datatype dhas not been explicitly defined,or not derived datatype's facet spaceaccording well defined condition,then FS(d) empty set.Unless there risk confusion,the term always refer datatype facets. Section RDF Semantics specification[RDF Semantics]furtherdefines datatype map D be set name-datatype pairs u d IRI u datatype d,such IRI twice set.As consequence been said before,in document datatype map D entirely consist datatypes facets. following definition OWL RDF-Based datatype map Definition RDF-Based Datatype Map):A datatype map D OWL RDF-Based datatype map,if only datatype name u listed Section respective set constraining facets name-datatype pair u, d Dwith specifiedlexical space LS(d), value space VS(d),lexical-to-value mapping L2V(d),facet space FS(d) andfacet-to-value mapping F2V(d). Note Definition not prevent additional datatypes be OWL RDF-Based datatype map.For special case ofan OWL RDF-Based datatype map Dthat exclusively datatypes listed Section ensured thatthere are datatypes available facet values,i.e., name-datatype pair u d Dand facet-value pair( F FS(d)there name-datatype pair u* d* Dsuch VS(d*). Vocabulary Interpretations RDF Semantics specification[RDF Semantics],let V be set literals IRIs containing RDF RDFS vocabularies,and let D be datatype map according Section RDF Semantics Semantics](and accordingly Section D-interpretation V respect D tuple = IR IP IEXT IL LV IR universe nonempty setthat least denotations literals IRIs V.IP subset IR, properties I.LV, data values subset IR least set plain literals(see Section RDF Concepts Concepts])in V, andthe value spaces datatype D.IEXT used associate properties property extension,and mapping IP powerset IR IR.IS mapping IRIs V denotations IR.In particular,IS(u) = d name-datatype pair u d D. IL mapping typed literals V denotations IR,where IL("s"^^u) = L2V(d)(s),provided d datatype D, = d, ands lexical space LS(d);otherwise IL("s"^^u)is not LV. Convention:Following practice introduced Section RDF Semantics Semantics],for given interpretation vocabulary V notation be used instead typed literals IRIs V,respectively. detailed RDF Semantics Semantics],a D-interpretation meet semantic conditionsfor ground graphs blank nodes, RDF interpretations RDFS interpretations,and semantic conditions datatypes". document,the basic definition D-interpretationis extended take facets account. D-interpretation facets Iis D-interpretation datatype map D consisting entirely datatypes facets(Section following additional semantic conditions:for name-datatype pair u d D facet-value pair F facet space FS(d) F vocabulary V name-datatype pair u* d* D, such value space VS(d*). document,it always be assumed now thatany D-interpretation D-interpretation facets. there risk confusion,the term always refer D-interpretation facets. following definition OWL RDF-Based interpretation Definition RDF-Based Interpretation):Let D be OWL RDF-Based datatype map,and let V be vocabularythat RDF RDFS vocabulariesand OWL RDF-Based vocabulary together datatype facet names listed Section OWL RDF-Based interpretation, = IR IP IEXT IL LV V respect Dis D-interpretation V respect Dthat extra semantic conditions given Section Satisfaction, Consistency Entailment following definitions specify means RDF graph be satisfied given OWL RDF-Based interpretation,to be consistent OWL RDF-Based Semantics,and entail RDF graph. notion satisfaction OWL RDF-Based Semanticsis based notion satisfaction D-interpretations Simple interpretations,as defined RDF Semantics Semantics].In essence,in order satisfy RDF graph,an interpretation satisfy triples graph,i.e.,for triple p o"it necessary relationship( IEXT(I(p))holds(special treatment blank nodes,as detailed Section RDF Semantics Semantics]).In other words,the given graph be compatible specific form IEXT mapping I.The distinguishing aspect OWL RDF-Based satisfaction interpretation needs meet OWL RDF-Based semantic conditions(see Section have constraining effect possible forms IEXT mapping have. Definition RDF-Based Satisfaction):Let G be RDF graph,let D be OWL RDF-Based datatype map,let V be vocabularythat RDF RDFS vocabulariesand OWL RDF-Based vocabulary together datatype facet names listed Section let be D-interpretation V respect D.I OWL RDF-Based satisfies G respect V Dif only ifI OWL RDF-Based interpretation V respect Dthatsatisfies G D-interpretation V respect Daccording RDF Semantics[RDF Semantics]. Definition RDF-Based Consistency):Let S be collection RDF graphs,and let D be OWL RDF-Based datatype map.S OWL RDF-Based consistent respect Dif only ifthere OWL RDF-Based interpretation respect Dof vocabulary V includesthe RDF RDFS vocabularies OWL RDF-Based vocabularytogether datatype facet names listed Section OWL RDF-Based satisfies RDF graphs Swith respect V D. Definition RDF-Based Entailment):Let S1 S2 be collections RDF graphs,and let D be OWL RDF-Based datatype map.S1 OWL RDF-Based S2 respect Dif only iffor OWL RDF-Based interpretation respect Dof vocabulary V includesthe RDF RDFS vocabularies OWL RDF-Based vocabularytogether datatype facet names listed Section 3the following OWL RDF-Based satisfies RDF graphs S1with respect V D,then OWL RDF-Based satisfies RDF graphs S2with respect V D. Parts Universe Table universeof given OWL RDF-Based interpretation I. second column name part.The third column definition partin terms mapping IEXT referring particular term RDF, RDFS OWL RDF-Based vocabulary. example,the part datatypes named defined set individuals xfor relationship"( IEXT(I(rdf:type))"holds.According semantics rdf:type,as defined Section RDF Semantics Semantics],this means name class extension Section Table Parts Universe Name Part S Definition S IR IEXT(I(rdf:type)) IRI E individuals IR rdfs:Resource data values LV rdfs:Literal ontologies owl:Ontology classes IC rdfs:Class datatypes IDC rdfs:Datatype properties IP rdf:Property data properties IODP owl:DatatypeProperty ontology properties IOXP owl:OntologyProperty annotation properties IOAP owl:AnnotationProperty Class Extensions mapping ICEXT IC powerset IR,which associates classes class extension,is definedfor c ICas ICEXT(c) = IR c IEXT(I(rdf:type)) Semantic Conditions section semantic conditions OWL RDF-Based Semantics.The semantic conditions presented here are basically only specific constructs OWL complete set semantic conditions OWL RDF-Based Semanticsis combination semantic conditions presented hereand semantic conditions Simple Entailment, RDF, RDFS D-Entailment,as specified inthe RDF Semantics specification[RDF Semantics]. semantic conditions sectionare defined respect interpretation I.Section semantic conditions different parts universeof interpretation being considered(compare Section Section list semantic conditions classes properties OWL RDF-Based vocabulary.In rest section, OWL RDF-Based semantic conditions different language constructs OWL 2are specified. Conventions used Section iff:Throughout sectionthe term used shortform only Conjunctive commas:A comma(",") separating assertions semantic condition, IC p IP",is read logical comma separating variables,as d IC",is used abbreviating comma separated assertions,"c IC d IC"in example. Unscoped variables:If explicit scope given variable unconstrained, means IR,i.e. arbitrary individual universe. Set cardinality:For set S, expression form means number elements S. Sequence expressions:An expression form sequence a1 S"means RDF list n individuals a1 being members set S.Precisely,s = n = n > 0there exist z1 IR zn IR, such s = z1 a1 S z1 a1 IEXT(I(rdf:first)) z1 z2 IEXT(I(rdf:rest)) S,( zn IEXT(I(rdf:first)) zn IEXT(I(rdf:rest)) Note, mentioned Section RDF Semantics Semantics],there are semantic constraints enforce sequence structures.So, example,it possible sequence head s refer more sequence. Set names:The following names are used convenient abbreviations certain sets: ISEQ: set sequences. set class extension rdf:List, i.e., ISEQ ICEXT(I(rdf:List)). INNI: set nonnegative integers. set value space datatype xsd:nonNegativeInteger, i.e., INNI ICEXT(I(xsd:nonNegativeInteger)), also subsumed value spaces other numerical datatypes, such xsd:integer. Notes Form Semantic Conditions design goal OWL 2was ensure appropriate degree alignmentbetween OWL RDF-Based Semantics OWL Direct Semantics[OWL Direct Semantics]under different constraints semantics have meet.The way semantic alignment describedis OWL correspondence theoremin Section hold,the semantic conditionsthat treat RDF encodingof OWL axioms Section OWL RDF Mapping RDF Mapping] Section OWL Structural Specification Specification]),such asinverse property axioms,must have form conditions.This means semantic conditionscompletely determine semantics encoding constructs. other hand,the RDF encodingof OWL expressions(compare Section OWL RDF Mapping RDF Mapping] andSections OWL Structural Specification Specification]),such asproperty restrictions,are treated conditions.These weaker semantic conditions expressions are sufficient correspondence hold,so there necessity define stronger conditions OWL RDF-Based Semantics language constructs. Special cases arethe semantic conditions forBoolean connectivesof classes forenumerations.These language constructs build OWL expressions.But backward compatibility reasonsthere also RDF encoding axioms based vocabulary language constructs(see Table Section OWL RDF Mapping RDF Mapping]).For example, RDF expression form ex:c1 owl:unionOf ex:c2 ex:c3 mapped reverse RDF mappingto OWL axiomthat states equivalence class denoted byex:c1with union classes denoted byex:c2andex:c3.In order ensure thecorrespondence accordance original OWL RDF-Compatible Semantics specification[OWL RDF-Compatible Semantics],the semantic conditions mentioned language constructs are therefore"iff" conditions. Further,special treatment OWL axiomsthat have multi-triple representation RDF,where different triples share common node",such blank node following example: _:x rdf:type owl:AllDisjointClasses _:x owl:members ex:c1 ex:c2 essence, semantic conditions encoding language constructs are conditions,as usual axioms.However, order cope specific syntactic aspect node",the conditions language constructs have been split conditions,where condition representing right-to-left directioncontains additional premise having form IR". purpose premise ensure existence individualthat needed satisfy root nodeunder OWL RDF-Based semantics.The language constructs question aren-ary disjointness axioms Section negative property assertions Section semantic conditions sectionsometimes do not explicitly list typing statements consequentthat expect.For example,the semantic condition owl:someValuesFrom restrictions Section not list statement ICEXT(I(owl:Restriction))"on right hand side.Consequences are generally not mentioned, already be deduced other means.Often,these redundant consequences follow semantic conditions vocabulary classes vocabulary propertiesinSection andSection connection semantic conditions parts universein Section example above,the omitted consequence be obtainedfrom third column entry owl:someValuesFromin table inSection IEXT(I(owl:someValuesFrom)) ICEXT(I(owl:Restriction)) IC. Semantic Conditions Parts Universe Table lists semantic conditions parts universeof OWL RDF-Based interpretation being considered.Additional semantic conditions affecting partsare given Section first column name part,as defined inSection second column definescertain conditions part.In most cases,the column part other part subsumed,and thus position part hierarchy" universeis narrowed down.The third column further information instances partsthat consist classes properties.In general,if part classes,then class extensions member classesis specified part universe are subsumed.If part properties,then domains ranges member properties are determined. Table Semantic Conditions Parts Universe Name Part S Conditions S Conditions Instances S IR S LV S IR S IR IC S IR ICEXT(x) IR IDC S IC ICEXT(x) LV IP S IR IEXT(x) IR IR IODP S IP IEXT(x) IR LV IOXP S IP IEXT(x) IOAP S IP IEXT(x) IR IR Semantic Conditions Vocabulary Classes Table lists semantic conditions classes have IRIs OWL RDF-Based vocabulary.In addition,the table classeswith IRIs RDF RDFS vocabulariesthat representparts universeof OWL RDF-Based interpretation being considered(Section semantic conditions remaining classeswith names RDFand RDFS vocabulariescan be found RDF Semantics specification[RDF Semantics]. first column IRI class.The second column definesof particular kind class general class member part IC) datatype member IDC).The third column class extension classby part universe(Section subsumed:from entry form"ICEXT(I(C)) S",for class IRI Cand set S,and given RDF triple form"u rdf:type C",one deduce relationship"I(u) S"holds.Note entries are form"ICEXT(I(C)) = S",which means class extension exactly specified be set.See Section further semantic conditions classes represent parts. Not included table are datatypes OWL RDF-Based Semantics IRIs listed Section such datatype IRI E, following semantic conditions hold(as consequence fact E member datatype mapof OWL RDF-Based interpretationaccording Definition semantic conditions datatypes"listed Section RDF Semantics Semantics]): IDC ICEXT(I(E)) LV Table Semantic Conditions Vocabulary Classes IRI E ICEXT(I(E)) owl:AllDifferent IC IR owl:AllDisjointClasses IC IR owl:AllDisjointProperties IC IR owl:Annotation IC IR owl:AnnotationProperty IC = IOAP owl:AsymmetricProperty IC IP owl:Axiom IC IR rdfs:Class IC = IC owl:Class IC = IC owl:DataRange IC = IDC rdfs:Datatype IC = IDC owl:DatatypeProperty IC = IODP owl:DeprecatedClass IC IC owl:DeprecatedProperty IC IP owl:FunctionalProperty IC IP owl:InverseFunctionalProperty IC IP owl:IrreflexiveProperty IC IP rdfs:Literal IDC = LV owl:NamedIndividual IC IR owl:NegativePropertyAssertion IC IR owl:Nothing IC = owl:ObjectProperty IC = IP owl:Ontology IC = owl:OntologyProperty IC = IOXP rdf:Property IC = IP owl:ReflexiveProperty IC IP rdfs:Resource IC = IR owl:Restriction IC IC owl:SymmetricProperty IC IP owl:Thing IC = IR owl:TransitiveProperty IC IP Semantic Conditions Vocabulary Properties Table lists semantic conditions propertiesthat have IRIs OWL RDF-Based vocabulary.In addition,the table propertieswith IRIs RDFS vocabularythat are specified be annotation properties OWL RDF-Based Semantics.The semantic conditions remaining propertieswith names RDFS vocabulariescan be found RDF Semantics specification[RDF Semantics]. first column IRI property.The second column definesof particular kind property general property member part IP), datatype property member IODP),an ontology property member IOXP) annotation property member IOAP).The third column specifiesthe domain range property:from entry form"IEXT(I(p)) S1 S2",for property IRI pand sets S1 S2,and given RDF triple"s p o",one deduce relationships"I(s) S1"and S2".Note entries are form"IEXT(I(p)) = S1 S2",which means property extension exactly specifiedto be Cartesian product sets. Not included table are facets OWL RDF-Based Semanticswith IRIs listed Section are used specify datatype restrictions(see Section such facet IRI E,the following semantic conditionsextendthe basic semantics specificationthat been given datatypes facetsin Section IODP IEXT(I(E)) IR LV Implementations are not required support semantic condition owl:onProperties, MAY support order realize n-ary dataranges arity Sections7and8.4of OWL Structural Specification Specification] further information). Informative notes: owl:topObjectProperty individuals universe other.Likewise, owl:topDataPropertyrelates individual data value.Further,owl:bottomObjectProperty owl:bottomDataPropertystand empty relationship. ranges propertiesowl:deprecated owl:hasSelfare not restricted form,and, particular, are not restricted Boolean values.The actual object values propertiesdo not have intended meaning,but well have been defined be other value.Therefore, semantics given here are formthat values be arbitrarily chosenwithout leading nontrivial semantic conclusions.It however, recommended still use object literal form"true"^^xsd:booleanin ontologies,in order not get conflict required usage properties scenarios ask applying reverse RDF mapping(compare Table Section OWL RDF Mapping RDF Mapping] owl:hasSelf,and Section OWL Structural Specification Specification] owl:deprecated). range propertyowl:annotatedProperty unrestricted,i.e. not specified set properties.Annotations are meant be weak",i.e. formal meaning not significantly exceed originating RDF Semantics specification. Several properties,such owl:priorVersion,have been specified ontology properties annotation properties,in order be line original OWL RDF-Compatible Semantics specification[OWL RDF-Compatible Semantics]andthe rest OWL specification(see Section OWL Structural Specification Specification]). Table Semantic Conditions Vocabulary Properties IRI E IEXT(I(E)) owl:allValuesFrom IP ICEXT(I(owl:Restriction)) IC owl:annotatedProperty IP IR IR owl:annotatedSource IP IR IR owl:annotatedTarget IP IR IR owl:assertionProperty IP ICEXT(I(owl:NegativePropertyAssertion)) IP owl:backwardCompatibleWith IOXP IOAP owl:bottomDataProperty IODP = owl:bottomObjectProperty IP = owl:cardinality IP ICEXT(I(owl:Restriction)) INNI rdfs:comment IOAP IR LV owl:complementOf IP IC IC owl:datatypeComplementOf IP IDC IDC owl:deprecated IOAP IR IR owl:differentFrom IP IR IR owl:disjointUnionOf IP IC ISEQ owl:disjointWith IP IC IC owl:distinctMembers IP ICEXT(I(owl:AllDifferent)) ISEQ owl:equivalentClass IP IC IC owl:equivalentProperty IP IP IP owl:hasKey IP IC ISEQ owl:hasSelf IP ICEXT(I(owl:Restriction)) IR owl:hasValue IP ICEXT(I(owl:Restriction)) IR owl:imports IOXP owl:incompatibleWith IOXP IOAP owl:intersectionOf IP IC ISEQ owl:inverseOf IP IP IP rdfs:isDefinedBy IOAP IR IR rdfs:label IOAP IR LV owl:maxCardinality IP ICEXT(I(owl:Restriction)) INNI owl:maxQualifiedCardinality IP ICEXT(I(owl:Restriction)) INNI owl:members IP IR ISEQ owl:minCardinality IP ICEXT(I(owl:Restriction)) INNI owl:minQualifiedCardinality IP ICEXT(I(owl:Restriction)) INNI owl:onClass IP ICEXT(I(owl:Restriction)) IC owl:onDataRange IP ICEXT(I(owl:Restriction)) IDC owl:onDatatype IP IDC IDC owl:oneOf IP IC ISEQ owl:onProperty IP ICEXT(I(owl:Restriction)) IP owl:onProperties IP ICEXT(I(owl:Restriction)) ISEQ owl:priorVersion IOXP IOAP owl:propertyChainAxiom IP IP ISEQ owl:propertyDisjointWith IP IP IP owl:qualifiedCardinality IP ICEXT(I(owl:Restriction)) INNI owl:sameAs IP IR IR rdfs:seeAlso IOAP IR IR owl:someValuesFrom IP ICEXT(I(owl:Restriction)) IC owl:sourceIndividual IP ICEXT(I(owl:NegativePropertyAssertion)) IR owl:targetIndividual IP ICEXT(I(owl:NegativePropertyAssertion)) IR owl:targetValue IP ICEXT(I(owl:NegativePropertyAssertion)) LV owl:topDataProperty IODP = IR LV owl:topObjectProperty IP = IR IR owl:unionOf IP IC ISEQ owl:versionInfo IOAP IR IR owl:versionIRI IOXP owl:withRestrictions IP IDC ISEQ Semantic Conditions Boolean Connectives Table semantic conditions Boolean connectives,including intersections, unions complementsof classes datatypes.An intersection union collection datatypesor complement datatypeis datatype.While complement class created w.r.t. whole universe,a datatype complement created datatype w.r.t. set data values only. Informative notes:Of pairs semantic conditions tableevery first condition,since corresponding OWL language constructsare bothclass expressions axioms.In contrast,the semantic condition datatype complementsis condition,since only datarange expression.See thenotes form semantic conditionsfor further information.For remaining semantic conditionsthat treat cases intersections unions datatypesit sufficient have conditions,since stronger conditions be redundantdue more general conditions already exist classes. Note datatype related semantic conditionsdo not apply empty sets,but still receive datatype empty setby explicitly asserting resulting classto be instance class rdfs:Datatype. Table Semantic Conditions Boolean Connectives s sequence c1 cn IR then s IEXT(I(owl:intersectionOf)) iff c1 cn IC ICEXT(z) = ICEXT(c1) ICEXT(cn) then s sequence d1 dn IDC n s IEXT(I(owl:intersectionOf)) IDC s sequence c1 cn IR then s IEXT(I(owl:unionOf)) iff c1 cn IC ICEXT(z) = ICEXT(c1) ICEXT(cn) then s sequence d1 dn IDC n s IEXT(I(owl:unionOf)) IDC c IEXT(I(owl:complementOf)) iff c IC ICEXT(z) = IR ICEXT(c) then d IEXT(I(owl:datatypeComplementOf)) ICEXT(z) = LV ICEXT(d) Semantic Conditions Enumerations Table lists semantic conditions enumerations, i.e. classes consist explicitly given finite set instances.In particular, enumeration entirely consisting data values datatype. Informative notes:The first semantic condition condition,since corresponding OWL language constructis class expression axiom.See thenotes form semantic conditionsfor further information.For remaining semantic conditionthat case enumerations data valuesit sufficient have condition,since stronger condition be redundantdue more general condition already individuals.Note data value related semantic conditiondoes not apply empty sets,but still receive datatype empty setby explicitly asserting resulting class be instance class rdfs:Datatype. Table Semantic Conditions Enumerations s sequence a1 IR then s IEXT(I(owl:oneOf)) iff IC ICEXT(z) = a1 then s sequence v1 vn LV n s IEXT(I(owl:oneOf)) IDC Semantic Conditions Property Restrictions Table lists semantic conditions property restrictions. Value restrictions require values certain property be instances given class data range,or property specifically defined value.By placing self restriction given property only individualsthat are reflexively related property. Cardinality restrictions determine often certain property allowed be applied given individual.Qualified cardinality restrictions are more specific cardinality restrictionsin determine quantity property application respect particular class data rangefrom property values are taken. Implementations are not required support semantic conditions owl:onProperties, MAY support order realize n-ary dataranges arity Sections7and8.4of OWL Structural Specification Specification] further information). Informative notes:All semantic conditions are conditions,since corresponding OWL language constructsare class expressions.The conditions generally only list consequenceson right hand sidethat are specific respective condition,i.e. consequences do not already follow other means.See notes form semantic conditionsfor further information.Note semantic condition self restrictionsdoes not constrain right hand side owl:hasSelf assertion be Boolean value Section explanation. Table Semantic Conditions Property Restrictions then c IEXT(I(owl:someValuesFrom)) p IEXT(I(owl:onProperty)) ICEXT(z) = y y IEXT(p) y ICEXT(c) s sequence p1 pn IR n c IEXT(I(owl:someValuesFrom)) s IEXT(I(owl:onProperties)) p1 pn IP ICEXT(z) = y1 yn yk IEXT(pk) k n y1 yn ICEXT(c) c IEXT(I(owl:allValuesFrom)) p IEXT(I(owl:onProperty)) ICEXT(z) = y y IEXT(p) y ICEXT(c) s sequence p1 pn IR n c IEXT(I(owl:allValuesFrom)) s IEXT(I(owl:onProperties)) p1 pn IP ICEXT(z) = y1 yn yk IEXT(pk) k n y1 yn ICEXT(c) IEXT(I(owl:hasValue)) p IEXT(I(owl:onProperty)) ICEXT(z) = IEXT(p) IEXT(I(owl:hasSelf)) p IEXT(I(owl:onProperty)) ICEXT(z) = IEXT(p) n IEXT(I(owl:minCardinality)) p IEXT(I(owl:onProperty)) ICEXT(z) = y y IEXT(p) n n IEXT(I(owl:maxCardinality)) p IEXT(I(owl:onProperty)) ICEXT(z) = y y IEXT(p) n n IEXT(I(owl:cardinality)) p IEXT(I(owl:onProperty)) ICEXT(z) = y y IEXT(p) = n n IEXT(I(owl:minQualifiedCardinality)) p IEXT(I(owl:onProperty)) c IEXT(I(owl:onClass)) ICEXT(z) = y y IEXT(p) y ICEXT(c) n n IEXT(I(owl:minQualifiedCardinality)) p IEXT(I(owl:onProperty)) d IEXT(I(owl:onDataRange)) p IODP ICEXT(z) = y LV y IEXT(p) y ICEXT(d) n n IEXT(I(owl:maxQualifiedCardinality)) p IEXT(I(owl:onProperty)) c IEXT(I(owl:onClass)) ICEXT(z) = y y IEXT(p) y ICEXT(c) n n IEXT(I(owl:maxQualifiedCardinality)) p IEXT(I(owl:onProperty)) d IEXT(I(owl:onDataRange)) p IODP ICEXT(z) = y LV y IEXT(p) y ICEXT(d) n n IEXT(I(owl:qualifiedCardinality)) p IEXT(I(owl:onProperty)) c IEXT(I(owl:onClass)) ICEXT(z) = y y IEXT(p) y ICEXT(c) = n n IEXT(I(owl:qualifiedCardinality)) p IEXT(I(owl:onProperty)) d IEXT(I(owl:onDataRange)) p IODP ICEXT(z) = y LV y IEXT(p) y ICEXT(d) = n Semantic Conditions Datatype Restrictions Table lists semantic conditions datatype restrictions,which are used define sub datatypes existing datatypesby restricting original datatype means set facet-value pairs.See Section information example constraining facets. Certain special cases exist:If facet-value pair applied given datatype, then resulting datatype be equivalent original datatype.Further,if facet-value pair applied datatype being member datatype's facet space,then ontology be satisfied therefore be inconsistent.In particular,a datatype restriction more specified facet-value pairswill result inconsistent ontology, applied datatype empty facet space. set IFSis defined IFS(d) F FS(d) d datatype,F IRI constraining facet, constraining value facet.This set facet space FS(d), defined Section rather pairs denotation facet value. mapping IF2V defined byIF2V(d)(( F2V(d)(( F whered datatype,F IRI constraining facet, constraining value facet.This mapping facet-to-value mapping F2V(d), defined Section same subsets value space VS(d), rather pairs denotation facet value. Informative notes:The semantic condition condition,since corresponding OWL language constructis datarange expression.The condition only lists consequenceson right hand sidethat are specific condition,i.e. consequences do not already follow other means.See thenotes form semantic conditionsfor further information. Table Semantic Conditions Datatype Restrictions then s sequence z1 zn IR f1 fn IP d IEXT(I(owl:onDatatype)) s IEXT(I(owl:withRestrictions)) z1 v1 IEXT(f1) zn vn IEXT(fn) f1 fn IODP v1 vn LV f1 v1 fn vn IFS(d) ICEXT(z) = ICEXT(d) IF2V(d)(( f1 v1 IF2V(d)(( fn vn Semantic Conditions RDFS Vocabulary Table RDFS semantic conditionsfor subclass axioms, subproperty axioms, domain axioms range axioms.The semantic conditions provided here are conditions,while original semantic conditions,as specified Section RDF Semantics Semantics],are weaker conditions.Only additional semantic conditions are given here other conditions RDF RDFS are retained. Informative notes:All semantic conditions are conditions,since corresponding OWL language constructsare axioms.See notes form semantic conditionsfor further information. Table Semantic Conditions RDFS Vocabulary c1 c2 IEXT(I(rdfs:subClassOf)) iff c1 c2 IC ICEXT(c1) ICEXT(c2) p1 p2 IEXT(I(rdfs:subPropertyOf)) p1 p2 IP IEXT(p1) IEXT(p2) p c IEXT(I(rdfs:domain)) p IP c IC y y IEXT(p) ICEXT(c) p c IEXT(I(rdfs:range)) p IP c IC y y IEXT(p) y ICEXT(c) Semantic Conditions Equivalence Disjointness Table lists semantic conditions specifying individuals are equal different other,and classes properties are equivalent disjoint other,respectively.Theproperty owl:equivalentClassis also used formulate datatype definitions(see Section OWL Structural Specification Specification] information datatype definitions).In addition,the table disjoint union axioms. Informative notes:All semantic conditions are conditions,since corresponding OWL language constructsare axioms.See notes form semantic conditionsfor further information. Table Semantic Conditions Equivalence Disjointness a1 a2 IEXT(I(owl:sameAs)) iff a1 = a2 a1 a2 IEXT(I(owl:differentFrom)) a1 a2 c1 c2 IEXT(I(owl:equivalentClass)) c1 c2 IC ICEXT(c1) = ICEXT(c2) c1 c2 IEXT(I(owl:disjointWith)) c1 c2 IC ICEXT(c1) ICEXT(c2) = p1 p2 IEXT(I(owl:equivalentProperty)) p1 p2 IP IEXT(p1) = IEXT(p2) p1 p2 IEXT(I(owl:propertyDisjointWith)) p1 p2 IP IEXT(p1) IEXT(p2) = s sequence c1 cn IR then c s IEXT(I(owl:disjointUnionOf)) iff c c1 cn IC ICEXT(c) = ICEXT(c1) ICEXT(cn) ICEXT(cj) ICEXT(ck) = j n k n such j k Semantic Conditions N-ary Disjointness Table lists semantic conditions specifying n-ary diversity disjointness axioms,i.e. several given individuals are mutually different other,and several given classes properties are mutually disjoint other,respectively. Note there are alternative ways specify owl:AllDifferent axioms,by using propertyowl:membersthat used other constructs, too,or applying legacy propertyowl:distinctMembers.Both variants have equivalent formal meaning. Informative notes:The semantic conditions essentially represent conditions,since corresponding OWL language constructsare axioms.However, there are actually semantic conditions language constructdue multi-triple RDF encoding language constructs.The conditions only list consequenceson right hand sidethat are specific respective condition,i.e. consequences do not already follow other means.See notes form semantic conditionsfor further information. Table Semantic Conditions N-ary Disjointness then s sequence a1 IR ICEXT(I(owl:AllDifferent)) s IEXT(I(owl:members)) aj j n k n such j k then IR s sequence a1 IR aj j n k n such j k ICEXT(I(owl:AllDifferent)) s IEXT(I(owl:members)) then s sequence a1 IR ICEXT(I(owl:AllDifferent)) s IEXT(I(owl:distinctMembers)) aj j n k n such j k then IR s sequence a1 IR aj j n k n such j k ICEXT(I(owl:AllDifferent)) s IEXT(I(owl:distinctMembers)) then s sequence c1 cn IR ICEXT(I(owl:AllDisjointClasses)) s IEXT(I(owl:members)) c1 cn IC ICEXT(cj) ICEXT(ck) = j n k n such j k then IR s sequence c1 cn IC ICEXT(cj) ICEXT(ck) = j n k n such j k ICEXT(I(owl:AllDisjointClasses)) s IEXT(I(owl:members)) then s sequence p1 pn IR ICEXT(I(owl:AllDisjointProperties)) s IEXT(I(owl:members)) p1 pn IP IEXT(pj) IEXT(pk) = j n k n such j k then IR s sequence p1 pn IP IEXT(pj) IEXT(pk) = j n k n such j k ICEXT(I(owl:AllDisjointProperties)) s IEXT(I(owl:members)) Semantic Conditions Sub Property Chains Table lists semantic conditions sub property chains,which allow specifying complex property subsumption axioms. example,one define sub property chain axiomthat specifiesthe chain consisting property extensions properties ex:hasFatherandex:hasBrotherto be sub relation extension propertyex:hasUncle. Informative notes:The semantic condition condition,since corresponding OWL language constructis axiom.See notes form semantic conditionsfor further information.The semantics been specified waysuch sub property chain axiom be satisfiedwithout requiring existence propertythat property chain property extension. Table Semantic Conditions Sub Property Chains s sequence p1 pn IR then p s IEXT(I(owl:propertyChainAxiom)) iff p IP p1 pn IP y0 yn y0 y1 IEXT(p1) yn-1 yn IEXT(pn) y0 yn IEXT(p) Semantic Conditions Inverse Properties Table lists semantic conditions inverse property axioms.The inverse given propertyis corresponding propertywith subject object swapped property assertion built Informative notes:The semantic condition condition,since corresponding OWL language constructis axiom.See thenotes form semantic conditionsfor further information. Table Semantic Conditions Inverse Properties p1 p2 IEXT(I(owl:inverseOf)) iff p1 p2 IP IEXT(p1) = y y IEXT(p2) Semantic Conditions Property Characteristics Table lists semantic conditions property characteristics. property functional,then most distinct value be assigned given individual property.An inverse functional property be regarded property,i.e. different individuals be assigned same value property.A reflexive property individual universe irreflexive property not relate individual itself.If individuals are related symmetric property,then property also reversely,while never case asymmetric property.A transitive property individual individual b, latter individual c,also c. Informative notes:All semantic conditions are conditions,since corresponding OWL language constructsare axioms.See notes form semantic conditionsfor further information. Table Semantic Conditions Property Characteristics p ICEXT(I(owl:FunctionalProperty)) iff p IP y1 y2 y1 IEXT(p) y2 IEXT(p) y1 = y2 p ICEXT(I(owl:InverseFunctionalProperty)) p IP x1 x2 y x1 y IEXT(p) x2 y IEXT(p) x1 = x2 p ICEXT(I(owl:ReflexiveProperty)) p IP IEXT(p) p ICEXT(I(owl:IrreflexiveProperty)) p IP IEXT(p) p ICEXT(I(owl:SymmetricProperty)) p IP y y IEXT(p) y IEXT(p) p ICEXT(I(owl:AsymmetricProperty)) p IP y y IEXT(p) y IEXT(p) p ICEXT(I(owl:TransitiveProperty)) p IP y y IEXT(p) y IEXT(p) IEXT(p) Semantic Conditions Keys Table lists semantic conditions Keys. Keys provide alternative inverse functional properties Section allow defining property key local given class:the specified propertywill have features keyonly individuals being instances class,and assumption madeabout individuals membership class be entailed.Further,it possible define keys",i.e. several properties be combined single key applicable composite values.Note keys are not functional defaultunder OWL RDF-Based Semantics. Informative notes:The semantic condition condition,since corresponding OWL language constructis axiom.See notes form semantic conditionsfor further information. Table Semantic Conditions Keys s sequence p1 pn IR then c s IEXT(I(owl:hasKey)) iff c IC p1 pn IP y z1 zn ICEXT(c) y ICEXT(c) zk IEXT(pk) y zk IEXT(pk) k n then = y Semantic Conditions Negative Property Assertions Table lists semantic conditions negative property assertions.They allow state given individuals are not related given property. second form based owl:targetValue more specific first form based owl:targetIndividualin second form restricted case negative data property assertions.Note second form coerce target value negative property assertioninto data value,due range defined property owl:targetValue Section Informative notes:The semantic conditions essentially represent conditions,since corresponding OWL language constructsare axioms.However, there are actually semantic conditions language construct,due multi-triple RDF encoding language constructs.The conditions only list consequenceson right hand sidethat are specific respective condition,i.e. consequences do not already follow other means.See notes form semantic conditionsfor further information. Table Semantic Conditions Negative Property Assertions then a1 IEXT(I(owl:sourceIndividual)) p IEXT(I(owl:assertionProperty)) a2 IEXT(I(owl:targetIndividual)) a1 a2 IEXT(p) then IR a1 IR p IP a2 IR a1 a2 IEXT(p) a1 IEXT(I(owl:sourceIndividual)) p IEXT(I(owl:assertionProperty)) a2 IEXT(I(owl:targetIndividual)) then IEXT(I(owl:sourceIndividual)) p IEXT(I(owl:assertionProperty)) IEXT(I(owl:targetValue)) p IODP IEXT(p) then IR IR p IODP LV IEXT(p) IEXT(I(owl:sourceIndividual)) p IEXT(I(owl:assertionProperty)) IEXT(I(owl:targetValue)) Appendix: Axiomatic Triples RDF Semantics specification[RDF Semantics]defines so called triples"as part semantics RDF RDFS.Unlike RDF Semantics,the OWL RDF-Based Semantics not normatively specify axiomatic triples,since expect find set RDF triplesthat fully captures aspects"of OWL RDF-Based Semantics.Furthermore,axiomatic triples OWL RDF-Based Semantics principle,contain arbitrarily complex class expressions,e.g. union several classes,and nonobvious several possible nonequivalent sets axiomatic triples be selected.However,the OWL RDF-Based Semantics many semantic conditions sense be regarded being thus be considered replacement missing axiomatic triples.After overview axiomatic triples RDF RDFS Section Sections discuss semantic conditions OWL RDF-Based Semanticsrelate axiomatic triples.Based discussion,an explicit example set axiomatic triplesthat compatible OWL RDF-Based Semanticswill be provided inSection Axiomatic Triples RDF RDF RDFS[RDF Semantics],axiomatic triples are usedto provide basic meaning vocabulary terms languages.This formal meaning independent given RDF graph,and even vocabulary terms,which do not occur graph interpreted RDF RDFS interpretation.As consequence,all axiomatic triples RDF RDFS are entailed empty graph,when being interpreted semantics RDF RDFS, respectively. Examples RDF RDFS axiomatic triples are: rdf:type rdf:type rdf:Property rdf:type rdfs:domain rdfs:Resource rdf:type rdfs:range rdfs:Class rdfs:Datatype rdfs:subClassOf rdfs:Class rdfs:isDefinedBy rdfs:subPropertyOf rdfs:seeAlso shown examples,axiomatic triples are typically used RDF Semantics specificationto determine part universeto denotation vocabulary term case property,the domain range specified well.Also, cases,hierarchical relationships classes properties vocabularyare determined. OWL RDF-Based Semantics,all axiomatic triples RDF RDFScould, principle, be replaced semantic conditionsthat have premises bound variables.By applying RDFS semantic conditions given Section example axiomatic triples be equivalently restated ICEXT(I(rdf:Property)) IEXT(I(rdf:type)) ICEXT(I(rdfs:Resource)) ICEXT(I(rdfs:Class)) ICEXT(I(rdfs:Datatype)) ICEXT(I(rdfs:Class)) IEXT(I(rdfs:isDefinedBy)) IEXT(I(rdfs:seeAlso)) axiomatic triples RDF RDFS be considered sense have object positiononly single terms RDF RDFS vocabularies,and complex class property expressions appear there. Axiomatic Triples Vocabulary Classes semantic conditions vocabulary classesin Section be considered corresponding toa set axiomatic triples classes vocabulary OWL RDF-Based Semantics. First, IRI E occurring first column Table second column entry form S" set S,then entry RDF triple form rdf:type C", C IRI vocabulary class ICEXT(I(C)) = S.In table, S always be part IC classes, sub part IC.Hence, corresponding RDF triple IRI C beone cases) example,for IRI semantic condition IC corresponding axiomatic triple owl:FunctionalProperty rdf:type rdfs:Class Further, IRI E first column table, third column entry form S" = S") set S,then entry RDF triple form"E rdfs:subClassOf C" additionally rdfs:subClassOf E"), C IRI vocabulary class ICEXT(I(C)) = S.In case,S be parts universe I. example,the semantic condition ICEXT(I(owl:FunctionalProperty)) IP corresponding axiomatic triple owl:FunctionalProperty rdfs:subClassOf rdf:Property addition, semantic conditions parts universe Table Section have be taken account.In particular, entry second column Table form"S1 S2" sets S1 S2,then RDF tripleof form"C1 owl:subClassOf C2",where C1 C2 are IRIs vocabulary classes ICEXT(I(C1)) = S1andICEXT(I(C2)) = S2,respectively,according Section Section semantic conditions datatypes OWL RDF-Based Semantics,as listed Section datatype IRI E,such E semantic conditions"I(E) IDC" LV"the corresponding axiomatic triples are form E rdf:type rdfs:Datatype E rdfs:subClassOf rdfs:Literal analogy Section RDF axiomatic triples, axiomatic triples vocabulary classes(including datatypes)can be considered sense thatthey have object positiononly single terms RDF, RDFS OWL RDF-Based vocabularies(Section Note axiomatic triples obtained wayalready follow semantics RDF RDFS,as defined RDF Semantics Semantics]. Axiomatic Triples Vocabulary Properties semantic conditions vocabulary propertiesin Section be considered corresponding toa set axiomatic triplesfor properties vocabulary OWL RDF-Based Semantics. First,for IRI E occurring first column Table second column entryof form S" set S,then entry RDF triple form rdf:type C",where C IRI vocabulary class ICEXT(I(C)) = S.In table, S always be part IP properties, sub part IP.Hence, corresponding RDF triple IRI C beone cases), example,for IRI semantic condition IP corresponding axiomatic triple owl:disjointWith rdf:type rdf:Property Further, IRI E first column table,if third column entryof form S1 S2" sets S1 S2,then entry RDF triples form"E rdfs:domain C1" rdfs:range C2",where C1 C2 are IRIs vocabulary classes ICEXT(I(C1)) = S1andICEXT(I(C2)) = S2,respectively.Note sets S1 S2do not always correspond parts universe I. example,the semantic condition IEXT(I(owl:disjointWith)) IC IC corresponding axiomatic triples owl:disjointWith rdfs:domain owl:Class owl:disjointWith rdfs:range owl:Class Exceptions are semantic conditions"IEXT(I(owl:topObjectProperty)) = IR IR"and"IEXT(I(owl:topDataProperty)) = IR LV",since exactly specified property extensions propertiescannot be expressed solely domain range axiomatic triples.For example, domain range axiomatic triples forowl:sameAsare equal forowl:topObjectProperty,but property extension owl:sameAsis different property extension owl:topObjectProperty. Section semantic conditionsfor facets OWL RDF-Based Semantics,as listed Section facet IRI E,such E semantic conditions"I(E) IODP"and"IEXT(I(E)) IR LV"the corresponding axiomatic triples are form E rdf:type owl:DatatypeProperty E rdfs:domain rdfs:Resource E rdfs:range rdfs:Literal analogy Section RDF axiomatic triples, axiomatic triples vocabulary properties facets)can be considered sense thatthey have object positiononly single terms RDF, RDFS OWL RDF-Based vocabularies(Section Set Axiomatic Triples section concrete example set axiomatic triplesbased discussion Sections6.2and6.3.The axiomatic triples are grouped different tablesfor classes properties OWL RDF-Based vocabulary,for datatypes facets OWL RDF-Based Semantics,and classes properties RDFS vocabulary.Note set axiomatic triples not meant be free redundancy. Table Axiomatic Triples Classes OWL RDF-Based Vocabulary owl:AllDifferent rdf:type rdfs:Class owl:AllDifferent rdfs:subClassOf rdfs:Resource owl:AllDisjointClasses rdf:type rdfs:Class owl:AllDisjointClasses rdfs:subClassOf rdfs:Resource owl:AllDisjointProperties rdf:type rdfs:Class owl:AllDisjointProperties rdfs:subClassOf rdfs:Resource owl:Annotation rdf:type rdfs:Class owl:Annotation rdfs:subClassOf rdfs:Resource owl:AnnotationProperty rdf:type rdfs:Class owl:AnnotationProperty rdfs:subClassOf rdf:Property owl:AsymmetricProperty rdf:type rdfs:Class owl:AsymmetricProperty rdfs:subClassOf owl:ObjectProperty owl:Axiom rdf:type rdfs:Class owl:Axiom rdfs:subClassOf rdfs:Resource owl:Class rdf:type rdfs:Class owl:Class rdfs:subClassOf rdfs:Class owl:DataRange rdf:type rdfs:Class owl:DataRange rdfs:subClassOf rdfs:Datatype owl:DatatypeProperty rdf:type rdfs:Class owl:DatatypeProperty rdfs:subClassOf rdf:Property owl:DeprecatedClass rdf:type rdfs:Class owl:DeprecatedClass rdfs:subClassOf rdfs:Class owl:DeprecatedProperty rdf:type rdfs:Class owl:DeprecatedProperty rdfs:subClassOf rdf:Property owl:FunctionalProperty rdf:type rdfs:Class owl:FunctionalProperty rdfs:subClassOf rdf:Property owl:InverseFunctionalProperty rdf:type rdfs:Class owl:InverseFunctionalProperty rdfs:subClassOf owl:ObjectProperty owl:IrreflexiveProperty rdf:type rdfs:Class owl:IrreflexiveProperty rdfs:subClassOf owl:ObjectProperty owl:NamedIndividual rdf:type rdfs:Class owl:NamedIndividual rdfs:subClassOf owl:Thing owl:NegativePropertyAssertion rdf:type rdfs:Class owl:NegativePropertyAssertion rdfs:subClassOf rdfs:Resource owl:Nothing rdf:type owl:Class owl:Nothing rdfs:subClassOf owl:Thing owl:ObjectProperty rdf:type rdfs:Class owl:ObjectProperty rdfs:subClassOf rdf:Property owl:Ontology rdf:type rdfs:Class owl:Ontology rdfs:subClassOf rdfs:Resource owl:OntologyProperty rdf:type rdfs:Class owl:OntologyProperty rdfs:subClassOf rdf:Property owl:ReflexiveProperty rdf:type rdfs:Class owl:ReflexiveProperty rdfs:subClassOf owl:ObjectProperty owl:Restriction rdf:type rdfs:Class owl:Restriction rdfs:subClassOf owl:Class owl:SymmetricProperty rdf:type rdfs:Class owl:SymmetricProperty rdfs:subClassOf owl:ObjectProperty owl:Thing rdf:type owl:Class owl:TransitiveProperty rdf:type rdfs:Class owl:TransitiveProperty rdfs:subClassOf owl:ObjectProperty Table Axiomatic Triples Properties OWL RDF-Based Vocabulary owl:allValuesFrom rdf:type rdf:Property owl:allValuesFrom rdfs:domain owl:Restriction owl:allValuesFrom rdfs:range rdfs:Class owl:annotatedProperty rdf:type rdf:Property owl:annotatedProperty rdfs:domain rdfs:Resource owl:annotatedProperty rdfs:range rdfs:Resource owl:annotatedSource rdf:type rdf:Property owl:annotatedSource rdfs:domain rdfs:Resource owl:annotatedSource rdfs:range rdfs:Resource owl:annotatedTarget rdf:type rdf:Property owl:annotatedTarget rdfs:domain rdfs:Resource owl:annotatedTarget rdfs:range rdfs:Resource owl:assertionProperty rdf:type rdf:Property owl:assertionProperty rdfs:domain owl:NegativePropertyAssertion owl:assertionProperty rdfs:range rdf:Property owl:backwardCompatibleWith rdf:type owl:AnnotationProperty owl:backwardCompatibleWith rdf:type owl:OntologyProperty owl:backwardCompatibleWith rdfs:domain owl:Ontology owl:backwardCompatibleWith rdfs:range owl:Ontology owl:bottomDataProperty rdf:type owl:DatatypeProperty owl:bottomDataProperty rdfs:domain owl:Thing owl:bottomDataProperty rdfs:range rdfs:Literal owl:bottomObjectProperty rdf:type owl:ObjectProperty owl:bottomObjectProperty rdfs:domain owl:Thing owl:bottomObjectProperty rdfs:range owl:Thing owl:cardinality rdf:type rdf:Property owl:cardinality rdfs:domain owl:Restriction owl:cardinality rdfs:range xsd:nonNegativeInteger owl:complementOf rdf:type rdf:Property owl:complementOf rdfs:domain owl:Class owl:complementOf rdfs:range owl:Class owl:datatypeComplementOf rdf:type rdf:Property owl:datatypeComplementOf rdfs:domain rdfs:Datatype owl:datatypeComplementOf rdfs:range rdfs:Datatype owl:deprecated rdf:type owl:AnnotationProperty owl:deprecated rdfs:domain rdfs:Resource owl:deprecated rdfs:range rdfs:Resource owl:differentFrom rdf:type rdf:Property owl:differentFrom rdfs:domain owl:Thing owl:differentFrom rdfs:range owl:Thing owl:disjointUnionOf rdf:type rdf:Property owl:disjointUnionOf rdfs:domain owl:Class owl:disjointUnionOf rdfs:range rdf:List owl:disjointWith rdf:type rdf:Property owl:disjointWith rdfs:domain owl:Class owl:disjointWith rdfs:range owl:Class owl:distinctMembers rdf:type rdf:Property owl:distinctMembers rdfs:domain owl:AllDifferent owl:distinctMembers rdfs:range rdf:List owl:equivalentClass rdf:type rdf:Property owl:equivalentClass rdfs:domain rdfs:Class owl:equivalentClass rdfs:range rdfs:Class owl:equivalentProperty rdf:type rdf:Property owl:equivalentProperty rdfs:domain rdf:Property owl:equivalentProperty rdfs:range rdf:Property owl:hasKey rdf:type rdf:Property owl:hasKey rdfs:domain owl:Class owl:hasKey rdfs:range rdf:List owl:hasSelf rdf:type rdf:Property owl:hasSelf rdfs:domain owl:Restriction owl:hasSelf rdfs:range rdfs:Resource owl:hasValue rdf:type rdf:Property owl:hasValue rdfs:domain owl:Restriction owl:hasValue rdfs:range rdfs:Resource owl:imports rdf:type owl:OntologyProperty owl:imports rdfs:domain owl:Ontology owl:imports rdfs:range owl:Ontology owl:incompatibleWith rdf:type owl:AnnotationProperty owl:incompatibleWith rdf:type owl:OntologyProperty owl:incompatibleWith rdfs:domain owl:Ontology owl:incompatibleWith rdfs:range owl:Ontology owl:intersectionOf rdf:type rdf:Property owl:intersectionOf rdfs:domain rdfs:Class owl:intersectionOf rdfs:range rdf:List owl:inverseOf rdf:type rdf:Property owl:inverseOf rdfs:domain owl:ObjectProperty owl:inverseOf rdfs:range owl:ObjectProperty owl:maxCardinality rdf:type rdf:Property owl:maxCardinality rdfs:domain owl:Restriction owl:maxCardinality rdfs:range xsd:nonNegativeInteger owl:maxQualifiedCardinality rdf:type rdf:Property owl:maxQualifiedCardinality rdfs:domain owl:Restriction owl:maxQualifiedCardinality rdfs:range xsd:nonNegativeInteger owl:members rdf:type rdf:Property owl:members rdfs:domain rdfs:Resource owl:members rdfs:range rdf:List owl:minCardinality rdf:type rdf:Property owl:minCardinality rdfs:domain owl:Restriction owl:minCardinality rdfs:range xsd:nonNegativeInteger owl:minQualifiedCardinality rdf:type rdf:Property owl:minQualifiedCardinality rdfs:domain owl:Restriction owl:minQualifiedCardinality rdfs:range xsd:nonNegativeInteger owl:onClass rdf:type rdf:Property owl:onClass rdfs:domain owl:Restriction owl:onClass rdfs:range owl:Class owl:onDataRange rdf:type rdf:Property owl:onDataRange rdfs:domain owl:Restriction owl:onDataRange rdfs:range rdfs:Datatype owl:onDatatype rdf:type rdf:Property owl:onDatatype rdfs:domain rdfs:Datatype owl:onDatatype rdfs:range rdfs:Datatype owl:oneOf rdf:type rdf:Property owl:oneOf rdfs:domain rdfs:Class owl:oneOf rdfs:range rdf:List owl:onProperty rdf:type rdf:Property owl:onProperty rdfs:domain owl:Restriction owl:onProperty rdfs:range rdf:Property owl:onProperties rdf:type rdf:Property owl:onProperties rdfs:domain owl:Restriction owl:onProperties rdfs:range rdf:List owl:priorVersion rdf:type owl:AnnotationProperty owl:priorVersion rdf:type owl:OntologyProperty owl:priorVersion rdfs:domain owl:Ontology owl:priorVersion rdfs:range owl:Ontology owl:propertyChainAxiom rdf:type rdf:Property owl:propertyChainAxiom rdfs:domain owl:ObjectProperty owl:propertyChainAxiom rdfs:range rdf:List owl:propertyDisjointWith rdf:type rdf:Property owl:propertyDisjointWith rdfs:domain rdf:Property owl:propertyDisjointWith rdfs:range rdf:Property owl:qualifiedCardinality rdf:type rdf:Property owl:qualifiedCardinality rdfs:domain owl:Restriction owl:qualifiedCardinality rdfs:range xsd:nonNegativeInteger owl:sameAs rdf:type rdf:Property owl:sameAs rdfs:domain owl:Thing owl:sameAs rdfs:range owl:Thing owl:someValuesFrom rdf:type rdf:Property owl:someValuesFrom rdfs:domain owl:Restriction owl:someValuesFrom rdfs:range rdfs:Class owl:sourceIndividual rdf:type rdf:Property owl:sourceIndividual rdfs:domain owl:NegativePropertyAssertion owl:sourceIndividual rdfs:range owl:Thing owl:targetIndividual rdf:type rdf:Property owl:targetIndividual rdfs:domain owl:NegativePropertyAssertion owl:targetIndividual rdfs:range owl:Thing owl:targetValue rdf:type rdf:Property owl:targetValue rdfs:domain owl:NegativePropertyAssertion owl:targetValue rdfs:range rdfs:Literal owl:topDataProperty rdf:type owl:DatatypeProperty owl:topDataProperty rdfs:domain owl:Thing owl:topDataProperty rdfs:range rdfs:Literal owl:topObjectProperty rdf:type rdf:ObjectProperty owl:topObjectProperty rdfs:domain owl:Thing owl:topObjectProperty rdfs:range owl:Thing owl:unionOf rdf:type rdf:Property owl:unionOf rdfs:domain rdfs:Class owl:unionOf rdfs:range rdf:List owl:versionInfo rdf:type owl:AnnotationProperty owl:versionInfo rdfs:domain rdfs:Resource owl:versionInfo rdfs:range rdfs:Resource owl:versionIRI rdf:type owl:OntologyProperty owl:versionIRI rdfs:domain owl:Ontology owl:versionIRI rdfs:range owl:Ontology owl:withRestrictions rdf:type rdf:Property owl:withRestrictions rdfs:domain rdfs:Datatype owl:withRestrictions rdfs:range rdf:List Table Axiomatic Triples Datatypes OWL RDF-Based Semantics xsd:anyURI rdf:type rdfs:Datatype xsd:anyURI rdfs:subClassOf rdfs:Literal xsd:base64Binary rdf:type rdfs:Datatype xsd:base64Binary rdfs:subClassOf rdfs:Literal xsd:boolean rdf:type rdfs:Datatype xsd:boolean rdfs:subClassOf rdfs:Literal xsd:byte rdf:type rdfs:Datatype xsd:byte rdfs:subClassOf rdfs:Literal xsd:dateTime rdf:type rdfs:Datatype xsd:dateTime rdfs:subClassOf rdfs:Literal xsd:dateTimeStamp rdf:type rdfs:Datatype xsd:dateTimeStamp rdfs:subClassOf rdfs:Literal xsd:decimal rdf:type rdfs:Datatype xsd:decimal rdfs:subClassOf rdfs:Literal xsd:double rdf:type rdfs:Datatype xsd:double rdfs:subClassOf rdfs:Literal xsd:float rdf:type rdfs:Datatype xsd:float rdfs:subClassOf rdfs:Literal xsd:hexBinary rdf:type rdfs:Datatype xsd:hexBinary rdfs:subClassOf rdfs:Literal xsd:int rdf:type rdfs:Datatype xsd:int rdfs:subClassOf rdfs:Literal xsd:integer rdf:type rdfs:Datatype xsd:integer rdfs:subClassOf rdfs:Literal xsd:language rdf:type rdfs:Datatype xsd:language rdfs:subClassOf rdfs:Literal xsd:long rdf:type rdfs:Datatype xsd:long rdfs:subClassOf rdfs:Literal xsd:Name rdf:type rdfs:Datatype xsd:Name rdfs:subClassOf rdfs:Literal xsd:NCName rdf:type rdfs:Datatype xsd:NCName rdfs:subClassOf rdfs:Literal xsd:negativeInteger rdf:type rdfs:Datatype xsd:negativeInteger rdfs:subClassOf rdfs:Literal xsd:NMTOKEN rdf:type rdfs:Datatype xsd:NMTOKEN rdfs:subClassOf rdfs:Literal xsd:nonNegativeInteger rdf:type rdfs:Datatype xsd:nonNegativeInteger rdfs:subClassOf rdfs:Literal xsd:nonPositiveInteger rdf:type rdfs:Datatype xsd:nonPositiveInteger rdfs:subClassOf rdfs:Literal xsd:normalizedString rdf:type rdfs:Datatype xsd:normalizedString rdfs:subClassOf rdfs:Literal rdf:PlainLiteral rdf:type rdfs:Datatype rdf:PlainLiteral rdfs:subClassOf rdfs:Literal xsd:positiveInteger rdf:type rdfs:Datatype xsd:positiveInteger rdfs:subClassOf rdfs:Literal owl:rational rdf:type rdfs:Datatype owl:rational rdfs:subClassOf rdfs:Literal owl:real rdf:type rdfs:Datatype owl:real rdfs:subClassOf rdfs:Literal xsd:short rdf:type rdfs:Datatype xsd:short rdfs:subClassOf rdfs:Literal xsd:string rdf:type rdfs:Datatype xsd:string rdfs:subClassOf rdfs:Literal xsd:token rdf:type rdfs:Datatype xsd:token rdfs:subClassOf rdfs:Literal xsd:unsignedByte rdf:type rdfs:Datatype xsd:unsignedByte rdfs:subClassOf rdfs:Literal xsd:unsignedInt rdf:type rdfs:Datatype xsd:unsignedInt rdfs:subClassOf rdfs:Literal xsd:unsignedLong rdf:type rdfs:Datatype xsd:unsignedLong rdfs:subClassOf rdfs:Literal xsd:unsignedShort rdf:type rdfs:Datatype xsd:unsignedShort rdfs:subClassOf rdfs:Literal rdf:XMLLiteral rdf:type rdfs:Datatype rdf:XMLLiteral rdfs:subClassOf rdfs:Literal Table Axiomatic Triples Facets OWL RDF-Based Semantics rdf:langRange rdf:type owl:DatatypeProperty rdf:langRange rdfs:domain rdfs:Resource rdf:langRange rdfs:range rdfs:Literal xsd:length rdf:type owl:DatatypeProperty xsd:length rdfs:domain rdfs:Resource xsd:length rdfs:range rdfs:Literal xsd:maxExclusive rdf:type owl:DatatypeProperty xsd:maxExclusive rdfs:domain rdfs:Resource xsd:maxExclusive rdfs:range rdfs:Literal xsd:maxInclusive rdf:type owl:DatatypeProperty xsd:maxInclusive rdfs:domain rdfs:Resource xsd:maxInclusive rdfs:range rdfs:Literal xsd:maxLength rdf:type owl:DatatypeProperty xsd:maxLength rdfs:domain rdfs:Resource xsd:maxLength rdfs:range rdfs:Literal xsd:minExclusive rdf:type owl:DatatypeProperty xsd:minExclusive rdfs:domain rdfs:Resource xsd:minExclusive rdfs:range rdfs:Literal xsd:minInclusive rdf:type owl:DatatypeProperty xsd:minInclusive rdfs:domain rdfs:Resource xsd:minInclusive rdfs:range rdfs:Literal xsd:minLength rdf:type owl:DatatypeProperty xsd:minLength rdfs:domain rdfs:Resource xsd:minLength rdfs:range rdfs:Literal xsd:pattern rdf:type owl:DatatypeProperty xsd:pattern rdfs:domain rdfs:Resource xsd:pattern rdfs:range rdfs:Literal Table Additional Axiomatic Triples Classes Properties RDFS Vocabulary rdfs:Class rdfs:subClassOf owl:Class rdfs:comment rdf:type owl:AnnotationProperty rdfs:comment rdfs:domain rdfs:Resource rdfs:comment rdfs:range rdfs:Literal rdfs:Datatype rdfs:subClassOf owl:DataRange rdfs:isDefinedBy rdf:type owl:AnnotationProperty rdfs:isDefinedBy rdfs:domain rdfs:Resource rdfs:isDefinedBy rdfs:range rdfs:Resource rdfs:label rdf:type owl:AnnotationProperty rdfs:label rdfs:domain rdfs:Resource rdfs:label rdfs:range rdfs:Literal rdfs:Literal rdf:type rdfs:Datatype rdf:Property rdfs:subClassOf owl:ObjectProperty rdfs:Resource rdfs:subClassOf owl:Thing rdfs:seeAlso rdf:type owl:AnnotationProperty rdfs:seeAlso rdfs:domain rdfs:Resource rdfs:seeAlso rdfs:range rdfs:Resource Appendix: Relationship Direct Semantics section comparesthe OWL RDF-Based Semanticswith OWL Direct Semantics[OWL Direct Semantics].While OWL RDF-Based Semantics based RDF Semantics specification[RDF Semantics],the OWL Direct Semanticsis description logic style semantics.Several fundamental differencesexist semantics,but there also strong relationship basically stating OWL RDF-Based Semantics reflect logical conclusions OWL Direct Semantics.This means OWL Direct Semanticscanin sensebe regarded semantics subset OWL RDF-Based Semantics. Technically,the comparison be performedby comparing sets entailmentsthat hold semantics, respectively.The definition OWL RDF-Based entailment was given Section document,while definition OWL Direct entailmentis provided inSection OWL Direct Semantics Direct Semantics].In cases,entailments are defined pairs ontologies,and such ordered pair ontologies be called entailment queryin section. Comparing semantics means entailmentswill only be meaningfulif entailment queriesallow applyingboth OWL RDF-Based Semanticsand OWL Direct Semanticsto order ensure comparison be restricted entailment queries,for left-hand side right-hand side ontologies are bothOWL DL ontologies RDF graph form.These are RDF graphs applying reverse RDF mapping[OWL RDF Mapping],can be transformedinto corresponding OWL DL ontologies Functional Syntax formaccording functional style syntax defined OWL Structural Specification Specification],and further meetall restrictions OWL DL ontologiesthat are specified inSection OWL Structural Specification Specification].In fact,these restrictions be mutually met ontologies occur entailment query,i.e.all restrictions need be satisfiedas ontologies be part single ontology.Any entailment query conditions defined herewill be called anOWL DL entailment query. Ideally,the relationship OWL RDF-Based Semantics OWL Direct Semanticswould be form thatevery OWL DL entailment querythat OWL Direct entailmentis also OWL RDF-Based entailment.However,this desirable relationship hold generaldue variety differencesthat exist OWL RDF-Based Semanticsand OWL Direct Semantics,as demonstrated inSection Fortunately,the problems resulting semantic differencescan be overcomein way OWL DL entailment querythere onefor desired entailment relationship indeed new entailment query issemantically equivalent original entailment queryunder OWL Direct Semantics.This gist correspondence theorem,which be presented Section proof theorem,given Section further demonstratethat such substitute OWL DL entailment querycan always be algorithmically constructedby means simple syntactic transformations. Example Semantic Differences section showthat differences existbetweenthe OWL RDF-Based Semantics OWL Direct Semantics,and be demonstrated semantic differencescomplicate comparisonof semanticsin terms entailments.An example OWL DL entailment query be given,which happen be OWL Direct entailmentwithout being OWL RDF-Based entailment.The section explain different reasonsand provide resolutionof turn example entailment querycan be syntactically transformed anotherOWL DL entailment querythat OWL Direct entailmentandan OWL RDF-Based entailment,while being semantically unchanged compared original entailment queryunder OWL Direct Semantics.This example motivatethe OWL correspondence theoremin Section proof Section example entailment query following pair G1* G2* RDF graphs: G1* ex:o1 rdf:type owl:Ontology ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c1 rdfs:subClassOf ex:c2 G2* ex:o2 rdf:type owl:Ontology ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c3 rdf:type owl:Class ex:c1 rdfs:subClassOf _:x _:x rdf:type owl:Class _:x owl:unionOf ex:c2 ex:c3 ex:c3 rdfs:label G1* G2* areOWL DL ontologies RDF graph formand therefore be mapped reverse RDF mapping RDF Mapping]to following OWL DL ontologies Functional Syntax formF(G1*) F(G2*): F(G1*) Ontology( ex:o1 Declaration( Class( ex:c1 Declaration( Class( ex:c2 SubClassOf( ex:c1 ex:c2 F(G2*) Ontology( ex:o2 Declaration( Class( ex:c1 Declaration( Class( ex:c2 Declaration( Class( ex:c3 SubClassOf( ex:c1 ObjectUnionOf( ex:c2 ex:c3 AnnotationAssertion( rdfs:label ex:c3 Note thatF(G1*) F(G2*)mutually meet restrictions OWL DL ontologiesas specified Section OWL Structural Specification Specification].For example,none IRIs being declared class F(G1*)is declared datatype F(G2*),since not be allowed OWL DL entailment query. thatF(G1*) OWL Direct F(G2*).To show axioms F(G1*)and(5) F(G2*)have be considered.None other statements ontologies are relevant OWL Direct entailment hold,since do not have formal meaning OWL Direct Semantics.However,it turns RDF graph G1* not OWL RDF-Based entail G2*,for reasons discussed detail now. Reason Annotation F(G2*).The ontology F(G2*)contains annotation OWL Direct Semanticsdoes not give formal meaning toannotations.In contrast, OWL RDF-Based Semantics RDF triple occurring RDF graph formal meaning,includingthe corresponding annotation triple G2*.Since annotation tripleonly G2* not G1*,there exist OWL RDF-Based interpretationsthat satisfy G1*without satisfying triple G2*.Hence,G1*does not OWL RDF-Based entail G2*. Resolution Reason annotation triple G2*will be removed,which avoid requiring OWL RDF-Based interpretations interpret triple.The changed RDF graphs still beOWL DL ontologies RDF graph form,since annotations are strictly optional OWL DL ontologiesand therefore be omitted.Also, operation not change formal meaning ontologies OWL Direct Semantics,since annotations do not have formal meaning semantics. Reason Entity Declaration exclusively F(G2*).The ontology F(G2*)contains entity declaration class IRIex:c3 there corresponding entity declaration F(G1*).The OWL Direct Semantics not give formal meaning toentity declarations,while OWL RDF-Based Semantics formal meaningto corresponding declaration statement G2*.The consequences are analog described reason Resolution Reason declaration statement G2*will be copied G1*.An OWL RDF-Based interpretation satisfies modified graph G1*will then also satisfy declaration statement.The changed RDF graphs still beOWL DL ontologies RDF graph form,since copied declaration statement not conflict other entity declarations G1*.Also, operation not change formal meaning ontologiesunder OWL Direct Semantics, entity declarations do not have formal meaning semantics. Reason Different Ontology IRIs F(G1*) F(G2*).The ontology IRIs ontologies,given F(G1*) F(G2*),differ other.The OWL Direct Semantics not give formal meaning ontology headers,while OWL RDF-Based Semantics formal meaningto corresponding header triples(1) G1*and(1) G2*.Since header triples differ other,the consequences are analog described reason Resolution Reason IRIin subject position header triple G2* changed blank node.Due existential semantics blank nodes OWL RDF-Based Semanticsthe resulting triple then be entailedby triple G1*.The changed RDF graphs still beOWL DL ontologies RDF graph form,since ontology IRI optional OWL DL ontology.(Note, however, have been error simply remove triple G2*,since OWL DL ontology required contain ontology header.)Also, operation not change formal meaning ontologies OWL Direct Semantics,since ontology headers do not have formal meaning semantics. Reason Class Expression F(G2*).Axiom F(G2*)contains class expressionthat union classesdenoted byex:c2andex:c3.Within G2*,this class expression represented triples having blank node respective subject position.The way OWL RDF-Based Semantics triplesdiffers waythe OWL Direct Semantics class expressionin axiom F(G2*). OWL Direct Semantics classes sets, i.e. subsets universe.Thus,the IRIsex:c2andex:c3in F(G2*)denote sets,and class expressionin axiom F(G2*)therefore setthat union sets. OWL RDF-Based Semantics,on other hand,treats classes individuals,i.e. members universe.While class OWL RDF-Based Semantics certain subset universe,namely class extension,this set actually distinguished class itself.For given classesit ensured OWL RDF-Based Semantics,just OWL Direct Semantics, union class extensions always existas subset universe.However,there guaranteethat there also exist individual universethat set union class extension. OWL RDF-Based Semantics,triple G2*essentially claims class being union other classes. existence such union classis not ensured G1*,there be OWL RDF-Based interpretationsthat satisfy G1*without satisfyingtriple G2*.Hence,G1*does notOWL RDF-Based entailG2*. Resolution Reason triples G2*are copied G1*together new triple"_:x owl:equivalentClass _:x".In addition,for IRIex:c3,which only union class expressionbut not G1*,an entity declaration addedto G1*by resolution reason OWL RDF-Based interpretation satisfies modified graph G1*,then triples G2*will now be satisfied.The changed RDF graphs still beOWL DL ontologies RDF graph form,since whole set added triples validly OWL axiom,and none restrictions OWL DL ontologies hurt.Also, operation not change formal meaning ontologies OWL Direct Semantics,since added equivalence axiom tautology semantics. Note have been error simply copy triples G2* G1*,without also adding new triple"_:x owl:equivalentClass _:x".This have produced class expression connection axiom ontology.An OWL DL ontology basically set axiomsand not allow occurrence class expressions.This reason actually class expression axiom.It have also been wrong use arbitrary axiom such embedding,since be ensured formal meaning original ontology not changeunder OWL Direct Semantics.However,any tautological axiomthat original class expressionwould have been sufficient purpose well. Complete Resolution: Transformed Entailment Query. Combining resolutions reasonsleads following new pair RDF graphs( G1 G2 G1 ex:o1 rdf:type owl:Ontology ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c3 rdf:type owl:Class ex:c1 rdfs:subClassOf ex:c2 _:x owl:equivalentClass _:x _:x rdf:type owl:Class _:x owl:unionOf ex:c2 ex:c3 G2 _:o rdf:type owl:Ontology ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c3 rdf:type owl:Class ex:c1 rdfs:subClassOf _:x _:x rdf:type owl:Class _:x owl:unionOf ex:c2 ex:c3 following list changes compared original RDF graphsG1* G2*: Resolution Reason Triple G2* been removed, i.e. there corresponding annotation triple G2. Resolution Reason Declaration): Triple G2* been copied G1*, becoming triple G1. Resolution Reason IRIs): IRI subject position triple G2* been changed blank node, becoming triple G2. Resolution Reason Expression): Triples G2* have been copied G1* together new triple owl:equivalentClass _:x", becoming triples G1. G1 G2are againOWL DL ontologies RDF graph formand be mapped followingOWL DL ontologies Functional Syntax formF(G1) F(G2),which again mutually meet restrictions OWL DL ontologies: F(G1) Ontology( ex:o1 Declaration( Class( ex:c1 Declaration( Class( ex:c2 Declaration( Class( ex:c3 SubClassOf( ex:c1 ex:c2 EquivalentClasses( ObjectUnionOf( ex:c2 ex:c3 ObjectUnionOf( ex:c2 ex:c3 F(G2) Ontology( Declaration( Class( ex:c1 Declaration( Class( ex:c2 Declaration( Class( ex:c3 SubClassOf( ex:c1 ObjectUnionOf( ex:c2 ex:c3 said earlier,all applied changes preserve formal meaning original OWL DL ontologiesunder OWL Direct Semantics.Hence,it still casethat F(G1)OWL Direct entailsF(G2).However, due syntactic transformationthe situation changed OWL RDF-Based Semantics:it now possible show,by following lines argumentation resolutions different reasons given above,that G1 OWL RDF-Based G2as well. Correspondence Theorem section presents OWL correspondence theorem,which semantic expressivity OWL RDF-Based Semantics OWL Direct Semantics.The basically states OWL RDF-Based Semantics able reflect semantic conclusions OWL Direct Semantics,where notion conclusion"is technically expressed terms entailment. However,as discussed inSection exist semantic differences OWL RDF-Based Semantics OWL Direct Semantics,which do not allow statingthat OWL DL entailment query OWL Direct entailmentwill always also be OWL RDF-Based entailment. Nevertheless,it still be ensured thatany given OWL DL entailment querycan be substituted OWL DL entailment queryin way substitute entailment query desired relationship really hold,while preserving formal meaning compared original entailment queryunder OWL Direct Semantics. fact, only makes seemingly weak assertion such substitute entailment query always exist.But actual proof Section be more concretein substitute given OWL DL entailment querywith variantthat be algorithmically constructedby applying set simple syntactic transformationsto original entailment query.One get idea worksfrom Section Technical Note Corresponding Datatype Maps.A distinction format ofan OWL RDF-Based datatype map,as defined Definition format OWL Direct datatype map,as defined inSection OWL Direct Semantics Direct Semantics].It however, possible translate betweenan OWL RDF-Based datatype map Dandthe corresponding OWL Direct datatype map F(D)in following way: OWL RDF-Based datatype map D,the corresponding OWL Direct datatype mapF(D) NDT NLS NFS DT LS FS Direct Semantics]is given Datatype Names: NDT defined set IRIs u, there datatype d, such u d D. Lexical Space: datatype name u NDT, set NLS(u) LS(d), u d D. Facet Space: datatype name u NDT, set NFS(u) FS(d), u d D. Value Space: datatype name u NDT, set DT VS(d), u d D. Lexical-to-Value Mapping: datatype name u NDT lexical form NLS(u), set u LS L2V(d)(a), u d D. Facet-to-Value Mapping: datatype name u NDT facet-value pair F NFS(u), set F FS F2V(d)(( F u d D. Theorem Correspondence Theorem): Let D be OWL RDF-Based datatype mapaccording Definition F(D) being Direct datatype map according toSection OWL Direct Semantics Direct Semantics]that D according thetechnical note corresponding datatype maps.Let G1* G2* be RDF graphsthat areOWL DL ontologies RDF graph form,withF(G1*) F(G2*)being OWL DL ontologies Functional Syntax form[OWL Specification]that result applying reverse RDF mapping[OWL RDF Mapping] toG1* G2*,respectively.LetF(G1*) F(G2*)mutually meet restrictions OWL DL ontologiesas specified Section OWL Structural Specification Specification]. Then, there exist RDF graphsG1 G2that areOWL DL ontologies RDF graph form,such following relationships hold,withF(G1) F(G2)being DL ontologies Functional Syntax formthat result applying reverse RDF mappingtoG1 G2,respectively: F(G1) F(G2) mutually meet restrictions OWL DL ontologies. F(G1) OWL Direct F(G1*) respect F(D), F(G1*) OWL Direct F(G1) respect F(D). F(G2) OWL Direct F(G2*) respect F(D), F(G2*) OWL Direct F(G2) respect F(D). F(G1) OWL Direct F(G2) respect F(D), then G1 OWL RDF-Based G2 respect D. Proof Correspondence Theorem sketch proof Theorem Correspondence Theorem)in Section proof sketch providesthe basic line argumentation showing theorem.However, complexity reasons,some technical aspects are only coarsely treated,and proof sketch also refrains considering full amount OWL language constructs.For certain steps proofthere are example calculationsthat focus only small fraction language constructs,but be taken hint complete proof taking account feature OWL RDF-Based Semantics be constructed principle. complete proof make use observation definitions OWL Direct Semantics OWL RDF-Based Semantics, technical differences outlined Section are closely aligned respect different language constructs OWL proof sketch make use approach be called section,and now be introduced.The basic idea substitute original pair RDF graphs OWL DL entailment queryby entailment queryhaving same semantic characteristics OWL Direct Semantics,but technical differences semantics specificationshave relevant consequencesunder OWL RDF-Based Semantics anymore.A concrete example application approachwas given Section Definition pair RDF graphs( G1 G2 calledbalanced,if only ifG1 G2 are OWL DL ontologies RDF graph form,such following conditions hold,withF(G1) F(G2)being OWL DL ontologies Functional Syntax form[OWL Specification]that result applying reverse RDF mapping[OWL RDF Mapping] toG1 G2,respectively: F(G1) F(G2) mutually meet restrictions OWL DL ontologies specified Section OWL Structural Specification Specification]. Nodes G1 G2: IRI u occurring G1 G2 non-built-in entity F(G1) F(G2), respectively, graph entity type T u, declaration statement form rdf:type t", t vocabulary class IRI corresponding T Table OWL RDF Mapping RDF Mapping] Section OWL Structural Specification Specification]); plain typed literal occurring G2 also G1 Section OWL Structural Specification Specification]). G2 exactly ontology header consisting single RDF triple form rdf:type owl:Ontology", blank node ontology IRI used G1, alternatively equal ontology IRI Table OWL RDF Mapping RDF Mapping]). G2 not contain: RDF encoding annotation Sections Table OWL RDF Mapping RDF Mapping]); statement ontology property such deprecation statement based Table OWL RDF Mapping RDF Mapping]); annotation property axiom based Table OWL RDF Mapping RDF Mapping]). following sub graphs G2 also sub graph G1: RDF encoding entity declaration Table OWL RDF Mapping RDF Mapping]); RDF encoding property expression Table OWL RDF Mapping RDF Mapping]); RDF encoding class expression Tables OWL RDF Mapping RDF Mapping]); RDF encoding data range expression Tables OWL RDF Mapping RDF Mapping]); RDF sequence Table OWL RDF Mapping RDF Mapping]). Balancing Lemma:An algorithm existsthat valid inputand following input/output behavior: valid input algorithm given byall pairs RDF graphs( G1* G2* G2*are OWL DL ontologies RDF graph form,withF(G1*) F(G2*)being OWL DL ontologies Functional Syntax form[OWL Specification]that result applying reverse RDF mapping[OWL RDF Mapping] toG1* G2*,respectively.Further,F(G1*) F(G2*)have mutually meet restrictions OWL DL ontologiesas specified Section OWL Structural Specification Specification]. valid input,the output algorithmis pair RDF graphs G1 G2 G2are OWL DL ontologies RDF graph form,such OWL RDF-Based datatype map Daccording Definition following relationships hold,withF(G1) F(G2)being OWL DL ontologies Functional Syntax formthat result applying reverse RDF mappingtoG1 G2,respectively,and F(D)being OWL Direct datatype map according toSection OWL Direct Semantics Direct Semantics]that D according technical note corresponding datatype mapsin Section pair G1 G2 balanced. F(G1) OWL Direct F(G1*) respect F(D), F(G1*) OWL Direct F(G1) respect F(D). F(G2) OWL Direct F(G2*) respect F(D), F(G2*) OWL Direct F(G2) respect F(D). Proof Balancing Lemma: Let graph pair( G1* G2* valid input.The resulting RDF graphs G1 G2 are constructed copies G1* G2*,respectively. initial versions G1 G2 are OWL DL ontologies RDF graph form,the canonical parsing process computing reverse RDF mapping,as described Section OWL RDF Mapping RDF Mapping], be applied.Based CP, possible identify graphs entity types non-built-in IRI, blank nodes correspond anonymous individuals, sub graphs correspond OWL language constructs headers, declarations, expressions, axioms annotations) described OWL Structural Specification Specification]. Based observation, following steps are performed: Consistently substitute blank nodes G2 such G1 G2 have common blank nodes. Apply CP G1 G2 changing graphs) identify entity types IRIs, anonymous individuals, sub graphs encoding OWL language constructs. sub graph g G2: remove g G2, g RDF encoding annotation, deprecation statement, annotation property axiom. sub graph g G2 corresponding ontology header F(G2): substitute g G2 triple form rdf:type owl:Ontology", new blank node not yet used G2. non-built-in IRI u G1 G2 entity type T u identified CP: add G1 G2, respectively, RDF triple rdf:type t", t vocabulary class IRI corresponding T. plain typed literal L G2: add G1 RDF triple rdfs:comment L", o IRI blank node ontology header triple rdf:type owl:Ontology" G1. sub graph g G2 RDF encoding entity declaration: add g G1. sub graph g G2 RDF encoding property expression root blank node x: add g G1 together RDF triple owl:equivalentProperty sub graph g G2 RDF encoding class expression root blank node x: add g G1 together RDF triple owl:equivalentClass sub graph g G2 RDF encoding data range expression root blank node x: g part data property restriction expression, then nothing needs be done, comprising restriction expression covered treatment class expressions, therefore g G1 well. Otherwise, add declaration triple G1 new data property p not yet occur G1 G2. Then, RDF encoding r universal data property restriction expression property p created g. Let r have new root blank node y. Add r G1 together RDF triple owl:equivalentClass y". sub graph g G2 RDF sequence root blank node x, not occur RDF encoding language constructs already treated earlier steps, i.e. g part encoding axiom: create RDF encoding r enumeration class expression new root blank node y having main RDF triple owl:oneOf Then, add r G1 together RDF triple owl:equivalentClass y". Additionally, IRI u being member RDF sequence, add G1 typing triple rdf:type owl:NamedIndividual". sequence members blank node root node property expression class expression then select new IRI w not yet occurring G1, consistently replace w everywhere r, add G1 triple owl:equivalentProperty owl:equivalentClass respectively, add G1 triples rdf:type owl:NamedIndividual" rdf:type t", t vocabulary class IRI appropriate entity type expression e. further treatment needed, treated earlier steps covering expressions. following shown claims balancing lemma hold. Existence Terminating Algorithm.An algorithm existsfor mapping input graph pair( G1* G2* output graph pair( G1 G2 CP step described form algorithmin OWL RDF Mapping RDF Mapping],and other stepscan obviously be performed algorithmically.The algorithm CP arbitrary input graphs,and other stepscan obviously be executed finite time. B: Resulting RDF Graphs are OWL DL Ontologies.The RDF graphsG1 G2are OWL DL ontologies RDF graph formthat mutually meet restrictions OWL DL ontologies,since original RDF graphs G1* G2*have feature,and steps described abovetransforms pair RDF graphs featureagain pair RDF graphs feature,for following reasons: consistent substitution blank nodes step not change structure OWL DL ontology. application CP step not change graphs. Annotations, deprecation statements annotation property axioms are optional information OWL DL ontology therefore be omitted step ontology header OWL DL ontology require existence ontology IRI ontology properties, so substitution ontology header step valid operation. entity particular entity type there explicitly given entity declaration, then entity declaration be added, done step allowed add arbitrary annotations ontology header OWL DL ontology, done step Entity declarations be copied G2 G1 step conflict, original ontologies have been assumed mutually meet restrictions OWL DL ontologies regarding different entity declarations same IRI IRI not be name object property data property). Adding G1 axiom claims equivalence property expression class expression expression already G2, allowed operation, original ontologies are assumed mutually meet restrictions OWL DL ontologies concerning property class expressions, syntactic restrictions exist specific use equivalence axioms. case data ranges sufficient note placing universal property restrictions arbitrary complex) property expressions allowed OWL DL. rest argumentation lines treatment class expressions step treatment RDF sequences step First, enumeration class expressions being constructed RDF sequences are syntactically valid OWL DL, enumerated entries are IRIs construction. Second, there restriction OWL DL disallowing axioms claim equivalence enumeration class expressions Third, punning OWL DL given non-built-in IRI entity type be additionally declared named individual. Forth, there OWL DL restriction forbidding add entity declaration new not elsewhere used) IRI assert denotation new IRI be equivalent existing property class expression. Hence, resulting ontologies still mutually meet syntactic restrictions OWL DL ontologies. C: Resulting Pair RDF Graphs Balanced.All conditions balanced pairs RDF graphsare met pair( G1 G2 following reasons: Condition already been shown paragraph B G1 G2 mutually meet restrictions OWL DL ontologies. Conditions nodes G1 G2 are met steps respectively. Condition ontology headers G2 satisfied step always applying anonymous ontology header. Conditions annotations, deprecation statements annotation property axioms G2, respectively, are satisfied step Condition statements ontology properties implicitly satisfied step substitution ontology header G2 existing statements ontology properties. Condition entity declarations G2 being reflected G1 satisfied step Conditions property, class data range expressions G2, respectively, being reflected G1 are met steps respectively. Condition RDF sequences G2 being reflected G1 satisfied step D: Resulting Ontologies are semantically equivalent Original Ontologies OWL Direct Semantics. F(G1) semantically equivalent F(G1*),since F(G1) F(G1*) only additional entity declarations have formal meaning OWL Direct Semantics; additional annotations have formal meaning; additional tautological axioms do not change formal meaning; F(G2) semantically equivalent F(G2*),since F(G2) F(G2*) only differently labeled anonymous individuals formal meaning OWL Direct Semantics unchanged, anonymous individuals are existentially interpreted; missing annotations, deprecation statements annotation property axioms have formal meaning; modified ontology header formal meaning; additional entity declarations have formal meaning. End Proof Balancing Lemma. following,the correspondence be proven. Assume premises correspondence are truefor given pair G1* G2* RDF graphs. applying balancing lemma,which existence corresponding RDF graphsG1 G2that are OWL DL ontologies RDF graph form,and meet definition balanced graph pairs.Let F(G1) F(G2)be corresponding OWL DL ontologies Functional Syntax form.Then,the claimed relationship correspondence theoremfollows directly relationship balancing lemma condition definition balanced graph pairs.Further, claimed relationships correspondence theoremfollow directly relationships balancing lemma, respectively. rest proof treat claimed relationship correspondence theorem,which states F(G1) OWL Direct F(G2) respect F(D), then G1 OWL RDF-Based G2 respect D.For see,an arbitrary OWL RDF-Based interpretation be selected OWL RDF-Based satisfies G1. closely corresponding OWL Direct interpretation J be constructed,and then be shown J OWL Direct satisfies F(G1).Since was assumed thatF(G1) OWL Direct F(G2),it follow J OWL Direct satisfies F(G2).Based result, then be possible show also OWL RDF-Based satisfies G2.Since was arbitrarily selected,this mean G1 OWL RDF-Based G2. Step Selection Pair Corresponding Interpretations. LetF(G1) OWL Direct entail F(G2) w.r.t. F(D),and let be OWL RDF-Based interpretationof vocabulary VI w.r.t. D,such OWL RDF-Based satisfies G1. pair G1 G2 balanced,there exist entity declarationsin F(G1)for entity typeof non-built-in IRIoccurring G1:For entity declarationof form"Declaration(T(u))"in F(G1),such T entity type IRI u,a typing triple form"u rdf:type t"exists G1,where t vocabulary class IRI representing part universe Ithat T.Since OWL RDF-Based satisfies G1,all declaration typing triples are OWL RDF-Based satisfied thus non-built-in IRIs G1are instances declared parts universe I. vocabularyVJ VJOP VJDP VJI VJDT VJLT VJFA)of OWL Direct interpretation J w.r.t. datatype map F(D) now constructed set VJC classes IRIs VI are declared classes F(G1), together required class names listed Section OWL Direct Semantics Direct Semantics]. set VJOP object properties IRIs VI are declared object properties F(G1), together required object property names listed Section OWL Direct Semantics Direct Semantics]. set VJDP data properties IRIs VI are declared data properties F(G1), together required data property names listed Section OWL Direct Semantics Direct Semantics]. set VJI individuals IRIs VI are declared named individuals F(G1), additionally anonymous individuals occurring F(G1) F(G2). set VJDT datatypes defined according Section OWL Direct Semantics Direct Semantics] w.r.t. datatype map F(D), together other IRIs VI are declared datatypes F(G1). set VJLT literals defined according Section OWL Direct Semantics Direct Semantics] w.r.t. datatype map F(D). set VJFA facet-literal pairs defined according Section OWL Direct Semantics Direct Semantics] w.r.t. datatype map F(D). OWL Direct interpretationJ ?I ?D C OP DP DT LT FA now defined follows.The object data domains J are identified universe IR set data values LV respectively,i.e.,?I IR and?D LV.The class interpretation function C,the object property interpretation function OP,the data property interpretation function DP, datatype interpretation function DT,the literal interpretation function LT, facet interpretation function FAare defined according toSection OWL Direct Semantics Direct Semantics].Specifically,for non-built-in IRI u occurring F(G1): u declared class, then set uC ICEXT(I(u)), G1 triple rdf:type owl:Class", i.e., IC. u declared object property, then set uOP IEXT(I(u)), G1 triple rdf:type owl:ObjectProperty", i.e., IP. u declared data property, then set uDP IEXT(I(u)), G1 triple rdf:type owl:DatatypeProperty", i.e., IODP. u declared named individual, then set uI G1 triple rdf:type owl:NamedIndividual", i.e., IR. u declared datatype, then set uDT ICEXT(I(u)), G1 triple rdf:type rdfs:Datatype", i.e., IDC. Notes: literal occurring G1 mapped reverse RDF mapping same literal F(G1), formal meaning well-formed literal analog OWL RDF-Based Semantics OWL Direct Semantics. blank node b occurring G1 anonymous individual written same blank node b F(G1). OWL RDF-Based Semantics OWL Direct Semantics treat anonymous individuals analog way existential variables defined locally given ontology, i.e. individual universe occurrences b ontology be mapped Section RDF Semantics Semantics] precise definition blank nodes are treated OWL RDF-Based Semantics). Hence, same mapping b be used J. G1 also contain declarations annotation properties. annotation properties have formal meaning OWL Direct Semantics, OWL Direct interpretation J not treat definition possible J have nonseparated vocabulary according Section OWL Structural Specification Specification]. G1 OWL DL ontology RDF graph form, allowed same IRI u be declared more individual name, class name datatype name, object property name data property name. OWL RDF-Based interpretation IRI u always denote same individual universe IR, additionally have class extension property extension, OWL Direct interpretation J, however, u denote individual name element ?I, class name subset ?I, datatype name subset ?D, object property name subset ?I ?I, data property name subset ?I ?D. Step Satisfaction F(G1) OWL Direct Interpretation. Based premise OWL RDF-Based satisfies G1,it be shown J OWL Direct satisfies F(G1).For hold,it be sufficient OWL Direct satisfies axiom occurring F(G1).Let gA be sub graph G1that mapped reverse RDF mapping.The basic idea roughly be described OWL RDF-Based interpretation,all OWL RDF-Based semantic conditions are met I.Due close alignment definitions OWL RDF-Based Semanticsand OWL Direct Semantics,OWL RDF-Based semantic conditions existthat semantically correspondto definition interpretation axiom A.In particular,the antecedent semantic conditionswill become true,if RDF-encoding i.e. graph gA, satisfied(in case semantic conditionthis generally be left-to-right direction condition). Now,all RDF triples gA are OWL RDF-Based satisfied OWL RDF-Based satisfies G1.Hence,the antecedent semantic condition true, therefore consequent true well.This reveal certain semantic relationshipthat according denotations IRIs, literals anonymous individuals occurring gA,which, roughly speaking,expresses meaning OWL axiom A.Because close semantic correspondence OWL Direct interpretation J analog semantic relationship according Jbetween denotations theIRIs, literals anonymous individuals occurring A.This semantic relationshipturns be compatiblewith formal meaning axiom Aas specified OWL Direct Semantics,i.e. J satisfies A. basic idea now demonstrated more detailfor single example axiom F(G1),which be taken hint complete proof taking account feature OWL RDF-Based Semanticscould be constructed principle. Let be following OWL axiom F(G1): SubClassOf(ex:c1 ObjectUnionOf(ex:c2 ex:c3)) let gA be corresponding sub graph G1that being mapped reverse RDF mapping, namely gA ex:c1 rdfs:subClassOf _:x _:x rdf:type owl:Class _:x owl:unionOf ex:c2 ex:c3 pair G1 G2 balanced,G1 typing triples ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c3 rdf:type owl:Class correspond class entity declarations F(G1) IRIs"ex:c1", declaration typing triples are OWL RDF-Based satisfied been postulated OWL RDF-Based satisfies G1.Hence,by applying semantics rdf:type(seeSection RDF Semantics Semantics]), IRIs denote classes, precisely: IC IC IC OWL RDF-Based interpretation,it OWL RDF-Based semantic conditions,and OWL RDF-Based satisfies G1,all triples gA are OWL RDF-Based satisfied.This left-to-right directions semantic conditionsfor subclass axioms Section union class expressions("owl:unionOf",see Section results following semantic relationship extensions classes aboveaccording ICEXT(I(ex:c1)) ICEXT(I(ex:c2)) ICEXT(I(ex:c3)) applying definition J,one conclude following semantic relationshipholds denotations class names occurring Aaccording J: C C C semantic relationship compatible formal meaning axiom OWL Direct Semantics.Hence, J OWL Direct satisfies A. J OWL Direct satisfies F(G1),and been postulated thatF(G1) OWL Direct F(G2), OWL Direct satisfies F(G2). Step Satisfaction G2 OWL RDF-Based Interpretation. last step beto show OWL RDF-Based satisfies G2.For hold,I needs OWL RDF-Based satisfy triple occurring G2.The basic idea roughly be described First: According conditions ground graphs"in Section RDF Semantics specification[RDF Semantics],all IRIs literals used RDF triples G2need be vocabulary VI I.This true following reason:Since pair G1 G2 balanced,all IRIs literals occurring G2 do also occur G1.Since satisfies G1,all IRIs literals G1,including G2,are contained VI due semantic conditions ground graphs. Second:If set RDF triples OWL language constructthat not interpreted OWL Direct Semantics,such annotations,then G2 contain such set RDF triplesonly are also included G1.The reason isthat such triples there general, exist OWL RDF-Based interpretationsonly satisfying graph G1 not G2,which render pair G1 G2 nonentailment(an exception are RDF triplesthat are trueunder OWL RDF-Based interpretation).Since pair G1 G2 balanced,G2 not contain RDF encoding annotations, statements ontology properties, deprecation statements annotation property axioms.Hence,there are corresponding RDF triples need be satisfied I. Third:Since G2 OWL DL ontology RDF graph form,the graph partitioned reverse RDF mapping RDF Mapping]into sub graphs corresponding toeither ontology headers,entity declarationsor axioms,where axioms further consist different kinds expressions,such Boolean class expressions.It be shown triples such sub graph are OWL RDF-Based satisfied I. ontology headers:Let be ontology header F(G2)and let gA be corresponding sub graph G2.Since pair G1 G2 balanced,gA encoded single RDF triple form"x rdf:type owl:Ontology",where IRI blank node.Since G1 OWL DL ontology RDF graph form,G1 also encoding ontology headerincluding triple g1 form"y rdf:type owl:Ontology",where y IRI blank node.Since OWL RDF-Based satisfies G1,g1 satisfied I.If y are IRIs,then, due balancing, y,and therefore gA g1,i.e. gA OWL RDF-Based satisfied I.Otherwise, balancing forces be blank node,i.e. treated existential variable OWL RDF-Based Semanticsaccording conditions blank nodes" Semantics].From observation,and premise satisfies g1,it gA OWL RDF-Based satisfied I. entity declarations:Let be entity declaration F(G2),and let gA be corresponding sub graph G2.Since pair( G1 G2 balanced,A F(G1),and hence gA sub graph G1.Since OWL RDF-Based satisfies G1,I OWL RDF-Based satisfies gA. axioms:Let be axiom F(G2),and let gA be corresponding sub graph G2.Since OWL RDF-Based interpretation,all OWL RDF-Based semantic conditions are met I.Due close alignment definitions OWL RDF-Based Semanticsand OWL Direct Semantics,OWL RDF-Based semantic conditions existthat semantically correspond definition interpretation axiom A.In particular,the consequent semantic conditionscorresponds RDF-encoding i.e. graph gA,except declaration typing triples,for satisfaction already been shown(in case semantic conditionthis generally be right-to-left direction condition).Hence, order show gA OWL RDF-Based satisfied be sufficient show antecedent semantic condition true.In general,several requirements have be met ensure Requirement denotations non-built-in IRIs gA have be contained appropriate part universe I.This be shown follows.For non-built-in IRI u occurring gA,u also A.Since pair G1 G2 balanced,there are entity declarations F(G2)for entity types u,each being form D entity type T.From reverse RDF mapping followsthat such declaration Da typing triple d G2,being form d rdf:type t",where t vocabulary class IRI representing part universe Ithat entity type T.It already been shown D being entity declaration F(G2)and d being corresponding sub graph G2,I OWL RDF-Based satisfies d.Hence, individual contained appropriate part universe. Requirement expression E occurring RDF encoding gE gA,an individual exist universe Ithat appropriately denotation E.Since OWL RDF-Based interpretation,all OWL RDF-Based semantic conditions are met I.Due close alignment definitions OWL RDF-Based Semanticsand OWL Direct Semantics,OWL RDF-Based semantic conditions existthat semantically correspondto definition interpretation expression E.In particular,the antecedent semantic conditionswill become true,if RDF-encoding E, i.e. graph gE, satisfied(in case semantic conditionthis generally be left-to-right direction condition). Now, pair G1 G2 balanced, gE also G1. So, OWL RDF-Based satisfies G1, gE OWL RDF-Based satisfied I.Hence,the antecedent semantic condition true,and therefore consequent true well.This result existence individual required properties,when taking account existential blank node semantics. Requirement semantic relationshiphas holdbetween denotations IRIs, literals anonymous individuals occurring gAwith respect roughly speaking,expresses meaning OWL axiom A. case following reasons:First,the literals anonymous individuals occurring gA, respectively,are interpreted analog way OWL Direct Semantics OWL RDF-Based Semantics.Second, was assumed OWL Direct interpretation J OWL Direct satisfies therefore semantic relationship desired propertiesholds respect J.Third,J been defined close correspondence semantic relationship expressed Jan analog semantic relationship respect I. basic idea now demonstrated more detailfor single example axiom F(G2),which be taken hint complete proof taking account feature OWL RDF-Based Semantics be constructed principle. Let be following OWL axiom F(G2): SubClassOf(ex:c1 ObjectUnionOf(ex:c2 ex:c3)) let gA be corresponding sub graph G2that being mapped reverse RDF mapping, namely gA ex:c1 rdfs:subClassOf _:x _:x rdf:type owl:Class _:x owl:unionOf ex:c2 ex:c3 First,since pair G1 G2 balanced,G2 typing triples ex:c1 rdf:type owl:Class ex:c2 rdf:type owl:Class ex:c3 rdf:type owl:Class correspond class entity declarations F(G2) IRIs"ex:c1", declaration typing triples are OWL RDF-Based satisfied due balancingthe typing triples exist G1 well,and been postulated OWL RDF-Based satisfies triples G1.Hence,by applying semantics rdf:type(seeSection RDF Semantics Semantics]),all IRIs denote classes, therefore denotations IRIs are included appropriate part universe precisely: IC IC IC Second,gA sub graph gE,given gE _:x rdf:type owl:Class _:x owl:unionOf c2 c3 union class expression E given E ObjectUnionOf(ex:c2 ex:c3) pair G1 G2 balanced,gE sub graph G1 well.gE blank nodesand,since satisfies G1,the semantic conditions RDF graphs blank nodes apply Section RDF Semantics Semantics]).This existence ofa mapping B blank(gE) IR, blank(gE) set blank nodes occurring gE.It extended interpretation I+B OWL RDF-Based satisfies triples gE.Further,since OWL RDF-Based interpretation,I OWL RDF-Based semantic conditions.Thus, left-to-right direction semantic condition union class expressions("owl:unionOf",see Section providing: IC ICEXT([I+B](_:x)) =ICEXT(I(ex:c2)) ICEXT(I(ex:c3)) Third,since OWL Direct interpretation J OWL Direct satisfies following semantic relationshipholds denotations class names according J: C C C applying definition ofthe OWL Direct interpretation J, conclude following semantic relationshipholds extensions classes aboveaccording ICEXT(I(ex:c1)) ICEXT(I(ex:c2)) ICEXT(I(ex:c3)) Finally,combining intermediate results IC IC ICEXT(I(ex:c1)) ICEXT([I+B](_:x)) Therefore, premises are metto apply right-to-left direction semantic condition subclass axioms("rdfs:subClassOf",see Section results So,the remaining triple ex:c1 rdfs:subClassOf _:x gA OWL RDF-Based satisfied I+B,where root blank node union class expression gE.Hence, w.r.t. existential blank node semantics,I OWL RDF-Based satisfies triples gA. conclude,for OWL RDF-Based interpretation Ithat OWL RDF-Based satisfies G1,I also OWL RDF-Based satisfies G2.Hence,G1 OWL RDF-Based G2,and therefore relationship correspondence Q.E.D. Appendix: Comprehension Conditions correspondence Section possible OWL RDF-Based Semanticsto reflect entailments OWL Direct Semantics[OWL Direct Semantics],provided certain syntactic transformationson RDF graphs being considered.This makes numerous potentially desirable useful entailments availablethat otherwise be scope OWL RDF-Based Semantics,for technical reasons discussed Section natural ask similar entailmentseven entailment querydoes not consist OWL DL ontologies RDF graph form.However,the correspondence not apply such cases,and thus OWL Direct Semantics be taken reference framefor entailments,or graph transformation be considered not. discussed Section core obstacle correspondence hold was RDF encoding OWL expressions, such union class expressions,when appear right hand side entailment query.Under OWL RDF-Based Semanticsit not generally ensured individual denotation such expression.The conditions" defined sectionare additional semantic conditionsthat provide necessary individualsfor sequence, class property expression.By combinationof normative semantic conditions OWL RDF-Based Semantics(Section comprehension conditionscan be regarded semantic expressivity OWL Direct Semanticson entailment queries consisting arbitrary RDF graphs. combined semantics not primarily intended use actual implementations.The comprehension conditions add significantlyto complexity expressivityof basic semanticsand,in fact,have proven tolead formal inconsistency.Butthe combined semanticscan still be seen generalized reference framefor entailments,and be used,for example,to evaluate methods syntactically transform unrestricted entailment queriesin order receive additional entailments OWL RDF-Based Semantics.Such concrete method however, scope specification. Note:The conventionsin introduction ofSection Conditions")apply current section well. Comprehension Conditions Sequences Table lists comprehension conditions sequences,i.e. RDF lists.These comprehension conditions provide existence sequences built finite combination individualscontained universe. Table Comprehension Conditions Sequences then z1 zn IR a1 IR z1 a1 IEXT(I(rdf:first)) z1 z2 IEXT(I(rdf:rest)) zn IEXT(I(rdf:first)) zn IEXT(I(rdf:rest)) Comprehension Conditions Boolean Connectives Table lists comprehension conditions Boolean connectives(see Section corresponding semantic conditions).These comprehension conditions provide existenceof class datatype,and intersections unionsbuilt finite set classescontained universe. Table Comprehension Conditions Boolean Connectives then IR s sequence c1 cn IC s IEXT(I(owl:intersectionOf)) s sequence c1 cn IC s IEXT(I(owl:unionOf)) c IC c IEXT(I(owl:complementOf)) d IDC d IEXT(I(owl:datatypeComplementOf)) Comprehension Conditions Enumerations Table lists comprehension conditions enumerations(see Section corresponding semantic conditions).These comprehension conditions provide existenceof enumeration classesbuilt finite set individualscontained universe. Table Comprehension Conditions Enumerations then IR s sequence a1 IR s IEXT(I(owl:oneOf)) Comprehension Conditions Property Restrictions Table lists comprehension conditions property restrictions(see Section corresponding semantic conditions).These comprehension conditions provide existenceof cardinality restrictionson property nonnegative integer,as well value restrictionson property classcontained universe. Note comprehension conditions self restrictions right hand side produced owl:hasSelf assertionsto be Boolean value accordance withTable Section OWL RDF Mapping RDF Mapping]. Implementations are not required support comprehension conditions owl:onProperties, MAY support order realize n-ary dataranges arity Sections7and8.4of OWL Structural Specification Specification] further information). Table Comprehension Conditions Property Restrictions then IR c IC p IP c IEXT(I(owl:someValuesFrom)) p IEXT(I(owl:onProperty)) c IC s sequence p1 pn IP n c IEXT(I(owl:someValuesFrom)) s IEXT(I(owl:onProperties)) c IC p IP c IEXT(I(owl:allValuesFrom)) p IEXT(I(owl:onProperty)) c IC s sequence p1 pn IP n c IEXT(I(owl:allValuesFrom)) s IEXT(I(owl:onProperties)) IR p IP IEXT(I(owl:hasValue)) p IEXT(I(owl:onProperty)) p IP IEXT(I(owl:hasSelf)) p IEXT(I(owl:onProperty)) n INNI p IP n IEXT(I(owl:minCardinality)) p IEXT(I(owl:onProperty)) n INNI p IP n IEXT(I(owl:maxCardinality)) p IEXT(I(owl:onProperty)) n INNI p IP n IEXT(I(owl:cardinality)) p IEXT(I(owl:onProperty)) n INNI c IC p IP n IEXT(I(owl:minQualifiedCardinality)) c IEXT(I(owl:onClass)) p IEXT(I(owl:onProperty)) n INNI d IDC p IODP n IEXT(I(owl:minQualifiedCardinality)) d IEXT(I(owl:onDataRange)) p IEXT(I(owl:onProperty)) n INNI c IC p IP n IEXT(I(owl:maxQualifiedCardinality)) c IEXT(I(owl:onClass)) p IEXT(I(owl:onProperty)) n INNI d IDC p IODP n IEXT(I(owl:maxQualifiedCardinality)) d IEXT(I(owl:onDataRange)) p IEXT(I(owl:onProperty)) n INNI c IC p IP n IEXT(I(owl:qualifiedCardinality)) c IEXT(I(owl:onClass)) p IEXT(I(owl:onProperty)) n INNI d IDC p IODP n IEXT(I(owl:qualifiedCardinality)) d IEXT(I(owl:onDataRange)) p IEXT(I(owl:onProperty)) Comprehension Conditions Datatype Restrictions Table lists comprehension conditions datatype restrictions(see Section corresponding semantic conditions).These comprehension conditions provide existenceof datatypes built restricting datatype contained universeby finite set facet-value pairscontained facet space(see Section original datatype. set IFS defined Section Table Comprehension Conditions Datatype Restrictions then IR s sequence z1 zn IR d IDC f1 fn IODP v1 vn LV f1 v1 fn vn IFS(d) d IEXT(I(owl:onDatatype)) s IEXT(I(owl:withRestrictions)) z1 v1 IEXT(f1) zn vn IEXT(fn) Comprehension Conditions Inverse Properties Table lists comprehension conditions forinverse property expressions.These comprehension conditions provide existenceof inverse property propertycontained universe. Inverse property expressions be used build axioms anonymous inverse properties, such graph _:x owl:inverseOf ex:p _:x rdfs:subPropertyOf owl:topObjectProperty Note extent,the OWL RDF-Based Semantics already covers use inverse property expressionsby means semantic conditions inverse property axioms(see Section semantic conditions also apply existential variableon left hand side inverse property axiom.Nevertheless, not relevant cases are covered semantic condition.For example,one expect example graph be generally true.However,the normative semantic conditionsdo not permit conclusion,since not ensured property pthere individual universewith property extension being inverse p. Table Comprehension Conditions Inverse Properties then IR p IP p IEXT(I(owl:inverseOf)) Appendix: Changes OWL section lists relevant differences OWL RDF-Based Semantics original specification OWL RDF-Compatible Semantics[OWL RDF-Compatible Semantics].Significant effort been spentin keeping design OWL RDF-Based Semantics close possible OWL RDF-Compatible Semantics.While aim was achieved large degree, OWL RDF-Based Semantics actually predecessor several aspects.In most cases serious technical problems have arisen conservative semantic extension.Not listed arethe new language constructs new datatypes OWL following markers are used: deviation OWL breaks backward compatibility backward compatible extension OWL change nomenclature originally used OWL feature OWL been deprecated OWL Generalized Graph Syntax OWL RDF-Based Semantics RDF graphs containIRIs Section OWL RDF-Compatible Semantics was restricted RDF graphs URIs change accordance rest OWL specification(see Section OWL Structural Specification Specification]).In addition,the OWL RDF-Based Semanticsis now explicitly allowed be applied RDF graphs containing"generalized" RDF triples,i.e. triples consist IRIs, literals blank nodes positions(Section implementations are not required support contrast,the OWL RDF-Compatible Semantics was restricted RDF graphs conforming RDF Concepts specification[RDF Concepts].These limitations OWL RDF-Compatible Semantics were actually inherited RDF Semantics specification Semantics].The relaxations are intended warrant interoperabilitywith existing future technologies tools.Both changes are compatible OWL RDF graphs were legal OWL RDF-Compatible Semantics are still legal OWL RDF-Based Semantics. Facets Datatypes basic definitions datatype D-interpretation,as defined RDF Semantics specification applied OWL RDF-Compatible Semantics,have been extendedto take account constraining facets(see Section order allow datatype restrictionsas specified Section change compatible OWL Section RDF Semantics specificationexplicitly extending minimal datatype definition provided there. Correspondence Theorem Comprehension Conditions semantic conditions OWL RDF-Compatible Semantics included set so called conditions",which allowed prove original"correspondence entailment OWL DL was also entailment OWL Full.The document hand comprehension conditions new language constructs OWL Section comprehension conditionsare not normative aspect OWL RDF-Based Semanticsanymore.It turned combining comprehension conditions normative set semantic conditions Section 5would lead formal inconsistency resulting semantics(Issue addition,it became clear correspondence lines original theoremwould not work relationship RDF-Based Semantics OWL Direct Semantics Direct Semantics],since not possible differences betweenthe semanticssolely means additional comprehension conditions(see Section correspondence OWL RDF-Based Semantics(Section alternative approach use comprehension conditionsand be seen technical refinementof idea originally discussed WebOnt Working Group(email). change incompatible deviation OWL certain aspects originally normative definition semantics have been removed. Flawed Semantics Language Constructs Argument Lists OWL RDF-Compatible Semantics,the semantic conditions unions, intersections enumerations classes were defined flawed form, lead formal inconsistency semantics(Issue see also thisunofficial problem description). affected semantic conditions have been revised; see Section Section change incompatible deviation OWL semantics formally been weakenedin order eliminate source inconsistency. Incomplete Semantics owl:AllDifferent OWL RDF-Compatible Semantics missed certain semantic condition axioms based vocabulary term also unofficial problem description). missing semantic condition been added OWL RDF-Based Semantics(see Section change compatible OWL semantics been conservatively extended. Aligned Semantics owl:DataRange rdfs:Datatype class owl:DataRangehas been made equivalent class rdfs:Datatype(see Section main purpose change was allow deprecation term owl:DataRange favor rdfs:Datatype.This change compatible OWL 1according analysisof relationship classesin OWL RDF-Compatible Semantics(email). Ontology Properties Annotation Properties propertiesthat have been ontology properties OWL owl:priorVersion,have now been specified ontology properties annotation properties,in order be line rest OWL specification(see Section OWL Structural Specification Specification]).This change compatible OWL semantics been conservatively extended:all ontology properties OWL are still ontology properties OWL Nonempty Data Value Enumerations semantic condition enumerations data values Section now restricted nonempty sets data values. class owl:Nothing unintentionally becoming instance class rdfs:Datatype,as analyzed restriction semantics incompatible deviation OWL however,that still possibleto define datatype empty enumeration data values,as explained Section Terminological Clarifications document uses term RDF-Based Semantics"to refer specified semantics only.According Section term Full"refers languagethat determinedby set RDF graphs(also called Full ontologies")being interpreted using OWL RDF-Based Semantics.OWL not been particularly clear distinction.Where OWL RDF-Compatible Semantics specification talked Full interpretations","OWL Full satisfaction","OWL Full consistency"and"OWL Full entailment",the OWL RDF-Based Semantics Specification talks Section 4about"OWL RDF-Based interpretations","OWL RDF-Based satisfaction","OWL RDF-Based consistency"and"OWL RDF-Based entailment",respectively,since terms are primarily meant be related semantics rather whole language. Modified Abbreviations names have been used RDF-Compatible Semantics specification, have been replaced corresponding names defined RDF Semantics document Semantics], namely respectively. Furthermore,all uses IRI mapping have been replaced more general interpretation mapping following conventions RDF Semantics document.These changes are intended support use OWL RDF-Based Semantics document incremental extension RDF Semantics document. Names universe" were exclusively used OWL RDF-Compatible Semantics document, such have not been changed.Other abbreviations, such class extension owl:AllDifferent, have general not been reused document hand,but explicit nonabbreviated form,such used instead. Modified Tuple Notation Style are written form"( >",as other OWL documents. Deprecated Vocabulary Terms following vocabulary terms have been deprecated OWL Working Group, NOT be used new ontologies anymore: owl:DataRange resolution Issue Appendix: Change Log Changes Recommendation section changes document Recommendation October, publication XML Schema Definition Language Part Datatypes Recommendation April elements OWL are based XSD are now considered required, note detailing optional dependency XSD Candidate Recommendation April, been removed Document" section. Changes Proposed Recommendation section changes document Proposed Recommendation September, Correction grammar word order, etc.), mainly Introduction section. Updated corrected several hyperlinks. Changes Candidate Recommendation section changes document Candidate Recommendation June, Re-definition several ontology properties be ontology properties annotation properties, order align RDF-Based Semantics rest OWL specification, particular avoid equivocal definition OWL RL/RDF rules WG resolution). Correction type facets: Facets are intended be data properties have been used such elsewhere document, were wrongly specified unrestricted properties so far. Correction mismatch definition D-interpretations document hand RDF Semantics specification: according definition simple interpretations, LV plain literals vocabulary V. missing reference been added. Correction error formulation correspondence theorem. section Axiomatic Triples been extended explicit set axiomatic triples, based discussion rest section. section Axiomatic Triples now explicitly axiomatic triples datatypes facets corresponding semantic conditions datatypes facets, respectively. Refinement proof correspondence correction several errors. Motivated changes, example Section been slightly revised well. Added description ALT-attribute text Figure parts hierarchy. Distinction normative nonnormative references, other OWL documents. Added clarification introduction section. Removed redundant conclusion table presenting semantic conditions datatype restrictions, conclusion already semantic conditions vocabulary properties, having conclusion repeated not match general approach applied presenting semantic conditions document. Reworded description markers section changes OWL added marker deprecated features. Changed presentation style references citations form used OWL documents. Changed presentation style tuples â©" follow conventions used other OWL documents. Numerous minor corrections stylistic improvements. Changes Last Call section changes document Last Call Working Draft April, Renamed annotation vocabulary terms respectively WG resolution). Replaced datatype WG resolution). Replaced facet following same replacement original rdf:PlainLiteral specification. Changed range property IP IR order avoid undesired semantic side effects annotations. was oversight original semantic conditions annotations axioms annotations were removed document. semantic conditions comprehension conditions n-ary property restrictions have been changed only cover property sequences length greater meaning expression empty property set not clear. Explained optional status semantic conditions concerned IRI accordance rest OWL specification. Shortened clarified section titles, moved section semantic conditions sub property chains Section aligned entry order tables Section Section Several clarifications, minor corrections cosmetic changes. Acknowledgments starting point development OWL was OWL1.1 member submission, result user developer feedback, particular information gathered OWL Experiences Directions Workshop series. working group also considered postponed issues WebOnt Working Group. document been produced OWL Working Group contents reflect extensive discussions Working Group whole.The editors extend special thanks toJie Bao Herman F. Patel-Schneider Labs Research, Alcatel-Lucent) andZhe Wu Corporation)for thorough reviews. regular attendees meetings OWL Working Group time publication document were:Jie Bao Calvanese University Bozen-Bolzano),Bernardo Cuenca Grau University Computing Laboratory),Martin Dzbor University),Achille Fokoue Corporation),Christine Golbreich Versailles St-Quentin LIRMM),Sandro Hawke Herman Hoekstra Amsterdam),Ian Horrocks University Computing Laboratory),Elisa Kendall Software),Markus Krötzsch Lutz Bremen),Deborah L. McGuinness Motik University Computing Laboratory),Jeff Pan Aberdeen),Bijan Parsia Manchester),Peter F. Patel-Schneider Labs Research, Alcatel-Lucent),Sebastian Rudolph Ruttenberg Commons),Uli Sattler Manchester),Michael Schneider Smith Parsia),Evan Wallace Wu Corporation), andAntoine Zimmermann Galway).We also thank members working group:Jeremy Carroll,Jim Hendler, andVipul Kashyap. References Normative References Specification] OWL Web Ontology Language: Structural Specification Functional-Style Syntax Edition) Boris Motik, Peter F. Patel-Schneider, Bijan Parsia, eds. W3C Recommendation, December http://www.w3.org/TR/2012/REC-owl2-syntax-20121211/. Latest version available http://www.w3.org/TR/owl2-syntax/. Concepts] Resource Description Framework Concepts Abstract Syntax. Graham Klyne Jeremy J. Carroll, eds. W3C Recommendation, February http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/. Latest version available http://www.w3.org/TR/rdf-concepts/. Semantics] RDF Semantics. Patrick Hayes, ed., W3C Recommendation, February http://www.w3.org/TR/2004/REC-rdf-mt-20040210/. Latest version available http://www.w3.org/TR/rdf-mt/. RFC Key words use RFCs Indicate Requirement Levels. Network Working Group, S. Bradner. IETF, March http://www.ietf.org/rfc/rfc2119.txt RFC Internationalized Resource Identifiers M. Duerst M. Suignard. IETF, January http://www.ietf.org/rfc/rfc3987.txt Nonnormative References Direct Semantics] OWL Web Ontology Language: Direct Semantics Edition) Boris Motik, Peter F. Patel-Schneider, Bernardo Cuenca Grau, eds. W3C Recommendation, December http://www.w3.org/TR/2012/REC-owl2-direct-semantics-20121211/. Latest version available http://www.w3.org/TR/owl2-direct-semantics/. RDF Mapping] OWL Web Ontology Language: Mapping RDF Graphs Edition) Peter F. Patel-Schneider, Boris Motik, eds. W3C Recommendation, December http://www.w3.org/TR/2012/REC-owl2-mapping-to-rdf-20121211/. Latest version available http://www.w3.org/TR/owl2-mapping-to-rdf/. RDF-Compatible Semantics] OWL Web Ontology Language: Semantics Abstract Syntax, Section RDF-Compatible Model-Theoretic Semantics. Peter F. Patel-Schneider, Patrick Hayes, Ian Horrocks, eds., W3C Recommendation, February RFC Uniform Resource Identifiers Generic Syntax. T. Berners-Lee, R. Fielding, U.C. Irvine L. Masinter. IETF, August 