Metadata API Media Resources Metadata API Media Resources W3C Recommendation March version: http://www.w3.org/TR/2014/REC-mediaont-api-1.0-20140313/ Latest published version: http://www.w3.org/TR/mediaont-api-1.0/ Previous version: http://www.w3.org/TR/2013/PR-mediaont-api-1.0-20131015/ Editors: Florian Stegmaier, University Passau Werner Bailer, JOANNEUM RESEARCH Martin HÃ¶ffernig, JOANNEUM RESEARCH ì?´ì›?ì„?(Wonsuk Lee), Samsung Electronics, Ltd. Chris Poppe, Ghent University refer errata document, include normative corrections. See also translations. Copyright Â© W3CÂ® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract specification API access metadata information related media resources Web. overall purpose provide developers convenient access metadata information stored different metadata formats. API means access set metadata properties defined Ontology Media Resources specification. properties are used pivot vocabulary API. core specification definition API interfaces retrieving metadata information synchronous asynchronous modes. also interfaces structured return types specification behavior API implementation. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director W3C Recommendation. stable document be used reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. document been produced Media Annotations Working Group, part W3CVideo Web Activity.Â public encouraged send comments Recommendation public mailing list public-media-annotation@w3.org archive). Use Comment API]" subject line email. Working Group adopted publictest suite produced implementation report Metadata API Media Resources changes document have been made previous version. Metadata API Media Resources be implemented client-only browser, plugin JavaScript library) client-server Web Service). level implementation API scenario summarized implementation report allowed exit Candidate Recommendation. Nevertheless API not expected be implemented natively browser code. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section6 W3C Patent Policy. Table Contents Introduction Formats scope Formats scope Terminology Conformance Design consideration API Description MediaResource interface Methods Examples Javascript AsyncMediaResource interface Methods Callback interfaces PropertyCallback interface Methods MetadataCallback interface Methods Examples Javascript SyncMediaResource interface Methods Examples Javascript MediaAnnotation interface Attributes Example JavaScript Properties Identification Properties Identifier Attributes Example JavaScript Title Attributes Example JavaScript Language Attributes Example JavaScript Locator Attributes Example JavaScript Creation Properties Contributor Attributes Example JavaScript Creator Attributes Example JavaScript MADate Attributes Example JavaScript Location Attributes Example JavaScript Content Properties Description Attributes Example Javascript Keyword Attributes Example Javascript Genre Attributes Example Javascript Rating Attributes Example Javascript Relational Properties Relation Attributes Example Javascript Collection Attributes Example Javascript Rights Properties Copyright Attributes Example Javascript Policy Attributes Example Javascript Distribution Properties Publisher Attributes Example Javascript TargetAudience Attributes Example Javascript Fragments Properties Fragment Attributes Example Javascript NamedFragment Attributes Example Javascript Technical Properties FrameSize Attributes Example Javascript Compression Attributes Example Javascript Duration Attributes Example Javascript Format Attributes Example Javascript SamplingRate Attributes Example Javascript FrameRate Attributes Example Javascript AverageBitRate Attributes Example Javascript NumTracks Attributes Example Javascript MetadataSource interface Attributes Examples Javascript API Status Codes Usage examples Usage JavaScript API Usage Web Service Implementation Notes Multiple identifiers media resources orfragements Missing fragment identifiers Interoperability Implementations Security Considerations A. Web IDL description B. Acknowledgements C. References C.1 Normative references C.2 Informative references Introduction specification API access metadata information related media resources Web. overall purpose provide developers convenient access metadata information stored different metadata formats. core properties, defined Ontology Media Resources specification be used pivot vocabulary API. description relations core properties metadata formats scope are documented Ontology Media Resources specification order provide cross-community data integration. API described using interface definition language Web IDL decision use Web IDL, offers bindings ECMAScript Java, based Use Cases Requirements Ontology Metadata API Media Resources API interfaces enable users/applications consume metadata interoperable manner. Interoperability metadata formats ensured use Ontology Media Resources specification pivot metadata format. API offers operations request particular metadata information represented certain metadata format related media resources Web. Further actual representation core properties behaviour API. Formats scope formats scope Ontology Media Resources specification Formats scope Formats scope Ontology Media Resources specification Terminology document terms Resource", value types" are be interpreted defined Section Ontology Media Resources specification Conformance addition sections marked non-normative, authoring guidelines, diagrams, examples, notes specification are non-normative. Everything else specification normative. keywords not, required, not, recommended, optional specification are be interpreted described Design consideration section different usage scenarios led design API. consider main scenarios, API be implemented invoked: User agent, client accessing Web Service. client-only client-server cases implementation, media resources metadata sources are many cases remote. API default specified asynchronous API, i.e., calls are not blocking, results errors) are returned using callback mechanism. order better support Web Service case, synchronous mode also defined. synchronous mode optional. scenarios are shown Figure Figure scenarios different usage API. specification only Metadata API Media Resources. Other components depicted Figure access/extraction/storage metadata) are not covered. Scenario Client-only agent) first scenario, API implemented user agent, i.e. built browser, plugin JavaScript library. Here, there exist possibilities invoke API: external calling code, internal calling code behaving client attached extension user agent. Usually, such implementations are example asynchronous processing. Metadata API Media Resources user agent include components metadata access extraction) mappings supported set formats, e.g., defined property mapping table Ontology Media Resources specification Further, metadata sources media resource metadata document(s)) be retrievable. access establish connection, retrieval) metadata sources handled user agent. Scenario Client-Server second scenario, API implemented Web Service following principles server-side synchronous processing. Such implementation be typically used non-UI client, such agent harvesting metadata. However, API be also accessed user agent, used same way described scenario help client-side library accessing Web Service. implementation Web Service, scenario also supporting media repository, e.g., content provider's archive database, movie store. help such service user agent retrieve metadata sources, have custom metadata format not supported user agent. contrast integrated component scenario implementation API web service do more complex mappings fly component integrated user agent, be more flexible supporting additional formats). scenarios, API mediator client application actual metadata sources. Interoperability ensured defining operations accessing metadata information, common object structure API behaviour status codes). Following implementation implement stack components: implementation Metadata API Media Resources defined document), actual GETTER methods properties. implementation mappings specific source format core properties. Here, Metadata API Media Resources use Ontology Media Resources specification applicable. format specific API access metadata. be API retrieving metadata document describing media resource XML parser set XPath statements) extractor read metadata embedded media resource library read EXIF information JPEG images). order define context API applied, least unidirectional reference media resource metadata document vice versa needed. not case such reference needs be provided web application web service media repository API access metadata information stored different metadata formats. such, different instances same property exist. API Description API number interfaces using be grouped following categories: interface defining actual retrieval operations metadata, called MediaResource, provided synchronous asynchronous versions Section Section Section interface defining data structure response objects/metadata annotations, called MediaAnnotation specializations Section Section interface defining data structure metadata sources, called MetadataSource Section Next, different interfaces exposed operations are discussed. Implementations API support asynchronous mode operation, support synchronous support interfaces defined document. Instead exceptions, status code indicating state processing Section returned synchronous API) provided callback function asynchronous API) case error Then, interfaces return types, i.e., MediaAnnotation specializations, MetadataSource are defined. IDL fragment Appendix specification be interpreted required conforming IDL fragments, described â€œWeb IDLâ€? specification. MediaResource interface MediaResource interface core API operations access metadata properties specific media resource. Here, clear separation asynchronous synchronous mode operation been achieved defining implementing interfaces MediaResource), AsyncMediaResource SyncMediaResource interface. Objects interfaces be created calling createMediaResource MediaResource interface. actual connection specified metadata source be created execution getMediaProperty operation AsyncMediaResource SyncMediaResource interface. mediaResource argument media resource, implementation API try find relevant metadata sources. Optionally, references metadata sources be passed using array objects, implementing MetadataSource interface Section interface MediaResource short getSupportedModes MediaResource createMediaResource mediaResource, optional MetadataSource[] metadataSources, optional short mode);}; Methods createMediaResource operation instantiates object AsyncMediaResource SyncMediaResource interface. Further, set specific media resource metadata sources API applied. Parameter Type Nullable Optional Description mediaResource DOMString âœ˜ âœ˜ attribute set specific media resource be processed API. metadataSources MetadataSource[] âœ˜ âœ” attribute specify additional metadata sources. mode short âœ˜ âœ” attribute specify desired mode operation. asynchronous synchronous mode be used. case mode argument omitted, implementation supports modes, asynchronous mode be used. exceptions. Return type: MediaResource getSupportedModes operation called identify implemented mode. return codes be asynchronous, synchronous modes. parameters. exceptions. Return type: short Examples Javascript Example getSupportedModes: ma = new MediaResource();var mode = ma.getSupportedModes();/** Resulting Example createMediaResource: metadataSources = new MetadataSource[2];metadataSources[0] = new MetadataSource( = new MetadataSource( = new MediaResource();if == mediaResource.getSupportedModes() == aSyncObject = mediaResource.createMediaResource( metadataSources, else == mediaResource.getSupportedModes() == syncObject = mediaResource.createMediaResource( metadataSources, AsyncMediaResource interface AsyncMediaResource interface number operations allow accessing metadata media resource. interface be implemented. Next, give Web IDL description AsyncMediaResource interface describe different operations are part section MediaAnnotations interface used interface definitions. container hold general values properties enabling iteration set different properties. definition be found Section interface AsyncMediaResource MediaResource void getMediaProperty propertyNames, PropertyCallback successCallback, ErrorCallback errorCallback, Â Â Â Â Â Â  optional DOMString fragment, optional DOMString sourceFormat, optional DOMString language); void getOriginalMetadata sourceFormat, MetadataCallback successCallback, ErrorCallback errorCallback);}; Methods getMediaProperty operation retrieval value specific property, several properties asynchronous manner. specific property passed argument list objects returned hold values according requested property. objects implement MediaAnnotation interface, described Section Depending requested property, returned objects implement different subtypes MediaAnnotation interface). example, requesting back array objects implementing Title interface, requesting results objects implementing Creator interface so interfaces are described Section example be found here. Parameter Type Nullable Optional Description propertyNames DOMString[] âœ˜ âœ˜ argument array containing properties values need be retrieved. empty array properties carrying values be retrieved. successCallback PropertyCallback âœ˜ âœ˜ argument callback object asynchronous requests property. successCallback object PropertyCallback interface handleEvent operation needs be called once data requested property gathered. handleEvent operation needs be called new MediaAnnotation array. errorCallback ErrorCallback âœ˜ âœ˜ argument callback object failure asynchronous requests property. errorCallback object ErrorCallback interface handleEvent operation needs be called attempt handleEvent operation needs be called new DOMString representing status code error Section details). fragment DOMString âœ˜ âœ” argument URI identifying specific media fragment metadata requested. URI conform URI Media Fragment specification. parameter optional. sourceFormat DOMString âœ˜ âœ” argument specific metadata format. use metadata format identifiers defined Ontology Media Resources specification metadata format defined, only metadata available specified metadata format are retrieved. parameter optional. language DOMString âœ˜ âœ” argument identify language metadata. Values metadata only be returned available specified language. Recommended best practice use BCP parameter optional. exceptions. Return type: void getOriginalMetadata operation retrieval original metadata according specified source format asynchronous manner. example be found here. Parameter Type Nullable Optional Description sourceFormat DOMString âœ˜ âœ˜ argument specific metadata format. use metadata format identifiers defined Ontology Media Resources specification metadata format defined, only metadata available specified metadata format are retrieved. successCallback MetadataCallback âœ˜ âœ˜ argument callback object asynchronous requests original metadata. successCallback object MetadataCallback interface handleEvent operation needs be called once properties having values are listed. handleEvent operation needs be called new DOMString array holding original metadata. errorCallback ErrorCallback âœ˜ âœ˜ argument callback object failure asynchronous requests original metadata. errorCallback object ErrorCallback interface handleEvent operation needs be called attempt handleEvent operation needs be called new DOMString representing status code error Section details). exceptions. Return type: void Callback interfaces PropertyCallback interface PropertyCallback interface handleEvent operation needs be called once data requested property been gathered. interface PropertyCallback void handleEvent mediaAnnotations);}; Methods handleEvent operation called data gathered corresponding request values more properties. Parameter Type Nullable Optional Description mediaAnnotations MediaAnnotation[] âœ˜ âœ˜ argument list objects values according requested property. objects implement MediaAnnotation interface, described Section Depending requested property, returned objects implement different subtypes MediaAnnotation interface). exceptions. Return type: void MetadataCallback interface MetadataCallback interface handleEvent operation needs be called once requested metadata been gathered. interface MetadataCallback void handleEvent metadata);}; Methods handleEvent operation called data gathered corresponding request original metadata. Parameter Type Nullable Optional Description metadata DOMString[] âœ˜ âœ˜ argument list DOMStrings representing original metadata. Note multiple metadata instances exist Dublin Core MPEG-7 document). exceptions. Return type: void Examples Javascript Example asynchronous getMediaProperty: aSyncMediaResource = mediaResource.createMediaResource("http://www.imdb.com/title/tt0133152/", new Array(), successCallback, errorCallback, function successCallback(MediaAnnotation[] mediaAnnotations) Resulting apes", en-us", Planet", en-us", function errorCallback(DOMString error) Resulting error: Example asynchronous getOriginalMetadata aSyncMediaResource = mediaResource.createMediaResource( new Array(), successCallback, errorCallback);function successCallback(DOMString[] metadata) Resulting xmlns='http://example.org/myapp/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://example.org/myapp/ http://example.org/myapp/schema.xsd' xmlns:dc='http://purl.org/dc/elements/1.1/'> <dc:title>DC title</dc:title> </metadata>" function errorCallback(DOMString error) Resulting error: SyncMediaResource interface SyncMediaResource interface number operations access metadata media resource. interface be implemented. Next, give Web IDL description SyncMediaResource interface synchronous requests describe different operations are part MediaResource constructor be called construct object based identifier media resource optionally metadata sources. interface SyncMediaResource MediaResource MediaAnnotation[] getMediaProperty propertyNames, optional DOMString fragment, Â Â Â Â Â Â  optional DOMString sourceFormat, optional DOMString language); DOMString[] getOriginalMetadata sourceFormat);}; Methods getMediaProperty operation retrieval metadata specific property, several properties synchronous manner. passed array requested properties array objects returned. array empty, property holding values be requested returned. returned objects implement MediaAnnotation interface Section Depending requested property, returned objects implement different subtypes MediaAnnotation interface). example, requesting back array objects implementing Title interface, requesting results objects implementing Creator interface so subtypes are described Section operation returns MediaAnnotation array holding requested properties. error retrieval, MediaAnnotation object corresponding status code be generated inserted first position array. example be found here. section MediaAnnotations interface used interface definitions. container hold general values properties enabling iteration set different properties. explanation be found Section Parameter Type Nullable Optional Description propertyNames DOMString[] âœ˜ âœ˜ argument requested properties array. array empty, property holding values be returned. fragment DOMString âœ˜ âœ” argument URI identifying specific media fragment metadata requested. URI conform URI Media Fragment specification. parameter optional. sourceFormat DOMString âœ˜ âœ” argument specific metadata format. use metadata format identifiers defined Ontology Media Resources specification metadata format defined, only metadata available specified metadata format retrieved. parameter optional. language DOMString âœ˜ âœ” argument identify language metadata. Values metadata only be returned available specified language. Recommended best practice use BCP parameter optional. exceptions. Return type: MediaAnnotation[] getOriginalMetadata operation retrieval original metadata according specified source format synchronous manner. operation returns DOMString array holding status code request first original metadata second position. example be found here. Parameter Type Nullable Optional Description sourceFormat DOMString âœ˜ âœ˜ argument specific metadata format. use metadata format identifiers defined Ontology Media Resources specification metadata format defined, only metadata available specified metadata format retrieved. exceptions. Return type: DOMString[] Examples Javascript examples section use getMediaProperty() get object implementing MediaAnnotation interface. noErrorStatus function error present requested properties carry values. give JavaScript examples use synchronous MediaResource interface operations. Example synchronous getMediaProperty: syncMediaResource = mediaResource.createMediaResource("http://www.imdb.com/title/tt0133152/", new Array(), = syncMediaResource.getMediaProperty(["title"], == true) Resulting apes", en-us", der Affen", Example synchronous getOriginalMetadata: syncMediaResource = mediaResource.createMediaResource("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG", new Array(), = syncMediaResource.getOriginalMetadata("DC");if == true) Resulting xmlns='http://example.org/myapp/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://example.org/myapp/ http://example.org/myapp/schema.xsd' xmlns:dc='http://purl.org/dc/elements/1.1/'> <dc:title>DC title</dc:title> </metadata>" MediaAnnotation interface MediaAnnotation interface used return type MediaResource.getMediaProperty operation. container holding general values metadata properties. several metadata properties are defined complex types, specific derived types MediaAnnotation have been defined, adding specific attributes. However, MediaAnnotation be used generic return type access printable string representation property value attribute). also status code. case general errors, first element returned MediaAnnotation array global error code, otherwise status be given returned properties. following design considerations have been used specifying derived interfaces metadata properties: metadata property, interface derived MediaAnnotation, adding typed attributes according specification ontology document. API fill value printable string representation, recommended follow steps: use name/label present URI URI value known API, use appropriate label dereference URI obtain label, possible return URI create string values set attributes numeric values) approach possibly duplicates string found attribute value attribute. considered acceptable amount redundancy benefit having generic value field metadata properties be used regardless specific metadata property data type attributes. attribute type URI|string, interface have attributes, appended attribute name, representing URI string respectively consistency, approach also followed attribute only URI string type. approach user extensions deriving MediaAnnotation derived interfaces metadata properties. interface MediaAnnotation attribute DOMString propertyName; attribute DOMString value; attribute DOMString language; attribute DOMString sourceFormat; attribute DOMString fragmentIdentifier; attribute DOMString mappingType; attribute short statusCode;}; Attributes fragmentIdentifier type DOMString attribute be URI determining fragment metadata relevant. exceptions. language type DOMString attribute hold language metadata. attribute empty language not applicable specific property. Recommended best practice use BCP exceptions. mappingType type DOMString attribute kind mapping discussed semantic level mappings. value attribute be mapping characteristics. exceptions. propertyName type DOMString name property be specified correspond property names defined Ontology Media Resources specification[MEDIA-ONTOLOGY]. sourceFormat type DOMString attribute specify metadata source metadata was retrieved. use metadata format identifiers defined Ontology Media Resources specification exceptions. statusCode type short attribute specify status code associated property indicating structured return value). exceptions. value type DOMString attribute be filled printable string representation. exceptions. Example JavaScript noErrorStatus function error present requested properties carry values. MediaAnnotation interface be never instantiated only instances derived interfaces be created. be filled least parameters specified MediaAnnotation interface be filled specific attributes. mediaAnnotation = image.getMediaProperty(["title"], == true) Resulting Wind", match", Properties section different properties be requested MediaResource.getMediaProperty() operation. invoking operation, objects implementing MediaAnnotation interface are returned represent specified property. properties are represented interface inherited MediaAnnotation interface design guidelines described Several following return type interfaces hold value property URI pointer controlled vocabulary) free text. URI preferred, respective attribute MediaAnnotation interface specialized type) be filled possible information included be constructed source metadata). following, property, JavaScript example usage property specific attributes. case, general attributes MediaAnnotation interface be also requested. Identification Properties Identifier MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Identifier interface returned representing identifier property Ontology Media Resources specification interface Identifier MediaAnnotation attribute DOMString identifierLink;}; Attributes identifierLink type DOMString attribute URI identifying media resource. exceptions. Example JavaScript id = image.getMediaProperty(["identifier"]); Resulting Title MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Title interface returned representing title property Ontology Media Resources specification interface Title MediaAnnotation attribute DOMString titleLabel; attribute DOMString typeLink; attribute DOMString typeLabel;}; Attributes titleLabel type DOMString attribute title plain string. exceptions. typeLabel type DOMString attribute type title plain string. exceptions. typeLink type DOMString attribute type title URI. exceptions. Example JavaScript title = song.getMediaProperty(["title"]); Resulting Horizon" title", Language MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Language interface returned representing language property Ontology Media Resources specification interface Language MediaAnnotation attribute DOMString languageLink; attribute DOMString languageLabel;}; Attributes languageLabel type DOMString attribute language media resource plain string, be filtered getMediaProperty operation. Recommended best practice use BCP exceptions. languageLink type DOMString attribute language media resource URI. exceptions. Example JavaScript language = video.getMediaProperty(["language"]); Resulting Locator MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Locator interface returned representing locator property Ontology Media Resources specification interface Locator MediaAnnotation attribute DOMString locatorLink;}; Attributes locatorLink type DOMString attribute location media resource URI. exceptions. Example JavaScript locator = image.getMediaProperty(["locator"]);/** Resulting Creation Properties Contributor MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Contributor interface returned representing contributor property Ontology Media Resources specification interface Contributor MediaAnnotation attribute DOMString contributorLink; attribute DOMString contributorLabel; attribute DOMString roleLink; attribute DOMString roleLabel;}; Attributes contributorLabel type DOMString attribute contributor agent making contribution) plain string exceptions. contributorLink type DOMString attribute contributor agent making contribution) URI. exceptions. roleLabel type DOMString attribute role contributor plain string. exceptions. roleLink type DOMString attribute role contributor URI. exceptions. Example JavaScript contributor = video.getMediaProperty(["contributor"]);/** Resulting Burton", Creator MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Creator interface returned representing creator property Ontology Media Resources specification interface Creator MediaAnnotation attribute DOMString creatorLink; attribute DOMString creatorLabel; attribute DOMString roleLink; attribute DOMString roleLabel;}; Attributes creatorLabel type DOMString attribute creator agent participating creation media resource) plain string. exceptions. creatorLink type DOMString attribute creator agent participating creation media resource) URI. exceptions. roleLabel type DOMString attribute role creator plain string. exceptions. roleLink type DOMString attribute role creator URI. exceptions. Example JavaScript creator = video.getMediaProperty(["creator"]);/** Resulting Shakespeare", MADate MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Date interface returned representing date property Ontology Media Resources specification property been renamed order avoid naming conflicts other objects named web applications. interface MADate MediaAnnotation attribute DOMString date; attribute DOMString typeLink; attribute DOMString typeLabel;}; Attributes date type DOMString attribute date related media resource. date value be represented using specific date/time data types XML Schema, depending available precision: gYear gYearMonth, date, dateTime, dateTimeStamp. exceptions. typeLabel type DOMString attribute category date creation date, broadcast date, release date, date recorded date edited) plain string. exceptions. typeLink type DOMString attribute category date creation date, broadcast date, release date, date recorded date edited) URI. exceptions. Example JavaScript maDate = video.getMediaProperty(["date"]);/** Resulting date", Location MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Location interface returned representing location property inthe Ontology Media Resources specification interface Location MediaAnnotation attribute DOMString locationLink; attribute DOMString locationLabel; attribute double longitude; attribute double latitude; attribute double altitude; attribute DOMString coordinateSystemLabel; attribute DOMString coordinateSystemLink;}; Attributes altitude type double attribute altitude location, w.r.t. coordinate system specified coordiateSystem attribute. exceptions. coordinateSystemLabel type DOMString attribute coordinate system used name. exceptions. coordinateSystemLink type DOMString attribute coordinate system used URI. exceptions. latitude type double attribute latitude location, w.r.t. coordinate system specified coordiateSystem attribute. exceptions. locationLabel type DOMString attribute location name plain string. exceptions. locationLink type DOMString attribute location URI. exceptions. longitude type double attribute longitude location, w.r.t. coordinate system specified coordiateSystem attribute. exceptions. Example JavaScript location = video.getMediaProperty(["location"]);/** Resulting Jose", Content Properties Description MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Description interface returned representing description property Ontology Media Resources specification interface Description MediaAnnotation attribute DOMString descriptionLabel;}; Attributes descriptionLabel type DOMString attribute description content media resource. exceptions. Example Javascript description = image.getMediaProperty(["description"]);/** Resulting picture W3C MAWG F2F meeting Stockholm.", Keyword MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Keyword interface returned representing keyword property Ontology Media Resources specification interface Keyword MediaAnnotation attribute DOMString keywordLabel; attribute DOMString keywordLink;}; Attributes keywordLabel type DOMString attribute keyword describing content plain string. exceptions. keywordLink type DOMString attribute URI representing keyword describing content. exceptions. Example Javascript keyword = image.getMediaProperty(["keyword"]);/** Resulting people organisation", Genre MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Genre interface returned representing genre property Ontology Media Resources specification interface Genre MediaAnnotation attribute DOMString genreLabel; attribute DOMString genreLink;}; Attributes genreLabel type DOMString attribute genre media resource plain string. exceptions. genreLink type DOMString attribute genre media resource URI. exceptions. Example Javascript genre = image.getMediaProperty(["genre"]);/** Resulting Rating MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Rating interface returned representing rating property Ontology Media Resources specification interface Rating MediaAnnotation attribute double ratingValue; attribute DOMString ratingSystemLabel; attribute DOMString ratingSystemLink; attribute double minimum; attribute double maximum;}; Attributes maximum type double attribute maximum rating value rating system. exceptions. minimum type double attribute minimum rating value rating system. exceptions. ratingSystemLabel type DOMString attribute rating system plain string. exceptions. ratingSystemLink type DOMString attribute rating system URI. exceptions. ratingValue type double attribute value rating. exceptions. Example Javascript rating = image.getMediaProperty(["rating"]);/** Resulting Doe", Relational Properties Relation MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Relation interface returned representing relation property Ontology Media Resources specification interface Relation MediaAnnotation attribute DOMString targetLink; attribute DOMString targetLabel; attribute DOMString typeLink; attribute DOMString typeLabel;}; Attributes targetLabel type DOMString attribute related resource plain string. exceptions. targetLink type DOMString attribute related resource URI. exceptions. typeLabel type DOMString attribute type relationship plain string. exceptions. typeLink type DOMString attribute type relationship URI. exceptions. Example Javascript relation = image.getMediaProperty(["relation"]);/** Resulting picture MAWG Stockholm", Collection MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Collection interface returned representing collection property inthe Ontology Media Resources specification interface Collection MediaAnnotation attribute DOMString collectionLink; attribute DOMString collectionLabel;}; Attributes collectionLabel type DOMString attribute name collection media resource plain string. exceptions. collectionLink type DOMString attribute name collection media resource URI. exceptions. Example Javascript collection = image.getMediaProperty(["collection"]);/** Resulting Work Pictures", Rights Properties Copyright MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Copyright interface returned representing copyright property Ontology Media Resources specification interface Copyright MediaAnnotation attribute DOMString copyrightLabel; attribute DOMString holderLabel; attribute DOMString holderLink;}; Attributes copyrightLabel type DOMString attribute copyright statement plain string. exceptions. holderLabel type DOMString attribute copyright holder plain string. exceptions. holderLink type DOMString attribute identified copyright holder URI. exceptions. Example Javascript copyright = image.getMediaProperty(["copyright"]);/** Resulting images collection are copyrighted John Doe.", Doe", Policy MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Policy interface returned representing policy property Ontology Media Resources specification interface Policy MediaAnnotation attribute DOMString statementLink; attribute DOMString statementLabel; attribute DOMString typeLink; attribute DOMString typeLabel;}; Attributes statementLabel type DOMString attribute plain string policy statement. exceptions. statementLink type DOMString attribute URI policy statement. exceptions. typeLabel type DOMString attribute type policy URI plain string. exceptions. typeLink type DOMString attribute type policy URI. exceptions. Example Javascript policy = image.getMediaProperty(["policy"]);/** Resulting Generic Distribution Properties Publisher MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Publisher interface returned representing publisher property Ontology Media Resources specification interface Publisher MediaAnnotation attribute DOMString publisherLink; attribute DOMString publisherLabel;}; Attributes publisherLabel type DOMString attribute publisher plain string. exceptions. publisherLink type DOMString attribute publisher URI. exceptions. Example Javascript publisher = image.getMediaProperty(["publisher"]);/** Resulting TargetAudience MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing TargetAudience interface returned representing targetAudience property Ontology Media Resources specification interface TargetAudience MediaAnnotation attribute DOMString audienceLink; attribute DOMString audienceLabel; attribute DOMString classificationSystemLink; attribute DOMString classificationSystemLabel;}; Attributes audienceLabel type DOMString attribute target audience plain string. exceptions. audienceLink type DOMString attribute target audience URI. exceptions. classificationSystemLabel type DOMString attribute classification system plain string. exceptions. classificationSystemLink type DOMString attribute classification system URI. exceptions. Example Javascript targetAudience = image.getMediaProperty(["targetAudience"]);/** Resulting Admitted", Fragments Properties Fragment MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Fragment interface returned representing fragment property Ontology Media Resources specification interface Fragment MediaAnnotation attribute DOMString identifier; attribute DOMString roleLink; attribute DOMString roleLabel;}; Attributes identifier type DOMString attribute fragment Media Fragment URI spatial track). exceptions. roleLabel type DOMString attribute role fragment plain string, be filtered getMediaProperty operation. exceptions. roleLink type DOMString attribute role fragment URI, be filtered getMediaProperty operation. exceptions. Example Javascript fragment = movie.getMediaProperty(["fragment"]);/** Resulting NamedFragment MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing NamedFragment interface returned representing namedFragment property Ontology Media Resources specification interface NamedFragment MediaAnnotation attribute DOMString identifier; attribute DOMString label;}; Attributes identifier type DOMString attribute named fragment Media Fragment URI. exceptions. label type DOMString attribute plain text label named media fragment, be used contruct Media Fragment URI fro named fragment. exceptions. Example Javascript namedFragment = movie.getMediaProperty(["namedFragment"]);/** Resulting Technical Properties FrameSize MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing FrameSize interface returned representing frameSize property Ontology Media Resources specification interface FrameSize MediaAnnotation attribute double width; attribute double height; attribute DOMString unit;}; Attributes height type double attribute height frame. exceptions. unit type DOMString attribute unit frame width/height. default value pixels. exceptions. width type double attribute width frame. exceptions. Example Javascript frameSize = image.getMediaProperty(["frameSize"]);/** Resulting Compression MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Compression interface returned representing compression property Ontology Media Resources specification interface FrameSize MediaAnnotation attribute DOMString compressionLink; attribute DOMString compressionLabel;}; Attributes compressionLabel type DOMString attribute compression type media resource plain string. exceptions. compressionLink type DOMString attribute compression type media resource URI. exceptions. Example Javascript compression = video.getMediaProperty(["compression"]);/** Resulting Duration MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Duration interface returned representing duration property Ontology Media Resources specification interface Duration MediaAnnotation attribute double duration;}; Attributes duration type double attribute duration media resource seconds) double value. exceptions. Example Javascript duration = video.getMediaProperty(["duration"]); Resulting Format MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing Format interface returned representing format property Ontology Media Resources specification interface Format MediaAnnotation attribute DOMString formatLink; attribute DOMString formatLabel;}; Attributes formatLabel type DOMString attribute MIME type media resource. exceptions. formatLink type DOMString attribute MIME type media resource URI. exceptions. Example Javascript format = image.getMediaProperty(["format"]);/** Resulting SamplingRate MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing SamplingRate interface returned representing samplingRate property Ontology Media Resources specification interface SamplingRate MediaAnnotation attribute double samplingRate;}; Attributes samplingRate type double attribute audio sampling rate Hz) double. exceptions. Example Javascript samplingrate = audio.getMediaProperty(["samplingRate"]);/** Resulting FrameRate MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing FrameRate interface returned representing frameRate property inthe Ontology Media Resources specification interface FrameRate MediaAnnotation attribute double frameRate;}; Attributes frameRate type double attribute framerate fps) double value. exceptions. Example Javascript framerate = video.getMediaProperty(["frameRate"]);/** Resulting AverageBitRate MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing AverageBitRate interface returned representing averageBitRate property Ontology Media Resources specification interface AverageBitRate MediaAnnotation attribute double averageBitRate;}; Attributes averageBitRate type double attribute average bitrate kbps) double value. exceptions. Example Javascript bitrate = video.getMediaProperty(["averageBitRate"]);/** Resulting NumTracks MediaResource.getMediaProperty operation invoked value propertyNames parameter, object implementing NumTracks interface returned representing numTracks property Ontology Media Resources specification interface NumTracks MediaAnnotation attribute short number; attribute DOMString typeString;}; Attributes number type short attribute number tracks integer value. exceptions. typeString type DOMString attribute type tracks are counted plain string audio, subtitle). exceptions. Example Javascript numTracks = video.getMediaProperty(["numTracks"]);/** Resulting MetadataSource interface MetadataSource interface used identify other metadata sources. interface MetadataSource attribute DOMString metadataSource; attribute DOMString sourceFormat;}; Attributes metadataSource type DOMString URI identifying metadata source. exceptions. sourceFormat type DOMString name actual metadata format. use metadata format identifiers defined Ontology Media Resources specification exceptions. Examples Javascript metadataSource = new MetadataSource("http://www.w3.org/2008/WebVideo/Annotations/drafts/metadata_formats/DC_example1.xml","dc"); API Status Codes section set status codes defined API indicate system behavior. described section status code returned attributes MediaAnnotation object returned method call API. status codes are used API level, applied client side server side implementations. Numerical Code Textual Description Example property delivered correctly Content property retrieved content Partial Content only subset available data stored result set Bad Request syntactical error Not Found queries resource not found Unsupported Media Type get duration call image data store Property not defined Source Format location not defined MediaRSS Internal Server Error internal library extractor) crashes Property not supported subset properties implemented Usage examples Usage JavaScript API part examples use API using JavaScript actual implementations. Moreover, examples assumed implementation API find metadata specific media resource necessary location metadata be configured use MetadataSource interface). implementation provide mappings different metadata formats core properties Ontology Media Resources specification Example Return name director movie now". video array title now" = < mediaResourceVideoArray.length; titles video, variable be filled array MediaAnnotation objects. titles = mediaResourceVideoArray[i].getMediaProperty(["title"], request finished correctly == true) j = j < titles.length; j++) title matches == Now") director video, variable be filled array MediaAnnotation objects. tempResults = mediaResourceVideoArray[i].getMediaProperty(["contributor"], k = k < tempResults.length; k++) == result = tempResults[i]; break; Resulting Ford Coppola", = Example Retrieve title second song album Tree" U2. id second song using fragments property tracks = albumMediaResource.getMediaProperty(["fragment"], = tracks[1].identifier; identifier get mediaResource object track mediaResource = new MediaResource(); == mediaResource.getSupportedModes() == syncMediaResource = mediaResource.createMediaResource(trackIdentifier, new Array(), title track title = syncMediaResource.getMediaProperty(["title"], Resulting Still Haven't Found Looking = Example Return genre movie Now". genre = movie.getMediaProperty(["genre"], Resulting = = Usage Web Service part API be implemented using web services. Note Web IDL currently not provide bindings web services. given examples correspond examples given Section property. Request: http://example.com/my-media-resource/?getOriginalMetadata=DC Response format): version='1.0'?><metadata xmlns='http://example.org/myapp/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://example.org/myapp/ http://example.org/myapp/schema.xsd' xmlns:dc='http://purl.org/dc/elements/1.1/'><dc:title>DC title</dc:title></metadata>"}] following examples illustrate request values different properties. Request: http://example.com/my-media-resource/?ma-query=identifier Response format): Request: http://example.com/my-media-resource/?ma-query=title Response format): Horizon", title", Request: http://example.com/my-media-resource/?ma-query=language Response format): Request: http://example.com/my-media-resource/?ma-query=locator Response format): Request: http://example.com/my-media-resource/?ma-query=contributor Response format): Burton", Request: http://example.com/my-media-resource/?ma-query=creator Response format): Shakespeare", Request: http://example.com/my-media-resource/?ma-query=date Response format): date", Request: http://example.com/my-media-resource/?ma-query=location Response format): Jose", Request: http://example.com/my-media-resource/?ma-query=description Response format): picture W3C MAWG F2F meeting Stockholm.", Request: http://example.com/my-media-resource/?ma-query=keyword Response format): people organisation", Request: http://example.com/my-media-resource/?ma-query=genre Response format): Request: http://example.com/my-media-resource/?ma-query=rating Response format): Doe", Request: http://example.com/my-media-resource/?ma-query=relation Response format): picture MAWG Stockholm", Request: http://example.com/my-media-resource/?ma-query=collection Response format): Work Pictures", Request: http://example.com/my-media-resource/?ma-query=copyright Response format): images collection are copyrighted John Doe.", Doe", Request: http://example.com/my-media-resource/?ma-query=policy Response format): Generic Request: http://example.com/my-media-resource/?ma-query=publisher Response format): Request: http://example.com/my-media-resource/?ma-query=targetAudience Response format): Admitted", Request: http://example.com/my-media-resource/?ma-query=fragment Response format): Request: http://example.com/my-media-resource/?ma-query=namedFragment Response format): Request: http://example.com/my-media-resource/?ma-query=frameSize Response format): Request: http://example.com/my-media-resource/?ma-query=compression Response format): Request: http://example.com/my-media-resource/?ma-query=duration Response format): Request: http://example.com/my-media-resource/?ma-query=format Response format): Request: http://example.com/my-media-resource/?ma-query=samplingRate Response format): Request: http://example.com/my-media-resource/?ma-query=frameRate Response format): Request: http://example.com/my-media-resource/?ma-query=averageBitRate Response format): Request: http://example.com/my-media-resource/?ma-query=numTracks Response format): Implementation Notes section recommendations implementators handling missing multiple identifiers media resources/fragments well interoperability implementations. Multiple identifiers media resources fragments source formats, be possible identify resource fragments multiple ways, e.g. more identifiers, fragment name temporal/spatial fragment URIs. example, there be temporal media fragment, be addressed time range, also assigned ID. RDF representation Ontology Media Resources, be represented recommended guidelines) using owl:sameAs. ensure similar behaviour API, implementation return such identifiers response. queries properties fragment multiple identifiers are made, implementation accept alternative identifiers return same response Missing fragment identifiers are source formats, contain metadata fragment track) specifying kind identifier RDF representation not problem, blank nodes be used. API implementation, client requesting list fragments query properties fragment case there identifier. implementation generate identifier fragment such case ensure valid sufficiently long time so client use subsequent queries properties fragments. identifier not guaranteed remain permanently valid. be implemented different ways, including following: session-aware environment user agent, web service environment session handling), identifier be bound session remain valid least duration session. stateless environment, identifier be same clients remain valid defined time been last used part query response). identifier be defined be unique permanent. case implementation manage assignment identifiers metadata sources. Interoperability Implementations API be implemented different modes. asynchronous mode mandatory synchrounous optional. context, interoperability modes be desired feature order provide processing modes based implementation mode only. implementation optional synchronous mode API Web Service) turned mandatory asynchronous communication wrapper. Therefore required wrapper functionality implemented JavaScript using Web Workers specification processing non-blocking scripts. demo wrapper code be downloaded First, existing operations MediaResource interface are adapted order support synchronous well asynchronous mode Then, implementation AsyncMediaResource interface wrapping synchronous communication added. Therefore, operations AsyncMediaResource interface getOriginalMetadata) refer corresponding synchronous calls Web Workers media_property_worker.js). Finally, result synchronous communication pushed forward synchronous operation invoking callback function. Wrapping asynchronous implementation synchronous call infeasible JavaScript threads be suspended interact concurrent ones. Nonetheless, programming language Java), be used warp asynchronous API calls web service calls. Security Considerations specification API access metadata information related media resources Web. APIs provide means requesting metadata information, already be accessed different formats, separate document embedded media resources. such, API additional security issue. nevertheless note metadata be used access personal information someone declaration agreement. example, temporal geographic information media resource indirectly provide information creator. are related activities technical documents W3C working topics, such Policy Requirements DAP WG, ODRL P3P PLING Wiki A. Web IDL description Follow link download WebIDL description IDL file. interface MediaResource short getSupportedModes(); MediaResource createMediaResource(DOMString mediaResource, optional MetadataSource[] metadataSources, optional short mode);};interface AsyncMediaResource MediaResource void getMediaProperty(DOMString[] propertyNames, PropertyCallback successCallback, ErrorCallback errorCallback, optional DOMString fragment, optional DOMString sourceFormat, optional DOMString language void getOriginalMetadata sourceFormat, MetadataCallback successCallback, ErrorCallback errorCallback);};interface PropertyCallback void handleEvent mediaAnnotations);};interface MetadataCallback void handleEvent metadata);};interface ErrorCallback void handleEvent errorStatus);};interface SyncMediaResource MediaResource MediaAnnotation[] getMediaProperty(DOMString[] propertyNames, optional DOMString fragment, optional DOMString sourceFormat, optional DOMString language); DOMString[] getOriginalMetadata sourceFormat);};interface MetadataSource attribute DOMString metadataSource; attribute DOMString sourceFormat;};interface MediaAnnotation attribute DOMString propertyName; attribute DOMString value; attribute DOMString language; attribute DOMString sourceFormat; attribute DOMString fragmentIdentifier; attribute DOMString mappingType; attribute short statusCode;};interface Identifier MediaAnnotation attribute DOMString identifierLink;};interface Title MediaAnnotation attribute DOMString titleLabel; attribute DOMString typeLink; attribute DOMString typeLabel;};interface Language MediaAnnotation attribute DOMString languageLink; attribute DOMString languageLabel;}; interface Locator MediaAnnotation attribute DOMString locatorLink;};interface Contributor MediaAnnotation attribute DOMString contributorLink; attribute DOMString contributorLabel; attribute DOMString roleLink; attribute DOMString roleLabel;};interface Creator MediaAnnotation attribute DOMString creatorLink; attribute DOMString creatorLabel; attribute DOMString roleLink; attribute DOMString roleLabel;};interface MADate MediaAnnotation attribute DOMString date; attribute DOMString typeLink; attribute DOMString typeLabel;};interface Location MediaAnnotation attribute DOMString locationLink; attribute DOMString locationLabel; attribute double longitude; attribute double latitude; attribute double altitude; attribute DOMString coordinateSystemLabel; attribute DOMString coordinateSystemLink;};interface Description MediaAnnotation attribute DOMString descriptionLabel;};interface Keyword MediaAnnotation attribute DOMString keywordLink; attribute DOMString keywordLabel;};interface Genre MediaAnnotation attribute DOMString genreLink; attribute DOMString genreLabel;};interface Rating MediaAnnotation attribute double ratingValue; attribute DOMString ratingSystemLink; attribute DOMString ratingSystemLabel; attribute double min; attribute double max; Relation MediaAnnotation attribute DOMString targetLink; attribute DOMString targetLabel; attribute DOMString typeLink; attribute DOMString typeLabel;};interface Collection MediaAnnotation attribute DOMString collectionLink; attribute DOMString collectionLabel;};interface Copyright MediaAnnotation attribute DOMString copyrightLabel; attribute DOMString holderLink; attribute DOMString holderLabel;};interface Policy MediaAnnotation attribute DOMString statementLink; attribute DOMString statementLabel; attribute DOMString typeLink; attribute DOMString typeLabel;};interface Publisher MediaAnnotation attribute DOMString publisherLink; attribute DOMString publisherLabel;};interface TargetAudience MediaAnnotation attribute DOMString audienceLink; attribute DOMString audienceLabel; attribute DOMString classificationSystemLink; attribute DOMString classificationSystemLabel;};interface Fragment MediaAnnotation attribute DOMString identifier; attribute DOMString roleLink; attribute DOMString roleLabel;};interface NamedFragment MediaAnnotation attribute DOMString identifier; attribute DOMString label;};interface FrameSize MediaAnnotation attribute double width; attribute double height; attribute DOMString unit;};interface Compression MediaAnnotation attribute DOMString compressionLink; attribute DOMString compressionLabel;};interface Duration MediaAnnotation attribute double duration;};interface Format MediaAnnotation attribute DOMString formatLink; attribute DOMString formatLabel;};interface SamplingRate MediaAnnotation attribute double samplingRate;};interface FrameRate MediaAnnotation attribute double frameRate;}; interface AverageBitRate MediaAnnotation attribute double averageBitRate;};interface NumTracks MediaAnnotation attribute short number; attribute DOMString typeString;}; B. Acknowledgements document work W3C Media Annotations Working Group. Members Working Group are time writing, alphabetical order): Werner Bailer RESEARCH), Tobias BÃ¼rger Invited expert), Eric Carlson Inc.), Pierre-Antoine Champin Lyon), Ashish Chawla Invited expert), Jaime Delgado PolitÃ¨cnica Catalunya), Jean-Pierre Evain Invited expert), Martin HÃ¶ffernig RESEARCH), Philip JÃ¤genstedt Software), Ralf Klamma Invited expert), WonSuk Lee Electronics Co., Ltd.), VÃ©ronique MalaisÃ© Universiteit), Erik Mannens Hui Miao Electronics Co., Ltd.), Thierry Michel Frank Nack Amsterdam), Soohong Daniel Park Electronics Co., Ltd.), Silvia Pfeiffer Invited Experts), Chris Poppe Victor RodrÃguez PolitÃ¨cnica Catalunya), Felix Sasaki University Applied Sciences), David Singer Inc.), Florian Stegmaier Invited expert), John Strassner Invited expert), Joakim SÃ¶derberg Mari Carmen SuÃ¡rez-Figueroa Invited expert) Thai Wey Then Inc.), Ruben Tous PolitÃ¨cnica Catalunya), RaphaÃ«l Troncy Vassilis Tzouvaras Davy Van Deursen people have contributed discussionson public-media-annotation@w3.org are also gratefully acknowledged. C. References C.1 Normative references Raphael Troncy; Erik Mannens; Silvia Pfeiffer Davy Van Deursen. Media Fragments URI W3C Recommendation September URL: http://www.w3.org/TR/2012/REC-media-frags-20120925/ WonSuk Lee; Werner Bailer; Tobias BÃ¼rger, et al. Media Fragments URI W3C Recommendation February URL: http://www.w3.org/TR/2012/REC-mediaont-10-20120209/ S. Bradner. Key words use RFCs Indicate Requirement Levels. March Internet RFC URL: http://www.ietf.org/rfc/rfc2119.txt Cameron McCormack. Web IDL, April W3C Candidate Recommendation. progress.) URL: http://www.w3.org/TR/2012/CR-WebIDL-20120419/ C.2 Informative references A. Phillips; M. Davis. Tags Identifying Languages September IETF Best Current Practice. URL: http://tools.ietf.org/html/bcp47 MAWG code repository. URL: http://sourceforge.net/projects/mawg WonSuk Lee; Felix Sasaki; Tobias BÃ¼rger; VÃ©ronique MalaisÃ©. Use Cases Requirements Ontology Metadata API Media Object Working Draft January URL: http://www.w3.org/TR/2010/WD-media-annot-reqs-20100121/ Renato Iannella. Open Digital Rights Language Version W3C Note. September URL: http://www.w3.org/TR/odrl Matthias Schunter; Rigo Wenning. Platform Privacy Preferences Specification. November W3C Note. URL: http://www.w3.org/TR/2006/NOTE-P3P11-20061113 Policy Languages Interest Group PLING Wiki. URL: http://www.w3.org/Policy/pling/ Laura Arribas; Paddy Byers; Marcin Hanclik; Frederick Hirsch; David Rogers. Device API Access Control Use Cases Requirements March W3C Working Group Note. URL: http://www.w3.org/TR/2011/NOTE-dap-policy-reqs-20110317/ Ian Hickson. Web Workers 01 May W3C Candidate Recommendation. URL: http://www.w3.org/TR/workers/ 