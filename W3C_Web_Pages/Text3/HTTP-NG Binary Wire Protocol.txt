HTTP-NG Binary Wire Protocol WD-HTTP-NG-wire-19980710 HTTP-NG Binary Wire Protocol W3C Working Draft July version: http://www.w3.org/TR/1998/WD-HTTP-NG-wire-19980710 Latest version: http://www.w3.org/TR/WD-HTTP-NG-wire Authors: Bill Janssen, Xerox PARC, <janssen@parc.xerox.com> Copyright W3C INRIA, Keio Rights Reserved. W3C liability, trademark, document use software licensing rules apply. Status Document W3C Working Draft review W3C members other interestedparties. draft document be updated, replaced obsoletedby other documents time. inappropriate use W3C Working Draftsas reference material cite other progress". Alist current W3C technical reports be found athttp://www.w3.org/TR. document been produced part W3C HTTP-ng Activity. Thisis work progress not imply endorsement consensus W3C members HTTP-ng Protocol Design Working Group. expectthe document evolve get more data Web CharacterizationGroup describing current state Web. document binary protocol be used sendingHTTP-ng operation invocations terminations network connection.It part suite documents describing HTTP-NG design prototypeimplementation: HTTP-NG Short- Longterm Goals, WD HTTP-NG Architectural Model, WD HTTP-NG Wire Protocol, WD Classic Web Interfaces HTTP-NG, WD MUX Protocol, WD Description HTTP-NG Testbed, Note send comments specification Syntax Used Document data description languages are used document. first, calledISL, abstract language defining data types interfaces. isdescribed intheILU manual. second pseudo-C syntax. be interpretedas C data structure layouts automatic padding size boundaries,and allowing arbitrary bit-size limits structs unions well onints enums. use ISL pseudo-C marked languageis being used. Model Operation protocol particular model operation based conventionalRPC technology, certain variations. basic idea clients makeuse services exported server invoking operations objectsresident server. client connected server aconnection, operation invocation requests theclient caller) server thecallee), operation results callee back caller.Multiple connections exist simultaneously same client andserver. connection state associated callerand callee use shorthand notations data passed theother party. RPC messages are defined protocol: Request, usedby caller invoke operation callee, Reply, whichis used transfer operation results callee caller. EveryReply message associated particular Request message, not everyRequest message Reply message associated Connections aredirectional; operation invocation Requests always flow caller tothe callee; Replies always flow callee caller. additionto RPC messages, several control messages are defined protocol.These control messages are used improve efficiency robustnessof connection. are intended be generated consumed theimplementation wire protocol, have direct effect onthe applications using protocol. Request message important elements, operationand discriminant object, discriminant; also containsdata values are input parameters operation. model usedhere operations are grouped sets, elements whichhave well-defined ordering; operation set called aninterface. further interface be identifiedby URN also UUID; operation interface beidentified ordinal number operation ordering ofthe elements interface. discriminant objectcan be identified object ID, also URN UUID. providesfor fact most distributed object systems, discriminantsavailable particular server share common prefix object ID;this called server ID. Note characteristic isnot required, protocol efficiency optimization thecase true. such case, call portion objectID not contained server ID instance handle.Each request implicit connection-specific serial number associatedwith serial numbers begin value have maximumvalue maximum serial number connection beenreached, connection be terminated, further operations beinvoked new connection. Reply message termination status operation, providesinformation synchronization, contain data values areoutput parameters values' operation. explicitserial number indicate Request reply Replies eitherindicate successful completion operation, several different kindsof exceptional termination; exception signalled, additional informationis passed indicate possible exceptions operationwas raised. model messages are carried back forth parties transport subsystem. transportsubsystem be reliable, sequenced, andmessage-oriented. reliable, mean message ishanded transport, transport deliver otherparty, signal error reliable delivery be ascertained.By sequenced, mean transport deliver messages otherparty same order sender handed transport.By message-oriented, mean transport provide indication ofthe beginning ending messages, reference data encodedinside message. example type transport be recordmarking defined inInternetRFC used TCP/IP. Global Issues Byte Order values use standard' byte order, i.e. big-endian, allInternet protocols use future problem theInternet, protocol be affected solution used tosolve problem wider Internet context. Note data marshallingformat defined Internet RFC protocol byreference, also defined be big-endian protocol. Alignment Padding marshalled form value 32-bit boundary. marshalledform value padded-after, necessary, 32-bit boundary.The padding bits be combination. Marshalling Format Marshalling XDR format specified inInternetRFC be argued format inexcusably wastefulwith certain value types, such boolean bits) byte bits), andthat 16-bit 8-bit oriented format be designed used itsplace. However, argument using existing Internet standard thispurpose, rather inventing new strong new format shouldonly be defined measurement overhead shows gross waste. Security protocol security provisions are made levelabove typically application interfaces, level belowit, typically use secure transport mechanism. noprotocol-level mechanisms providing assuring concerns normallyrelated security. Session Context previous protocols, protocol session-oriented.That means individual messages are sent context session,and are context-sensitive. context-sensitivity session-widecompression. However, support various kinds marshalling architecturesin implementations system, marshalling be done acontext-insensitive fashion, expense sending additional bytes acrossthe wire. However, unmarshalling implementations always be capable oftracking using context-sensitive information. Utility types following data structures are defined pseudo-C: typedef enum False = True = Boolean;typedef enum InitializeConnection = TerminateConnection = DefaultCharset = ControlMsgType;typedef enum Success = UserException = occurred operation SystemExceptionBefore = occurred beginning operation SystemExceptionAfter = occurred beginning operation ReplyStatus;typedef struct Boolean cached_disc True cached object key union struct Boolean cache_key True sides cache unsigned key_len length key bytes uncached_key; unsigned cache_index cache index cached DiscriminantID;typedef struct Boolean cached_op True cached id union struct Boolean cache_operation True be cached unsigned method_id method index uncached_op_info; unsigned cache_index cache index set OperationID;typedef enum MangledMessage = bad protocol synchronization ProcessFinished = sending party ResourceManagement = transient close WrongCallee = bad server ID received MaxSerialNumber = maximum serial number was used TerminationCause;typedef struct unsigned major unsigned minor ProtocolVersion;typedef unsigned Unused; Messages Only few messages are defined. InitializeConnection messageis used caller verify connected right server,and using correct version wire protocol. TheDefaultCharset message sides independently definea default value string charsets. Request message causesan operation be started remote server. Reply messageis sent server client inform completion statusof operation, convey result values. TheTerminateConnection message side indicate gracefulshutdown connection. Extension Headers protocol uses feature called extension header providefor extensibility tailorability. Features such serialization contextsor global thread identifiers be implemented feature. extensionheader encapsulated value ISL type ExtensionHeader.Each request message reply message contain value typeExtensionHeaderList, number extension headers.The following ISL fragment typesExtensionHeaderList ExtensionHeader: INTERFACE HTTP-ng-w3ng IMPORTS HTTP-ng END BRAND "http-ng.w3.org";...TYPE SimpleString = STRING LANGUAGE LIMIT 0xFFFF;TYPE CinfoString = STRING LANGUAGE LIMIT 0xFFFF;TYPE ExtensionHeader = RECORD name HTTP-ng.UUIDString, value PICKLEEND;TYPE ExtensionHeaderList = SEQUENCE ExtensionHeader;... Request Message Request header typedef struct Boolean control_msg == FALSE Boolean ext_hdr_present True ext hdr list present OperationID operation_id operation DiscriminantID object_key discriminant RequestMsgHeader bytes total actual message following sections: RequestMsgHeader extension header list, XDR string containing object type ID object type definingoperation, not cached bytes object_key, not cached, padded byte boundary] explicit input parameter values, padded byte boundary operation_id connection-specific 14-bitcache index, 13-bit method id zero-based ordinal position themethod ISL declaration object type operation isdefined) operation. method id given, additional value,an XDR string value containing object type ID objecttype operation defined, also passed. means thisprotocol not support interfaces object types have more than8192 methods directly defined. object_key 14-bit connection-specific cache index,or length variable length octet sequence fewer bytescontaining service-point-relative name object URL). object key value False,False, normally byte variable length object key, reservedfor use protocol. object_key marshalled thetransport XDR value type fixed-length opaque data,where length specified v.key_len field ofthe object_key. Operation Object Memoizing Callers reduce size messages memoizing operation IDs objectIDs are passed connection. done caller settingthe cache_key object IDs) cache_operation(for operation IDs) bit DiscriminantID orOperationID struct object key operation ID firstsent. side then assign available index objector operation. space operations separate space objectids, so total possible values available memoizingof discriminant objects, different possible values memoizingof operations. Note index passed implicitly, so sides connectionmust synchronize use indices. shared set indices be loaded connection mechanismbefore messages are sent. specification not define mechanismfor doing so. Reply Message Reply header typedef struct Boolean control_msg == FALSE Boolean ext_hdr_present True ext hdr list present ReplyStatus Unused reply_1 unsigned serial_no serial Request ReplyMsgHeader; bytes total actual message following fields: ReplyMsgHeader extension header list, exception ID unsigned), explicit output parameter values, padded byte boundary InitializeConnection Message InitializeConnection header typedef struct Boolean control_msg == TRUE ControlMsgType msg_type == InitializeConnection Unused verify_1 ProtocolVersion version version protocol? unsigned server_id_len length server ID InitializeConnectionMsgHeader; actual message following fields: InitializeConnectionMsgHeader server_id_len-length server ID supposed callee, paddedto 4-byte boundary message sent caller callee first message theconnection. used pass server ID connection clientto server, so sides understand omitted prefix portionof discriminant IDs server ID received callee not thecorrect server ID callee callee objects do nothave prefix object IDs), callee terminate theconnection, appropriate reason. server ID passed XDRfixed-length opaque data value length specified inserver_id_len. TerminateConnection Message TerminateConnection header typedef struct Boolean control_msg == TRUE ControlMsgType msg_type == TerminateConnection TerminationCause cause: connection terminated unsigned serial_no last request processed/sent TerminateConnectionMsgHeader; actual message simply header; gracefulconnection shutdown. sent caller callee, orfrom callee caller, informs other party cancellingthe connection, reasons: badly formatted message arrived other party, protocol sychronization believe lost, caller sent InitializeConnection message wrong major version protocol; party thread, going away, other party not attempt reconnect connection being terminated due active resource management; other party attempt reconnect needs reason typically only useful callee caller; caller sent InitializeConnection message wrong server ID; caller used maximum serial number available connection. serial_no field serial number last messagecompletely processed caller TerminateConnectionis sent caller callee), serial number last messagesent callee sent callee caller). further messagesshould be sent connection sender aTerminateConnection message been sent, areceiver TerminateConnection messsage been received. DefaultCharset Message DefaultCharset header typedef struct Boolean control_msg == TRUE ControlMsgType msg_type == DefaultCharset Unused bits_12: unused unsigned charset_mibenum default charset DefaultCharsetMsgHeader; message sent side connection establish defaultcharset subsequent messages sent side connection. Thecharset string values are marshalled octet sequences. Thedefault charset default marshalling, overridden anexplicit charset string value. side connection establisha default charset independently other side connection; thedefault charset only string values messages coming thatside. new value default charset be established time bysending DefaultCharset message. Data Marshalling data value format used parameters XDR format specified inInternetRFC However, extend XDR specification additionaltype, called flagged variable-length opaque data. similarto XDR's regular variable-length opaque data, high-orderbit length field used flag bit, instead being part thelength. means flagged variable-length opaque data only carryopaque data lengths less equal flag length n n-1 bit bits------->|<------n bytes------>|<---r bytes--->| mod = FLAGGED VARIABLE-LENGTH OPAQUE Boolean Type Values type BOOLEAN are passed XDR bool. Enumeration Types Values enumeration types are passed XDR enum. enumerationvalue assigned ordinal value declaration theenumeration type, starting value Numeric Types Fixed-point Types Values fixed-point types are passed passing value numerator.We define number special cases efficient marshalling common integertypes, well general case passing values fixed-point typesthat are not covered special cases. Special cases: 32-bit integer: Fixed-point values minimum-numerator value greater equal minimum numerator value less equal are passed XDR integer. 32-bit unsigned integer: Fixed-point values minimum-numerator value greater equal maximum numerator less equal are passed XDR unsigned integer. 64-bit integer: Fixed-point values minimum numerator value greater equal maximum numerator less equal 9223372036854775807are passed XDR hyper integer. 64-bit unsigned integer: Fixed-point values minimum-numerator value greater equal maximum numerator value less equal are passed XDR unsigned hyper integer. General case: numerator value passed XDR flagged variable-lengthopaque data, bytes data containing value expressedas base-256 number, big-endian order; most significantdigit value first. flag bit used carry sign; flagbit positive number negative number. Floating-point Types define number special cases efficient marshalling commonfloating-point types, well general case passing values offloating-point types are not covered special cases. Special cases: IEEE single: floating point types matching IEEE 32-bit floating-point format parameters significand-size=24, exponent-base=2, maximum-exponent-value=127, minimum-exponent-value=-126, has-Not-A-Number=TRUE, has-Infinity=TRUE, denormalized-value-allowed=TRUE, has-signed-zero=TRUE) are passed XDR floating-point. IEEE double: floating point types matching IEEE 64-bit floating-point format parameters significand-size=53, exponent-base=2, maximum-exponent-value=1023, minimum-exponent-value=-1022, has-Not-A-Number=TRUE, has-Infinity=TRUE, denormalized-value-allowed=TRUE, has-signed-zero=TRUE) are passed XDR double-precision floating-point. Intel extended double: floating point types matching Intel IEEE floating-point-compliant extended double floating-point format parameters significand-size=64, exponent-base=2, maximum-exponent-value=16383, minimum-exponent-value=--16382, has-Not-A-Number=TRUE, has-Infinity=TRUE, denormalized-value-allowed=TRUE, has-signed-zero=TRUE), are passed 12-byte value XDR fixed-length opaque data, containing floating-point value format specified UNIX System V Application Binary Interface Intel Processor Supplement ABI) document: bits fraction occupy first bytes little-endian order low bits eighth byte; bit explicit leading significand bit high-order bit eighth byte; bits exponent occupy ninth byte low-order bits tenth byte, little-endian order; sign bit high-order bit tenth byte; eleventh twelfth bytes are unused, contain values. SPARC PowerPC extended double: floating point types matching XDR quadruple-precision floating-point format parameters significand-size=113, exponent-base=2, maximum-exponent-value=16383, minimum-exponent-value=-16382, has-Not-A-Number=TRUE, has-Infinity=TRUE, denormalized-value-allowed=TRUE, has-signed-zero=TRUE), form extended double floating-point used PowerPC SPARC processors, are passed XDR quadruple-precision floating-point. General case: Values floating-point types not matching special cases identifiedabove are passed value XDR struct typeGeneralFloatingPointValue, following definition: XDR Normal = NotANumber = Infinity = FloatingPointValueType;struct flagged opaque FixedPointSignAndSignificand<>; flagged opaque FixedPointExponent<>;} NormalFloatingPointValue;union switch disc) case Normal: NormalFloatingPointValue value; case NotANumber: void; case Infinity: void;} GeneralFloatingPointValue; fields NormalFloatingPointValue struct containan on-the-wire representation fixed-point value fixed-point type(denominator=1, no-mininum-numerator, no-maximum-numerator). TheFixedPointSignAndSignificand field sign thefloating-point value sign, actual significand absolutevalue fixed-point value. FixedPointExponent fieldcontains exponent floating-point value. String Types string value sent protocol charset identified charset's IANA-assigned MIBEnum value.Each side session establish default charset sendingthe DefaultCharset message. String values use defaultcharacter set do not contain explicit charset information; string valuesthat use charset other default charset contain MIBEnum valuefor charset, bytes string. send string value value XDR flagged variable-length opaquedata. flag bit first bytes string valueare MIBEnum charset, high-order byte first; remaining bytesare bytes string. flag bit bytes opaque datasimply contain bytes string; charset default charsetfor session. marshalling error send string value bit session default charset been established.To avoid context-sensitivity marshalling string, always validto marshal string explicit charset value, even charset valueis same default charset session. marshalling stringinto pickle, charset always be explicitly included. Sequence Types Values sequence types are passed XDR variable-length arrays,with exception: Sequences fixed-point type minimum numeratorgreater equal maximum numerator less equal to255, are passed XDR variable-length opaque data, onenumerator value octet. Array Types Values array types are passed XDR fixed-length arrays,with exception: Arrays fixed-point type minimum numeratorgreater equal maximum numerator less equal to255, are passed XDR fixed-length opaque data, numeratorvalue octet. Values array types are passed XDR fixed-lengtharrays, exception: Record Types Values record types are passed XDR struct. Union Types Values union types are passed XDR union, uniondiscriminant being zero-based ordinal value encapsulated value'stype. Pickle Type pickle passed XDR variable-length opaque data, containingthe type ID pickled value's type, followed XDR-marshalled pickledvalue. pickle space common value types used metadata, definea packed format type ID marshalling. type ID marshalled intoa pickle 32-bit header, XDR unsigned integer, possiblyfollowed XDR fixed-length opaque data, containing thestring form type ID pickled type. header followinginternal structure: Pseudo-C struct unsigned version PickleTypeKind type_kind unsigned type_id_len TypeIDHeader; version field version number pickle format;the type_kind field value enum Pseudo-C enum TypeKind_unconstrained = anything not covered other type kinds... TypeKind_boolean = BOOLEAN TypeKind_s8 = FIXED-POINT DENOM=1 MIN-NUM=-128 MAX-NUM=127 TypeKind_s16 = FIXED-POINT DENOM=1 MIN-NUM=-32768 MAX-NUM=32767 TypeKind_s32 = FIXED-POINT DENOM=1 MIN-NUM=-2147483648 MAX-NUM=2147483647 TypeKind_s64 = FIXED-POINT DENOM=1 MIN-NUM=-9223372036854775808			 MAX-NUM=9223372036854775807 TypeKind_u8 = FIXED-POINT DENOM=1 MIN-NUM=0 MAX-NUM=255 TypeKind_u16 = FIXED-POINT DENOM=1 MIN-NUM=0 MAX-NUM=65535 TypeKind_u32 = FIXED-POINT DENOM=1 MIN-NUM=0 MAX-NUM=4294967296 TypeKind_u64 = FIXED-POINT DENOM=1 MIN-NUM=0 MAX-NUM=18446744073709551616 TypeKind_ieee_float32 = FLOATING-POINT SIGNIFICAND-SIZE=24 EXPONENT-BASE=2				 MAXIMUM-EXPONENT-VALUE=127 MINIMUM-EXPONENT-VALUE=-126				 HAS-NOT-A-NUMBER=TRUE HAS-INFINITY=TRUE				 DENORMALIZED-VALUE-ALLOWED=TRUE HAS-SIGNED-ZERO=TRUE TypeKind_ieee_float64 = FLOATING-POINT SIGNIFICAND-SIZE=53 EXPONENT-BASE=2 MAXIMUM-EXPONENT-VALUE=1023 MINIMUM-EXPONENT-VALUE=-1022, HAS-NOT-A-NUMBER=TRUE HAS-INFINITY=TRUE DENORMALIZED-VALUE-ALLOWED=TRUE HAS-SIGNED-ZERO=TRUE TypeKind_i_default_str = STRING LANGUAGE="i-default" TypeKind_object = local remote object other types Date, etc, be added here... PickleTypeKind; value type_kind isTypeKind_unconstrained, value type_kind_lenis length value XDR type fixed-length opaque data,containing full string type ID type, immediately followsthe header. Otherwise, opaque data marshalled. purposes marshalling, pickles have default charset; meansthat strings marshalled pickle always contain explicit charset.Pickles be considered single purposes marshallingaliased reference types. Reference Types Optional Types Optional types are passed XDR optional-data. Aliased Types scope aliasing protocol message, Java RMI, ratherthan call, DCE RPC. aliasing only contextof single invocation result, rather full invocation-resultpair. purposes marshalling, pickle scope be considereda single message scope. unique value aliased type marshalled assigned 32-bitunsigned integer value, unique scope aliasing, called itsaliased identifier. identifier marshalled XDRunsigned integer. aliased value not previously beensent scope, value then marshalled value base typewould be. Note means full value aliased typeis sent only once scope; subsequent occurrences send only aliasedidentifier. XXX handle overflow aliased value cache? Object Types instance object type passed state object type,which also information actual type value. remoteobject types, state followed object identifier, optionallyinformation instance be contacted. Parameter Type Versus Actual Type marshalling state object, important distinguish twoimportant types value: parameter type, sides session expect value have, theactual type value, most-derived type theobject, be subtype parameter type. actual type isdifferent parameter type, extra information be passed alongwith value allow receiver properly distinguish type andits associated data. However, actual type same parametertype, information be omitted. Passing Actual Type ID pass state object type type ID most-derived-typeof object, followed state attributes type object.The type ID passed values, depending followingconditions: parameter type object sealed, sides already know most-derived-type ID instance, know actual type be same parameter type. case, type ID passed XDR void. actual type object same parameter type, indicated passing zero-length value XDR variable-length opaque data. Otherwise, type ID passed value XDR variable-length opaque data containing type ID. Passing State Attributes state attributes are marshalled ways: actual type instance same parameter type, state types object are passed walking supertype inheritance tree instance depth-first order, passing value attribute particular state order are defined, state formed XDR structure attributes components structure. value attribute marshalled directly according type attribute. actual type instance subtype parameter type, receiver be able handle state types knowledge allow state type passed encapsulation. state instance passed sequence XDR structure values, containing state types instance. Types instance have associated state do not appear sequence. XDR expression sequence be following: XDR opaque type_id<0xFFFF>; opaque state<>;} TypeState;typedef TypeState StateSequence<>; type_id field type ID type object value. variable-length opaque data field state values attributes state marshalled XDR structure, components structure are attributes state. Passing Object ID Contact Info case remote object type, server ID, instance handle contactinfo value are passed value following XDR structure typeRemoteObjectInfo: XDR string ContactInfo<0xFFFF>;struct opaque server_id<>; opaque instance_handle<>; ContactInfo cinfos<>;} RemoteObjectInfo; server_id identifier server supports thedesired object, instance_handle server-relative name forthe object. cinfos field more pieces informationabout way object needs be contacted, including informationsuch various transport layers are involved. System Exceptions UnknownProblem Exception Code: ISL Values: None unknown problem occurred. ImplementationLimit Exception Code: ISL Values: None request not be properly addressed implementationresource limit callee side. SwitchConnectionCinfo Exception Code: ISL Values: NEW-CINFO HTTP-ng-w3ng.CinfoString exception requests caller upgrade connection protocol andtransport information cinfo specified argument, re-trythe call. equivalent UPGRADE message HTTP1.1, RELOCATE_REPLY message CORBA GIOP. Marshal Exception Code: ISL Values: None marshalling problem was encountered. NoSuchObjectType Exception Code: ISL Values: None object type operation was unknown server. NoSuchMethod Exception Code: ISL Values: None object type operation was known server, did not containthe indicated method. NoSuchObject Exception Code: ISL Values: None specified discriminant object was not available server. InvalidType Exception Code: ISL Values: None object specified discriminant did not participate typespecified operation. Rejected Exception Code: ISL Values: REASON OPTIONAL SimpleString server refused process request. return string givinga reason rejection. OperationOrDiscriminantCacheOverflow Exception Code: ISL Values: None request caused receiver's cache operations discriminants tooverflow. sender retry request uncached operation anddiscriminant values; subsequent requests not cache additionaloperation discriminant values, continue use previously successfullycached values. Discussion Serial Numbers Does protocol need assign serial numbers requests replies?We do so order be able cancel operations serial number, tobe able return reply messages order. first problem, ofcancelling operations, be dealt keeping track serial numbersimplicitly, using explicit serial number only message. Doing imply replieswould have be returned order requests were passed,but allow have byte request messages bytes count thediscriminant part arguments, instead part header), and4 byte reply messages. Thus only real purpose serial numbers toallow replies be returned order possibly make debuggingthe protocol easier). are other deeper unanswered questions here aboutthe serialization semantics protocol. instance, calleewait dispatching reply request beginning processthe current answer questions highly useful threaded callee process multiple requests parallel, allowit return requests order. Thus serial numbers are useful. assumethat higher-level protocols desiring serialization provide serializationcontext part context call, serialization behandled higher lower level. Memoizing PICKLE Object Types? great deal traffic protocol consist values typePICKLE equivalent object-by-value, HTTP's MIME-encapsulatedbody type) object type. tempting introduce form ofmemoizing value types, similar used request discriminants.There are reasons not do so: XDR explicit support memoizing, means have provide marshalling format types clean layering XDR. instance, be possible pass object value XDR 32-bit unsigned integer following pseudo-C structure struct boolean use_cached_value boolean cache_this_value union unsigned int url_len unsigned int cache_key use_cached_value set), followed XDR fixed length opaque value containing URL object use_cached_value not set). type variable structure equivalent XDR. other hand, well be argued are marshalling object type, something not explicitly covered XDR, are simply providing extension XDR, spirit marshalling. even use simpler construct, such XDR union. more powerful argument allowing arbitrary memoizing large items let caller place almost arbitrary loads storage requirements callee. be argued callee reset connection time load too onerous TerminateConnection. arguments overwhelmingly powerful. URL Forms Open issues: need specify default object type default CINFO?). exact format TYPEID values CINFO stacks also be specified. form SERVER-ID also be defined allow slash characters internally. SERVER-ID be stylized way makes easy use DNS? HTTP URLs be integrated have multiple URL forms, information cinfo being integrated forms? example, Henrik suggested URL form http-ng://foo.bar.com/object-id be used indicate object object-id available foo.bar.com, client use protocol negotiation protocol work exact shape cinfo. Proposed: URLs HTTP-ng objects be form w3ng:SERVER-ID/INSTANCE-HANDLE[;type=TYPE][;cinfo=CINFO] SERVER-ID identifier server supportsthe desired object; INSTANCE-HANDLE server-relative namefor object; TYPE type ID most derived typeof object; CINFO information way whichthe object needs be contacted, including information such varioustransport layers are involved. form virtue becoming URNif optional CINFO TYPE fields are omitted. Current syntax Cinfo strings syntax cinfo currently ILU definition. cinfo stringhas form described brackets indicate optionality, identifier composed ASCII lowercase alphabeticand numeric characters, beginning lowercase alphabetic character,and <NON-UNDERSCORE-STRING> string ASCII characters notcontaining underscore character '_'): <cinfo> <pinfo> <tinfo-stack><pinfo> <scheme> <parms> <ALPHANUMERIC-ID><parms> <parm> <parms> <NON-UNDERSCORE-STRING> <tinfo-stack> <tinfo> <tinfo-stack> <scheme> <parms> Syntax w3ng Pinfo current syntax pinfo string ILU implementation wire protocol <scheme> <major-version> <minor-version> <major-version> are numbers not specified, defaults Syntax w3mux Tinfo current syntax tinfo string ILU implementation thew3mux transport layer <scheme> <channel> <endpoint> <channel> protocol ID number UUID string endpoint. sizeof <endpoint> string be less bytes. Syntax tcp Tinfo current syntax tinfo string ILU implementation transport layer <scheme> <host> <port> <host> string less bytes indicatingthe IP address hostname remote machine, TCP port host listening. Syntax sunrpcrm Tinfo current syntax tinfo string ILU implementation thesunrpcrm transport layer <scheme> parameters are defined. layer ONC RPC record-markingscheme top reliable byte stream, defined section RPC RFC RPC]. References RFC XDR ONC RPC ISL:ftp://ftp.parc.xerox.com/pub/ilu/2.0a12/manual-html/manual_2.html WD-HTTP-NG-arch-model progress):http://www.w3.org/TR/1998/WD-HTTP-NG-architecture MUX progress):http://www.w3.org/TR/1998/WD-mux ILU:ftp://ftp.parc.xerox.com/pub/ilu/2.0a12/manual-html/manual_2.html Address Author Bill Janssen Xerox Palo Alto Research Center Coyote Hill Rd Palo Alto, CA Phone: FAX: Email: janssen@parc.xerox.com HTTP: http://www.parc.xerox.com/istl/members/janssen/ Index aliased types, marshalling alignment array byte, marshalling array types, marshalling author b big-endian BOOLEAN Boolean enum type) boolean type, marshalling byte order c cinfo, marshalling connection, definition contact info, marshalling ControlMsgType enum type) d DefaultCharsetMsgHeader struct type) discriminant object ID memoizing discriminant, identification DiscriminantID struct type) enumeration types, marshalling extension headers fixed-point types, marshalling flagged variable-length opaque data type) FloatingPointValueType type) g GeneralFloatingPointValue type) graceful connection shutdown h HTTP-ng-w3ng.ExtensionHeader type) HTTP-ng-w3ng.ExtensionHeaderList type) HTTP-ng-w3ng.SimpleString type) ImplementationLimit exception) InitializeConnection message InitializeConnectionMsgHeader struct type) instance handle instance handle, marshalling integer types, marshalling interface InvalidType exception) mapping m Marshal exception) marshalling data memoizing memoizing pickle object types message-oriented transport messages, description model operation n NormalFloatingPointValue type) NoSuchMethod exception) NoSuchObject exception) NoSuchObjectType exception) o object ID object state, marshalling object types, marshalling operation ID memoizing operation, identification OperationID struct type) optional types, marshalling p padding pickle types, marshalling ProtocolVersion struct type) pseudo-C syntax, definition r record types, marshalling Rejected exception) reliable sequenced message transport remote object types, marshalling Reply message ReplyMsgHeader struct type) ReplyStatus enum type) Request message RequestMsgHeader struct type) s security sequence byte, marshalling sequence types, marshalling sequenced transport serial numbers, discussion serial numbers, range server ID session context StateSequence type) string types, marshalling Success subtype Reply SwitchConnectionCinfo exception) syntax used system exceptions SystemException subtype Reply t TerminateConnection message TerminateConnectionMsgHeader struct type) TerminationCause enum type) transport requirements TypeState type) u union types, marshalling UnknownProblem exception) Unused type) UserException subtype Reply w w3ng URL form XDR type RemoteObjectInfo XDR, Internet RFC use 