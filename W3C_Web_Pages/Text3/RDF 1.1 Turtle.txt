RDF Turtle RDF Turtle Terse RDF Triple Language W3C Recommendation February version: http://www.w3.org/TR/2014/REC-turtle-20140225/ Latest published version: http://www.w3.org/TR/turtle/ Test suite: http://www.w3.org/TR/2014/NOTE-rdf11-testcases-20140225/ Implementation report: http://www.w3.org/2013/TurtleReports/index.html Previous version: http://www.w3.org/TR/2014/PR-turtle-20140225/ Editors: Eric Prud'hommeaux, W3C Gavin Carothers, Lex Machina, Inc Authors: David Beckett Tim Berners-Lee, W3C Eric Prud'hommeaux, W3C Gavin Carothers, Lex Machina, Inc check errata errors issues reported publication. English version specification only normative version. Non-normative translations also be available. Copyright © W3C® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract Resource Description Framework general-purpose language representing information Web. document textual syntax RDF called Turtle RDF graph be completely written compact natural text form, abbreviations common usage patterns datatypes. Turtle levels compatibility N-Triples format well triple pattern syntax SPARQL W3C Recommendation. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. document part RDF document suite. document Turtle, Terse RDF Triple Language, concrete syntax RDF document was published RDF Working Group Recommendation. wish make comments regarding document, please send public-rdf-comments@w3.org archives). comments are welcome. see Working Group's implementation report. document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director W3C Recommendation. stable document be used reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Turtle Language Simple Triples Predicate Lists Object Lists IRIs RDF Literals Quoted Literals Numbers Booleans RDF Blank Nodes Nesting Unlabeled Blank Nodes Turtle Collections Examples Turtle compared SPARQL Conformance Media Type Content Encoding Turtle Grammar White Space Comments IRI References Escape Sequences Grammar Parsing Parser State RDF Term Constructors RDF Triples Constructors Parsing Example A. Embedding Turtle HTML documents A.1 XHTML A.2 Parsing Turtle HTML B. Internet Media Type, File Extension Macintosh File Type C. Acknowledgements D. Change Log D.1 Changes January Proposed Recommendation D.2 Changes February Candidate Recommendation January Proposed Recommendation D.3 Changes August First Public Working Draft Candidate Recommendation D.4 Changes January Team Submission First Public Working Draft E. References E.1 Normative references E.2 Informative references Introduction section non-normative. document Turtle, Terse RDF Triple Language, concrete syntax RDF Turtle document textual representations RDF graph. following Turtle document relationship Green Goblin Spiderman. Example @base <http://example.org/> .@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .@prefix foaf: <http://xmlns.com/foaf/0.1/> .@prefix rel: <http://www.perceive.net/schemas/relationship/> rel:enemyOf <#spiderman> foaf:Person context Marvel universe foaf:name Goblin" rel:enemyOf <#green-goblin> foaf:Person foaf:name example many features Turtle language:@base Relative IRIs,@prefix prefixed names,predicate lists separated lists separated token literals. Turtle grammar triples subset SPARQL Query Language grammar TriplesBlock. grammars share production terminal names possible. construction RDF graph Turtle document defined Turtle Grammar Parsing. Turtle Language section non-normative. Turtle document writing down RDF graph compact textual form. RDF graph made up triples consisting subject, predicate object. Comments be given not part lexical token continue end line. Simple Triples simplest triple statement sequence predicate, object) terms, separated whitespace terminated triple. Example <http://example.org/#spiderman> <http://www.perceive.net/schemas/relationship/enemyOf> <http://example.org/#green-goblin> Predicate Lists Often same subject be referenced number predicates. predicateObjectList production matches series predicates objects, separated following subject. series RDF Triples subject predicate object allocated triple. Thus, symbol used repeat subject triples vary only predicate object RDF terms. examples are equivalent ways writing triples Spiderman. Example <http://example.org/#spiderman> <http://www.perceive.net/schemas/relationship/enemyOf> <http://example.org/#green-goblin> Example <http://example.org/#spiderman> <http://www.perceive.net/schemas/relationship/enemyOf> <http://example.org/#green-goblin> <http://xmlns.com/foaf/0.1/name> Object Lists predicates often objects are repeated same subject predicate. objectList production matches series objects separated following predicate. series RDF Triples corresponding subject predicate object allocated triple. Thus, symbol used repeat subject predicate triples only differ object RDF term. examples are equivalent ways writing Spiderman's name languages. Example <http://example.org/#spiderman> <http://xmlns.com/foaf/0.1/name> Example <http://example.org/#spiderman> <http://xmlns.com/foaf/0.1/name> <http://xmlns.com/foaf/0.1/name> are types RDF Term defined RDF Concepts: IRIs Resource Identifiers), literals blank nodes. Turtle number ways writing IRIs IRIs be written relative absolute IRIs prefixed names. Relative absolute IRIs are enclosed contain numeric escape sequences example <http://example.org/#green-goblin>. Relative IRIs <#green-goblin> are resolved relative current base IRI. new base IRI be defined using directive. Specifics operation are defined section IRI References token predicate position Turtle triple IRI http://www.w3.org/1999/02/22-rdf-syntax-ns#type prefixed name prefix label local part, separated colon prefixed name turned IRI concatenating IRI associated prefix local part. directive associates prefix label IRI. Subsequent directives re-map same prefix label. Note Turtle language originally permitted only syntax including character writing prefix base directives. case-insensitive forms were added align Turtle's syntax SPARQL. advisable serialize RDF using forms RDF Turtle parsers are widely deployed. write http://www.perceive.net/schemas/relationship/enemyOf using prefixed name: Define prefix label vocabulary IRI http://www.perceive.net/schemas/relationship/ somePrefix Then write somePrefix:enemyOf equivalent writing <http://www.perceive.net/schemas/relationship/enemyOf> be written using original Turtle syntax prefix declarations: Example @prefix somePrefix: <http://www.perceive.net/schemas/relationship/> somePrefix:enemyOf <http://example.org/#spiderman> SPARQL's syntax prefix declarations: Example PREFIX somePrefix: <http://www.perceive.net/schemas/relationship/><http://example.org/#green-goblin> somePrefix:enemyOf <http://example.org/#spiderman> Note Prefixed names are superset XML QNames. differ local part prefixed names include: leading digits, e.g. leg:3032571 isbn13:9780136019701 non leading colons, e.g. og:video:height reserved character escape sequences, e.g. wgs:lat\-long following Turtle document examples different ways writing IRIs Turtle. Example triple absolute IRIs<http://one.example/subject1> <http://one.example/predicate1> <http://one.example/object1> .@base <http://one.example/> <predicate2> <object2> relative IRIs, e.g. http://one.example/subject2BASE <http://one.example/><subject2> <predicate2> <object2> relative IRIs, e.g. http://one.example/subject2@prefix p: <http://two.example/> p:predicate3 p:object3 prefixed name, e.g. http://two.example/subject3PREFIX p: <http://two.example/>p:subject3 p:predicate3 p:object3 prefixed name, e.g. http://two.example/subject3@prefix p: <path/> prefix p: now stands http://one.example/path/p:subject4 p:predicate4 p:object4 prefixed name, e.g. http://one.example/path/subject4@prefix <http://another.example/> empty prefix:subject5 prefixed name, e.g. http://another.example/subject5:subject6 same <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> multi-script subject IRI Note directives require trailing IRI, equalivent not have trailing IRI part directive. RDF Literals Literals are used identify values such strings, numbers, dates. Example @prefix foaf: <http://xmlns.com/foaf/0.1/> foaf:name Goblin" foaf:name Quoted Literals Quoted Literals production RDFLiteral) have lexical form followed language tag, datatype IRI, representation lexical form initial delimiter, e.g. sequence permitted characters numeric escape sequence string escape sequence, final delimiter. corresponding RDF lexical form characters delimiters, processing escape sequences. present, language tag preceded there language tag, there be datatype IRI, preceeded U+005E). datatype IRI Turtle be written using absolute IRI, relative IRI, prefixed name. there datatype IRI language tag, datatype xsd:string. not appear quoted literal part escape sequence. Other restrictions depend delimiter: Literals delimited not contain characters LF CR Literals delimited not contain characters LF, CR. Literals delimited not contain sequence characters Literals delimited not contain sequence characters Example @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .@prefix show: <http://example.org/vocab/show/> .@prefix xsd: <http://www.w3.org/2001/XMLSchema#> rdfs:label Seventies Show"^^xsd:string literal XML Schema string datatypeshow:218 rdfs:label Seventies Show"^^<http://www.w3.org/2001/XMLSchema#string> same aboveshow:218 rdfs:label Seventies Show" same againshow:218 show:localName Seventies Show"@en literal language tagshow:218 show:localName Série des Années Soixante-dix'@fr literal delimited single quoteshow:218 show:localName Série des Années Septante"@fr-be literal region subtagshow:218 show:blurb multi-line literal embedded new lines quotesliteral many quotes up sequential apostrophes Numbers Numbers be written other literals lexical form datatype Turtle shorthand syntax writing integer values, arbitrary precision decimal values, double precision floating point values. Data Type Abbreviated Lexical Description xsd:integer Integer values be written optional sign series digits. Integers match regular expression xsd:decimal Arbitrary-precision decimals be written optional sign, more digits, decimal point more digits. Decimals match regular expression xsd:double Double-precision floating point values be written optionally signed mantissa optional decimal point, letter optionally signed integer exponent. exponent matches regular expression mantissa regular expressions: Example @prefix <http://example.org/elements> <http://en.wikipedia.org/wiki/Helium> xsd:integer xsd:decimal 1.663E-4 xsd:double Booleans Boolean values be written represent RDF literals datatype xsd:boolean. Example @prefix <http://example.org/stats> false xsd:boolean RDF Blank Nodes RDF blank nodes Turtle are expressed _: followed blank node label series name characters. characters label are built PN_CHARS_BASE, liberalized characters digits appear anywhere blank node label. character appear anywhere first last character. characters U+00B7, U+0300 U+036F U+203F U+2040 are permitted anywhere first character. fresh RDF blank node allocated unique blank node label document. Repeated use same blank node label same RDF blank node. Example @prefix foaf: <http://xmlns.com/foaf/0.1/> foaf:knows _:bob foaf:knows _:alice Nesting Unlabeled Blank Nodes Turtle Turtle, fresh RDF blank nodes are also allocated matching production blankNodePropertyList terminal ANON. appear subject object position triple Turtle Grammar). subject object fresh RDF blank node. blank node also subject triples produced matching predicateObjectList production embedded blankNodePropertyList. generation triples described Predicate Lists. Blank nodes are also allocated collections described Example @prefix foaf: <http://xmlns.com/foaf/0.1/> Someone someone else, name foaf:knows foaf:name Turtle grammar blankNodePropertyLists be nested. case, inner new subject blank node outer node current subject predicate object lists. use predicateObjectList blankNodePropertyList common idiom representing series properties node. Abbreviated: Example @prefix foaf: <http://xmlns.com/foaf/0.1/> foaf:name foaf:knows foaf:name foaf:knows foaf:name foaf:mbox <bob@example.com> Corresponding simple triples: Example _:a <http://xmlns.com/foaf/0.1/name> <http://xmlns.com/foaf/0.1/knows> _:b <http://xmlns.com/foaf/0.1/name> <http://xmlns.com/foaf/0.1/knows> _:c <http://xmlns.com/foaf/0.1/name> <http://xmlns.com/foaf/0.1/mbox> <bob@example.com> Collections RDF Collection structure lists RDF nodes. Turtle syntax Collections possibly empty list RDF terms enclosed collection rdf:first/rdf:rest list structure sequence objects rdf:first statements being order terms enclosed syntax MUST appear subject object position triple Turtle Grammar). blank node head list subject object containing triple. Example @prefix <http://example.org/foo> object triple RDF collection blank node:subject empty collection value rdf:nil:subject Examples section non-normative. example Turtle translation example RDF/XML Syntax specification Example @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .@prefix dc: <http://purl.org/dc/elements/1.1/> .@prefix ex: <http://example.org/stuff/1.0/> dc:title Syntax Specification ex:editor ex:fullname Beckett"; ex:homePage <http://purl.org/net/dajobe/> example RDF collection literals. Example PREFIX <http://example.org/stuff/1.0/>:a short Example @prefix <http://example.org/stuff/1.0/> .@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> rdf:first rdf:rest rdf:first rdf:rest rdf:nil example identical triples containing literal objects containing newlines, written plain long literal forms. line breaks example are LINE FEED characters Example @prefix <http://example.org/stuff/1.0/> first line\nThe second line\n more" first lineThe second line more""" indicated grammar, collection be subject object. subject object be novel blank node first object, collection more objects, rdf:nil collection empty. example, Example @prefix <http://example.org/stuff/1.0/> 3E1) syntactic sugar blank nodes b0, b1 b2 do not occur anywhere else RDF graph): Example @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> _:b0 rdf:first rdf:rest _:b1 _:b1 rdf:first rdf:rest _:b2 _:b2 rdf:first 3E1 rdf:rest rdf:nil _:b0 RDF collections be nested involve other syntactic forms: Example PREFIX <http://example.org/stuff/1.0/>(1 syntactic sugar Example @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> _:b0 rdf:first rdf:rest _:b1 _:b1 rdf:first _:b2 _:b2 _:b1 rdf:rest _:b3 _:b3 rdf:first _:b4 _:b4 rdf:first rdf:rest rdf:nil _:b3 rdf:rest rdf:nil Turtle compared SPARQL section non-normative. SPARQL Query LanguageF uses Turtle style syntax TriplesBlock production. production Turtle language SPARQL permits RDF Literals subject RDF triples. SPARQL permits variables part triple form. Turtle prefix base declarations anywhere triple. SPARQL, are only allowed Prologue start SPARQL query). SPARQL uses case insensitive keywords, Turtle's @prefix @base declarations are case sensitive, SPARQL dervied PREFIX BASE are case insensitive. are case insensitive SPARQL case sensitive Turtle. TrUe not valid boolean value Turtle. further information see Syntax IRIs SPARQL Grammar sections SPARQL query document Conformance well sections marked non-normative, authoring guidelines, diagrams, examples, notes specification are non-normative. Everything else specification normative. key words MUST, MUST NOT, REQUIRED, NOT, RECOMMENDED, MAY, OPTIONAL specification are be interpreted described specification conformance criteria Turtle documents Turtle parsers conforming Turtle document Unicode string grammar additional constraints defined section Turtle Grammar, starting turtleDoc production. Turtle document serializes RDF Graph. conforming Turtle parser system capable reading Turtle documents behalf application. makes serialized RDF dataset, defined section Parsing, available application, usually form API. IRI Turtle language http://www.w3.org/ns/formats/Turtle Note specification not define Turtle parsers handle non-conforming input documents. Media Type Content Encoding media type Turtle text/turtle. content encoding Turtle content always UTF-8. Charset parameters mime type are required such time text/ media type tree permits UTF-8 be sent charset parameter. See section B. Internet Media Type, File Extension Macintosh File Type media type registration form. Turtle Grammar Turtle document Unicode[UNICODE] character string encoded UTF-8. Unicode characters only range U+0000 U+10FFFF inclusive are allowed. White Space White space WS) used separate terminals otherwise be terminal. Rule names capitals indicate white space significant; form possible choice terminals constructing Turtle parser. White space significant production String. Comments Comments Turtle take form IRIREF String, continue end line characters U+000D U+000A) end file there end line comment marker. Comments are treated white space. IRI References Relative IRIs are resolved base IRIs Uniform Resource Identifier Generic Syntax using only basic algorithm section Syntax-Based Normalization Scheme-Based Normalization sections RFC3986) are performed. Characters additionally allowed IRI references are treated same way unreserved characters are treated URI references, section Internationalized Resource Identifiers @base BASE directive Base IRI used resolve relative IRIs RFC3986 section 5.1.1, URI Embedded Content". Section URI Encapsulating Entity" In-Scope Base IRI come encapsulating document, such SOAP envelope xml:base directive mime multipart document Content-Location header. URI" identified Base Retrieval URI", URL particular Turtle document was retrieved. none Base URI, default Base URI Base URI") used. @base BASE directive sets new In-Scope Base URI, relative previous Escape Sequences are forms used turtle documents: numeric escape sequences represent Unicode code points: Escape sequence Unicode code point hex hex hex hex Unicode character range U+0000 U+FFFF inclusive corresponding value encoded hexadecimal digits interpreted most significant least significant digit. hex hex hex hex hex hex hex hex Unicode character range U+0000 U+10FFFF inclusive corresponding value encoded hexadecimal digits interpreted most significant least significant digit. HEX hexadecimal character HEX string escape sequences represent characters traditionally escaped string literals: Escape sequence Unicode code point U+0009 U+0008 U+000A U+000D U+000C U+0022 U+0027 U+005C reserved character escape sequences consist followed ~.-!$&'()*+,;=/?#@%_ represent character right Context kind escape sequence be used numeric string reserved character IRIs, used RDF terms @prefix, PREFIX, @base, BASE declarations yes local names yes Strings yes yes Note %-encoded sequences are character range IRIs are explicitly allowed local names. appear followed hex characters represent same sequence characters. sequences are not decoded processing. term written <http://a.example/%66oo-bar> Turtle IRI http://a.example/%66oo-bar not IRI http://a.example/foo-bar. term written ex:%66oo-bar prefix @prefix ex: <http://a.example/> also IRI http://a.example/%66oo-bar. Grammar EBNF used here defined XML Production labels consisting number final e.g. reference production number SPARQL Query Language grammar Notes: Keywords single quotes are case-sensitive. Keywords double quotes are case-insensitive. Escape sequences UCHAR ECHAR are case sensitive. tokenizing input choosing grammar rules, longest match chosen. Turtle grammar LL(1) LALR(1) rules uppercased names are used terminals. entry point grammar turtleDoc. signed numbers, white space allowed sign number. ANON WS* token amount white space comments single space version used grammar clarity. strings match pattern LANGTAG, are registered language subtags. specification not define quoted literal followed tokens Turtle language. turtleDoc statement* statement directive triples directive prefixID base sparqlPrefix sparqlBase prefixID PNAME_NS IRIREF base IRIREF sparqlBase IRIREF sparqlPrefix PNAME_NS IRIREF triples subject predicateObjectList blankNodePropertyList predicateObjectList? predicateObjectList verb objectList objectList)?)* objectList object object)* verb predicate subject iri BlankNode collection predicate iri object iri BlankNode collection blankNodePropertyList literal literal RDFLiteral NumericLiteral BooleanLiteral blankNodePropertyList predicateObjectList collection object* NumericLiteral INTEGER DECIMAL DOUBLE RDFLiteral String iri)? BooleanLiteral String STRING_LITERAL_QUOTE STRING_LITERAL_SINGLE_QUOTE STRING_LITERAL_LONG_SINGLE_QUOTE STRING_LITERAL_LONG_QUOTE iri IRIREF PrefixedName PrefixedName PNAME_LN PNAME_NS BlankNode BLANK_NODE_LABEL ANON Productions terminals IRIREF UCHAR)* #x00=NULL codes #x20=space PNAME_NS PN_PREFIX? PNAME_LN PNAME_NS PN_LOCAL BLANK_NODE_LABEL PN_CHARS)? LANGTAG INTEGER DECIMAL DOUBLE EXPONENT EXPONENT EXPONENT) EXPONENT STRING_LITERAL_QUOTE ECHAR UCHAR)* #x22=" #x5C=\ #xA=new line #xD=carriage return STRING_LITERAL_SINGLE_QUOTE ECHAR UCHAR)* #x27=' #x5C=\ #xA=new line #xD=carriage return STRING_LITERAL_LONG_SINGLE_QUOTE ECHAR UCHAR))* STRING_LITERAL_LONG_QUOTE ECHAR UCHAR))* UCHAR HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX ECHAR WS #x20 #x9 #xD #xA #x20=space #x9=character tabulation #xD=carriage return #xA=new line ANON WS* PN_CHARS_BASE PN_CHARS_U PN_CHARS_BASE PN_CHARS PN_CHARS_U #x00B7 PN_PREFIX PN_CHARS_BASE PN_CHARS)? PN_LOCAL PLX) PLX)* PLX))? PLX PERCENT PN_LOCAL_ESC PERCENT HEX HEX HEX PN_LOCAL_ESC Parsing RDF Concepts Abstract Syntax specification types RDF Term: IRIs, literals blank nodes. Literals are composed lexical form optional language tag datatype IRI. extra type, prefix, used parsing map string identifiers namespace IRIs. section maps string conforming grammar section Grammar set triples mapping strings matching productions lexical tokens RDF terms components language tags, lexical forms literals). Grammar productions change parser state emit triples. Parser State Parsing Turtle state items: IRI baseURI — base production reached, second rule argument, IRIREF, base URI used relative IRI resolution. Map[prefix IRI] namespaces — second third rule arguments IRIREF) prefixID production assign namespace name prefix Outside prefixID production, PNAME_NS substituted namespace. Note prefix be empty string, PNAME_NS production: Map[string blank node] bnodeLabels — mapping string blank node. RDF_Term curSubject — curSubject bound subject production. RDF_Term curPredicate — curPredicate bound verb production. token matched was curPredicate bound IRI http://www.w3.org/1999/02/22-rdf-syntax-ns#type. RDF Term Constructors table maps productions lexical tokens RDF terms components RDF terms listed section Parsing: production type procedure IRIREF IRI characters are taken, numeric escape sequences unescaped, form unicode string IRI. Relative IRI resolution performed Section PNAME_NS prefix used prefixID sparqlPrefix production, prefix potentially empty unicode string matching first argument rule key namespaces map. IRI used PrefixedName production, iri value namespaces map corresponding first argument rule. PNAME_LN IRI potentially empty prefix identified first sequence, PNAME_NS. namespaces map MUST have corresponding namespace. unicode string IRI formed unescaping reserved characters second argument, PN_LOCAL, concatenating namespace. STRING_LITERAL_SINGLE_QUOTE lexical form characters outermost are taken, numeric string escape sequences unescaped, form unicode string lexical form. STRING_LITERAL_QUOTE lexical form characters outermost are taken, numeric string escape sequences unescaped, form unicode string lexical form. STRING_LITERAL_LONG_SINGLE_QUOTE lexical form characters outermost are taken, numeric string escape sequences unescaped, form unicode string lexical form. STRING_LITERAL_LONG_QUOTE lexical form characters outermost are taken, numeric string escape sequences unescaped, form unicode string lexical form. LANGTAG language tag characters following form unicode string language tag. RDFLiteral literal literal lexical form first rule argument, String. iri rule matched, datatype iri literal language tag. LANGTAG rule matched, datatype rdf:langString language tag LANGTAG. matched, datatype xsd:string literal language tag. INTEGER literal literal lexical form input string, datatype xsd:integer. DECIMAL literal literal lexical form input string, datatype xsd:decimal. DOUBLE literal literal lexical form input string, datatype xsd:double. BooleanLiteral literal literal lexical form true false, depending matched input, datatype xsd:boolean. BLANK_NODE_LABEL blank node string matching second argument, PN_LOCAL, key bnodeLabels. there corresponding blank node map, allocated. ANON blank node blank node generated. blankNodePropertyList blank node blank node generated. Note rules blankNodePropertyList section. collection blank node non-empty lists, blank node generated. Note rules collection section. IRI empty lists, resulting IRI rdf:nil. Note rules collection section. RDF Triples Constructors Turtle document RDF graph composed set RDF triples. subject production sets curSubject. verb production sets curPredicate. object N document RDF triple: curSubject curPredicate N Property Lists: Beginning blankNodePropertyList production records curSubject curPredicate, sets curSubject novel blank node B. Finishing blankNodePropertyList production curSubject curPredicate. node produced matching blankNodePropertyList blank node B. Collections: Beginning collection production records curSubject curPredicate. object collection production curSubject set novel blank node B curPredicate set rdf:first. object objectn first triple:objectn-1 rdf:rest objectn Finishing collection production additional triple curSubject rdf:rest rdf:nil curSubject curPredicate node produced matching collection first blank node B non-empty lists rdf:nil empty lists. Parsing Example section non-normative. following informative example shows semantic actions performed parsing Turtle document LALR(1) parser: Example @prefix ericFoaf: <http://www.w3.org/People/Eric/ericP-foaf.rdf#> .@prefix <http://xmlns.com/foaf/0.1/> <http://norman.walsh.name/knows/who/dan-brickley> <mailto:timbl@w3.org> <http://getopenid.com/amyvdh> Map prefix ericFoaf IRI http://www.w3.org/People/Eric/ericP-foaf.rdf#. Map empty prefix IRI http://xmlns.com/foaf/0.1/. Assign curSubject IRI http://www.w3.org/People/Eric/ericP-foaf.rdf#ericP. Assign curPredicate IRI http://xmlns.com/foaf/0.1/givenName. Emit RDF triple: <...rdf#ericP> <.../givenName> Assign curPredicate IRI http://xmlns.com/foaf/0.1/knows. Emit RDF triple: <...rdf#ericP> <.../knows> <...who/dan-brickley> Emit RDF triple: <...rdf#ericP> <.../knows> _:1 Save curSubject reassign blank node _:1. Save curPredicate. Assign curPredicate IRI http://xmlns.com/foaf/0.1/mbox. Emit RDF triple: _:1 <.../mbox> <mailto:timbl@w3.org> Restore curSubject curPredicate saved values <.../knows>). Emit RDF triple: <...rdf#ericP> <.../knows> <http://getopenid.com/amyvdh> A. Embedding Turtle HTML documents section non-normative. HTML script tags be used embed data blocks documents. Turtle be easily embedded HTML way. Example <script type="text/turtle">@prefix dc: <http://purl.org/dc/terms/> .@prefix frbr: <http://purl.org/vocab/frbr/core#> frbr:Work dc:creator Wheaton"@en dc:title Geek"@en frbr:realization <http://books.example.com/products/9780596007683.BOOK>, <http://books.example.com/products/9780596802189.EBOOK> frbr:Expression dc:type <http://books.example.com/product-types/BOOK> frbr:Expression dc:type <http://books.example.com/product-types/EBOOK> Turtle content be placed script tag type attribute set text/turtle. < > symbols do not need be escaped script tags. character encoding embedded Turtle match HTML documents encoding. A.1 XHTML section non-normative. JavaScript, Turtle authored HTML break used XHTML solution same used JavaScript. Example <script type="text/turtle"># <![CDATA[@prefix frbr: <http://purl.org/vocab/frbr/core#> frbr:Work embedded XHTML Turtle data blocks be enclosed CDATA sections. CDATA markers be Turtle comments. character sequence document be escaped using strings also make Turtle safe polyglot documents served text/html application/xhtml+xml. Failing use CDATA sections escape result non well-formed XML document. A.2 Parsing Turtle HTML section non-normative. are syntactic grammar differences parsing Turtle been embedded normal Turtle documents. Turtle document parsed HTML DOM be stream character data rather stream UTF-8 encoded bytes. decoding necessary HTML document already been parsed DOM. script data block considered be own Turtle document. @prefix @base declarations Turtle data bloc are scoped data block do not effect other data blocks.The HTML lang attribute XHTML xml:lang attribute have effect parsing data blocks.The base URI encapsulating HTML document URI Embedded Content" RFC3986 section 5.1.1. B. Internet Media Type, File Extension Macintosh File Type Contact: Eric Prud'hommeaux See also: Register Media Type W3C Specification Internet Media Type registration, consistency use TAG Finding June September Internet Media Type MIME Type Turtle recommended Turtle files have extension lowercase) platforms. recommended Turtle files stored Macintosh HFS file systems be given file type information been submitted IESG review, approval, registration IANA. Type name: text Subtype name: turtle Required parameters: None Optional parameters: charset — parameter required transferring non-ASCII data. present, value charset always UTF-8. Encoding considerations: syntax Turtle expressed code points Unicode encoding always UTF-8 Unicode code points also be expressed using U+FFFF) syntax U+10000 onwards) X hexadecimal digit Security considerations: Turtle general-purpose assertion language; applications evaluate given data infer more assertions dereference IRIs, invoking security considerations scheme IRI. Note particular, privacy issues section HTTP IRIs. Data obtained inaccurate malicious data source lead inaccurate misleading conclusions, well dereferencing unintended IRIs. Care be taken align trust consulted resources sensitivity intended use data; inferences potential medical treatments likely require different trust inferences trip planning. Turtle used express arbitrary application data; security considerations vary domain use. Security tools protocols applicable text PGP encryption, MD5 sum validation, password-protected compression) also be used Turtle documents. Security/privacy protocols be imposed reflect sensitivity embedded information. Turtle express data presented user, example, RDF Schema labels. Application rendering strings retrieved untrusted Turtle documents ensure malignant strings not be used mislead reader. security considerations media type registration XML section provide additional guidance expression arbitrary data markup. Turtle uses IRIs term identifiers. Applications interpreting data expressed Turtle address security issues Internationalized Resource Identifiers Section well Uniform Resource Identifier Generic Syntax Section Multiple IRIs have same appearance. Characters different scripts look similar Cyrillic appear similar Latin character followed combining characters have same visual representation character SMALL LETTER E followed COMBINING ACUTE ACCENT same visual representation LATIN SMALL LETTER E ACUTE). person application writing interpreting data Turtle take care use IRI matches intended semantics, avoid IRIs make look similar. Further information matching similar characters be found Unicode Security Considerations Internationalized Resource Identifiers Section Interoperability considerations: are known interoperability issues. Published specification: specification. Applications use media type: widely deployed applications are known use media type. be used web services clients consuming data. Additional information: Magic number(s): Turtle documents have strings sensitive) strings insensitive) beginning document. File extension(s): Base URI: Turtle <IRIref>' <IRIref>' term change current base URI relative IRIrefs query language are used sequentially later document. Macintosh file type code(s): Person email address contact further information: Eric Prud'hommeaux <eric@w3.org> Intended usage: COMMON Restrictions usage: None Author/Change controller: Turtle specification product RDF WG. W3C reserves change control specifications. C. Acknowledgements work was described paper New Syntaxes RDF other RDF syntaxes background Turtle WWW2004, referred N-Triples Plus there). work was started Semantic Web Advanced Development Europe project funded EU IST-7 programme IST-2001-34732 further development supported Institute Learning Research Technology University Bristol, UK Valuable contributions version were made Gregg Kellogg, Andy Seaborn, Sandro Hawke members RDF Working Group. document was improved review process wider community. D. Change Log D.1 Changes January Proposed Recommendation Missing prefix added example response comment Lars Svensson. Error grammar productions fixed. Error grammar productions fixed. D.2 Changes February Candidate Recommendation January Proposed Recommendation addition sparqlPrefix sparqlBase allow using SPARQL style BASE PREFIX directives Turtle document was marked risk" Candidate Recommendation publication. feature longer risk. title document was changed Turtle". Removed obsolete links tests Sec. D.3 Changes August First Public Working Draft Candidate Recommendation Renaming STRING_* productions STRING_LITERAL_QUOTE sytle names rather numbers Local part prefix names now include Turtle HTML Renaming grammar tokens rules IRIs Reserved character escape sequences String escape sequences limited strings Numeric escape sequences limited IRIs Strings Support top-level blank-predicate-object lists Whitespace required @prefix prefix label D.4 Changes January Team Submission First Public Working Draft Adopted additional string syntaxes SPARQL: STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2 Adopted SPARQL's syntax prefixed names editor's draft): names positions local name apart first last, e.g. ex:first.name. digits first character PN_LOCAL lexical token, e.g. ex:7tm. adopted SPARQL's IRI resolution prefix substitution text. explicitly allowed re-use same prefix. Added parsing rules. See also pre-W3C Submission changelog. E. References E.1 Normative references A. Phillips; M. Davis. Tags Identifying Languages. September IETF Best Current Practice. URL: http://tools.ietf.org/html/bcp47 Tim Bray; Jean Paoli; C. M. Sperberg-McQueen; Eve Maler; François Yergeau. EBNF Notation November W3C Recommendation. URL: http://www.w3.org/TR/REC-xml/#sec-notation Richard Cyganiak, David Wood, Markus Lanthaler. RDF Concepts Abstract Syntax. W3C Recommendation, February URL: http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/. latest edition available http://www.w3.org/TR/rdf11-concepts/ S. Bradner. Key words use RFCs Indicate Requirement Levels. March Internet RFC URL: http://www.ietf.org/rfc/rfc2119.txt M. Murata; S. St.Laurent; D. Kohn. XML Media Types January RFC. URL: http://www.ietf.org/rfc/rfc3023.txt T. Berners-Lee; R. Fielding; L. Masinter. Uniform Resource Identifier Generic Syntax January RFC. URL: http://www.ietf.org/rfc/rfc3986.txt M. Dürst; M. Suignard. Internationalized Resource Identifiers January RFC. URL: http://www.ietf.org/rfc/rfc3987.txt Unicode Standard. URL: http://www.unicode.org/versions/latest/ F. Yergeau. UTF-8, transformation format ISO IETF RFC November URL: http://www.ietf.org/rfc/rfc3629.txt E.2 Informative references Robin Berjon; Steve Faulkner; Travis Leithead; Erika Doyle Navara; Edward O'Connor; Silvia Pfeiffer. HTML5. February W3C Candidate Recommendation. URL: http://www.w3.org/TR/html5/ Gavin Carothers, Andy Seabourne. RDF N-Triples. W3C Recommendation, February URL: http://www.w3.org/TR/2014/REC-n-triples-20140225/. latest edition available http://www.w3.org/TR/n-triples/ Patrick J. Hayes, Peter F. Patel-Schneider. RDF Semantics. W3C Recommendation, February URL: http://www.w3.org/TR/2014/REC-rdf11-mt-20140225/. latest edition available http://www.w3.org/TR/rdf11-mt/ Steven Harris; Andy Seaborne. SPARQL Query Language. March W3C Recommendation. URL: http://www.w3.org/TR/sparql11-query/ Mark Davis; Michel Suignard. Unicode Security Considerations. URL: http://www.unicode.org/reports/tr36/ 