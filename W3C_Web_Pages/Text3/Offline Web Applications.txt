Offline Web Applications Offline Web Applications W3C Working Group Note May Version: http://www.w3.org/TR/2008/NOTE-offline-webapps-20080530/ Latest Version: http://www.w3.org/TR/offline-webapps/ Editors: Anne van Kesteren Software ASA) <annevk@opera.com> Ian Hickson, Google, Inc. Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract HTML several features address challenge building Web applications work offline. document features offline application caching APIs well online/offline events, status, localStorage API) HTML brief tutorials features be used create Web applications work offline. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. Offline Web Applications Working Group Note produced HTML Working Group, part HTML Activity. Comments are welcome public-html-comments@w3.org mailing list publicly archived. Publication Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. document was produced group operating February W3C Patent Policy. group not expect document become W3C Recommendation. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction SQL Offline Application Caching APIs Related APIs References Acknowledgments Introduction Users typical online Web applications are only able use applications have connection Internet. go offline, longer check e-mail, browse calendar appointments, prepare presentations online tools. Meanwhile, native applications provide features: e-mail clients cache folders locally, calendars store events locally, presentation packages store data files locally. addition, offline, users are dependent HTTP cache obtain application contact server get latest copy. HTML specification solutions SQL-based database API storing data locally, offline application HTTP cache ensuring applications are available even user not connected network. SQL client-side SQL database HTML structured data storage. be used store e-mails locally e-mail application cart online shopping site. API interact database asynchronous user interface lock up. database interaction occur multiple browser windows same time API supports transactions. create database object use openDatabase() method Window object. arguments: database name, database version, display name, estimated size, bytes, data be stored database. instance: var db = openDatabase("notes", Example Notes App!", Now database use transaction() method. transaction method arguments: transaction callback, error callback, success callback. transaction callback passed SQL transaction object use executeSQL() method. method arguments: SQL statement, arguments, SQL statement callback, SQL statement error callback. SQL statement callback passed transaction object SQL statement result object access rows, last inserted ID, et cetera. complete infrastructure notes application add following code: function renderNote(row) note somewhere}function reportError(source, message) report error}function renderNotes() db.transaction(function(tx) tx.executeSql('CREATE TABLE NOT Notes(title TEXT, body TEXT)', tx.executeSql(â€˜SELECT Notesâ€™, function(tx, rs) = < rs.rows.length; renderNote(rs.rows[i]); insertNote(title, text) db.transaction(function(tx) tx.executeSql('INSERT Notes VALUES(?, title, text function(tx, rs) function(tx, error) reportError('sql', error.message); Offline Application Caching APIs mechanism ensuring Web applications are available even user not connected network manifest attribute html element. attribute URI manifest, files are be cached. manifest MIME type. typical file looks CACHE MANIFESTindex.htmlhelp.htmlstyle/default.cssimages/logo.pngimages/backgound.pngNETWORK:server.cgi file several files cache, then server.cgi never be cached, so attempt access file bypass cache. manifest then be linked declaring application, <!DOCTYPE HTML><html manifest="cache-manifest">... server.cgi file be white-listed NETWORK: section) so be contacted get updates server, <event-source src="server.cgi"> event-source element new feature HTML servers continuously stream updates Web page.) application cache mechanism also supports way opportunistically cache server) group files matching common prefix, ability have fallback page rendering pages offline. also way scripts add remove entries cache dynamically, way applications atomically update cache new files, optionally presenting custom UI update. Related APIs addition APIs HTML also onLine attribute Navigator object so determine are currently online: var online = navigator.onLine; Changes attribute are indicated online offline events are dispatched Window object. simple synchronous storage access HTML localStorage attribute Window object: localStorage["status"] = References progress) HTML I. Hickson, editor. WHATWG, Web Forms I. Hickson, editor. WHATWG, October HTML I. Hickson, D. Hyatt, editors. W3C, Web Forms I. Hickson, editor. W3C, October Acknowledgments editors thank Chris Wilson, Dion Almaer, James Graham, Julian Reschke, Henri Sivonen, Patrick D. F. Ion, Philip Taylor contributions document. Also thanks Dan Connolly talking writing first HTML WG meeting Boston). 