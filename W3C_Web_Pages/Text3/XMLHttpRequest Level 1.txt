XMLHttpRequest Level XMLHttpRequest Level W3C Working Draft January Version: http://www.w3.org/TR/2014/WD-XMLHttpRequest-20140130/ Latest Version: http://www.w3.org/TR/XMLHttpRequest/ Latest Editor Draft: http://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.html Previous Versions: http://www.w3.org/TR/2012/WD-XMLHttpRequest-20121206/ http://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/ http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/ http://www.w3.org/TR/2010/WD-XMLHttpRequest2-20100907/ http://www.w3.org/TR/2009/WD-XMLHttpRequest2-20090820/ http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080930/ http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080225/ http://www.w3.org/TR/2007/WD-XMLHttpRequest-20071026/ http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070618/ http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/ http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060927/ http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060619/ http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/ Editor: Anne van Kesteren, Mozilla WHATWG version) Julian Aubourg, Creative Area Song), Samsung Electronics Hallvord R. M. Steen, Mozilla Copyright W3C® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract XMLHttpRequest specification API scripted client functionality transferring data client server. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. document published snapshot XMLHttpRequest Living Specification. wish make comments regarding document manner tracked W3C, please submit using public bug database, please send comments public-webapps@w3.org start subject line. W3C Web Applications Working Group W3C working group responsible specification's progress W3C Recommendation track. specification January Working Draft. Publication Working Draft not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. Work specification also done WHATWG. W3C Web Applications working group actively convergence XMLHttpRequest specification WHATWG. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Specification history Conformance Dependencies Extensibility Terminology Interface XMLHttpRequest Task sources Constructor Garbage collection Event handlers States Request open() method setRequestHeader() method timeout attribute withCredentials attribute upload attribute send() method Infrastructure send() method abort() method Response status attribute statusText attribute getResponseHeader() method getAllResponseHeaders() method Response entity body overrideMimeType() method responseType attribute response attribute responseText attribute responseXML attribute Events summary Interface FormData References Acknowledgments Introduction section non-normative. XMLHttpRequest object API fetching resources. name object XMLHttpRequest compatibility Web, component name potentially misleading. First, object supports text based format, including XML. Second, be used make requests HTTP HTTPS implementations support protocols addition HTTP HTTPS, functionality not covered specification). Finally, supports broad sense term pertains HTTP; namely activity involved HTTP requests responses defined HTTP methods. simple code do something data XML document fetched network: function processData(data) taking care data}function handler() == this.DONE) == this.responseXML null this.responseXML.getElementById('test').textContent) success! processData(this.responseXML.getElementById('test').textContent); return; something went wrong processData(null); client = new XMLHttpRequest();client.onreadystatechange = handler;client.open("GET", just want log message server: function log(message) var client = new XMLHttpRequest(); client.open("POST", client.setRequestHeader("Content-Type", client.send(message);} want check status document server: function fetchStatus(address) var client = new XMLHttpRequest(); client.onreadystatechange = function() case network errors not give reliable results == this.DONE) returnStatus(this.status); client.open("HEAD", address); client.send();} Specification history XMLHttpRequest object was initially defined part ofthe WHATWG's HTML effort. Microsoft shipped implementation.)It moved W3C Extensions progress events andcross-origin requests) XMLHttpRequest were developed aseparate draft Level end pointthe drafts were merged XMLHttpRequest became singleentity again standards perspective. development workrequired getting spec finalized taken place WHATWG andin W3C Web Applications working group. XMLHttpRequest Level first stable Recommendation trackspecification XMLHttpRequest feature, allparts XMLHttpRequest are compatibly supported acrossmajor implementations. Implementors be able rely thisspecification therelated test suitein order create interoperable implementations. features included theWHATWG specification are left outbecause are not yet widely implemented used. features are: Fetching data: URLs. URLSearchParams type send() method. additional methods other append() defined interface FormData. Historical discussion be found following mailing listarchives: whatwg@whatwg.org public-webapi@w3.org public-appformats@w3.org public-webapps@w3.org Conformance diagrams, examples, notes specification arenon-normative, are sections explicitly marked non-normative.Everything else specification normative. key words NOT", NOT", normative parts specification are beinterpreted described RFC2119. readability, words donot appear uppercase letters specification.[RFC2119] Dependencies specification several underlying specifications. Cross-Origin Resource Sharing conforming user agent support algorithms Cross-Origin Resource Sharing specification. DOM4 conforming user agent support least subset functionality defined DOM4 specification such various exceptions EventTarget. DOM Parsing Serialization conforming user agent support least serialize concept DOM Parsing Serialization. Encoding Standard conforming user agent support least subset functionality defined Encoding Standard specification such utf-8 encoding. File API conforming user agent support least subset functionality defined File API specification such Blob File interfaces. HTML conforming user agent support least subset functionality defined HTML specification such basics Window object serializing Document object. HTTP conforming user agent support version HTTP protocol. Requirements regarding HTTP are made specification. Progress Events conforming user agent support Progress Events specification. Typed Array conforming user agent support ArrayBuffer ArrayBufferView objects. URL conforming user agent support URL parsing algorithm URL specification. Web IDL conforming user agent also be conforming implementation IDL fragments specification, described Web IDL specification. XML conforming user agent be conforming XML processor reports violations namespace well-formedness. uses typographic conventions HTML. Extensibility User agents, Working Groups, other interested parties are strongly encouraged discuss new features relevant public forum, preferably public-webapps@w3.org. reason not possible prefix extension way. E.g. company Foo add proprietary method bar() be named fooBar() prevent clashes potential non-proprietary method bar(). Terminology term user credentials purposes specification means cookies, HTTP authentication, client-side SSL certificates. Specifically not refer proxy authentication Origin header. Interface XMLHttpRequest XMLHttpRequestEventTarget EventTarget event handlers attribute EventHandler onloadstart; attribute EventHandler onprogress; attribute EventHandler onabort; attribute EventHandler onerror; attribute EventHandler onload; attribute EventHandler ontimeout; attribute EventHandler onloadend;};interface XMLHttpRequestUpload XMLHttpRequestEventTarget XMLHttpRequestResponseType XMLHttpRequest XMLHttpRequestEventTarget event handler attribute EventHandler onreadystatechange; states const unsigned short UNSENT = const unsigned short OPENED = const unsigned short HEADERS_RECEIVED = const unsigned short LOADING = const unsigned short DONE = readonly attribute unsigned short readyState; request void open(ByteString method, DOMString url); void open(ByteString method, DOMString url, boolean async, optional DOMString? username = null, optional DOMString? password = null); void setRequestHeader(ByteString header, ByteString value); attribute unsigned long timeout; attribute boolean withCredentials; readonly attribute XMLHttpRequestUpload upload; void send(optional Blob Document DOMString FormData)? data = null); void abort(); response readonly attribute unsigned short status; readonly attribute ByteString statusText; ByteString? getResponseHeader(ByteString header); ByteString getAllResponseHeaders(); void overrideMimeType(DOMString mime); attribute XMLHttpRequestResponseType responseType; readonly attribute response; readonly attribute DOMString responseText; readonly attribute Document? responseXML;}; XMLHttpRequest object unique, associatedXMLHttpRequestUpload object. JavaScript global environment aworker environment, implementations act ifDocument Document? IDL were notexposed. I.e. send() not overloaded itand responseXML always returns null definition, too). Task sources XMLHttpRequest object owntask source. Namely, task source. Constructor XMLHttpRequest object associated settings object. client = new XMLHttpRequest() Returns new XMLHttpRequest object. XMLHttpRequest() constructor run steps: Let xhr be new XMLHttpRequest object. Set xhr's settings object relevant settings object global object xhr's interface object. Return xhr. Garbage collection XMLHttpRequest object not be garbage collected ifits state OPENED thesend() flag set, state isHEADERS_RECEIVED, orits state LOADING, andone following true: more event listeners registered type readystatechange, progress, abort, error, load, timeout, loadend. upload complete flag unset associated XMLHttpRequestUpload object more event listeners registered type progress, abort, error, load, timeout, loadend. XMLHttpRequest object garbage collected itsconnection still open, user agent terminate request. Event handlers following are event handlers corresponding event handler event types) be supported objects implementing interface inherits XMLHttpRequestEventTarget attributes: event handler event handler event type onloadstart loadstart onprogress progress onabort abort onerror error onload load ontimeout timeout onloadend loadend following event handler corresponding event handler event type) be supported attribute solely XMLHttpRequest object: event handler event handler event type onreadystatechange readystatechange States client readyState Returns current state. XMLHttpRequest object be several states. readyState attribute return current state, be following values: UNSENT value object been constructed. OPENED value open() method been successfully invoked. state request headers be set using setRequestHeader() request be made using send() method. HEADERS_RECEIVED value redirects have been followed HTTP headers final response have been received. Several response members object are now available. LOADING value response entity body being received. DONE value data transfer been completed something went wrong transfer infinite redirects). send() flag send() method been invoked. initially unset used OPENED state. error flag type network error fetch termination. initially unset. Request XMLHttpRequest object followingrequest-associated concepts:request method,request URL,author request headers,request entity body,source origin,referrer source,synchronous flag,upload complete flag, andupload events flag. author request headers list HTTP header namesand corresponding header values. Comparisons HTTP header namesmust be done case-insensitive manner. Initially be empty. request entity body initially be null. synchronous flag,upload complete flag, andupload events flag be initially unset. terminate request run steps: Set error flag. Cancel instance fetch algorithm opened object. there are tasks object's XMLHttpRequest task source task queues, then remove open() method client open(method, url async = true username = null password = null]]]) Sets request method, request URL, synchronous flag. JavaScript TypeError method not valid HTTP method url be parsed. exception method case-insensitive match CONNECT, TRACE TRACK. exception async false, JavaScript global environment document environment, timeout attribute not withCredentials attribute true, responseType attribute not empty string. Theopen(method, url, async, username, password)method run steps: settings object's responsible document not fully active, throw exception. Set base settings object's API base URL. Set source origin settings object's origin. Set referrer source settings object's API referrer source's URL settings object's API referrer source document, settings object's API referrer source otherwise. method not match Method token production, throw JavaScript TypeError. method case-insensitive match CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, TRACE, TRACK, subtract 0x20 byte range 0x61 0x7A not match above, passed literally, including final request. method case-sensitive match CONNECT, TRACE, TRACK, throw exception. Allowing methods pose security risk. Let parsed URL be result parsing url base. parsed URL failure, throw JavaScript TypeError. async argument omitted, set async true, set username password null. Due unfortunate legacy constraints, passing undefined async argument treated differently async being omitted. parsed URL's relative flag set, run substeps: username argument not null, set parsed URL's username username. password argument not null, set parsed URL's password password. async false, JavaScript global environment document environment, timeout attribute value not withCredentials attribute value true, responseType attribute value not empty string, throw exception. Terminate request. request be ongoing point. Set variables associated object Set request method method. Set request URL parsed URL. async false, set synchronous flag. Set author request headers empty list. Unset send() flag. Set response entity body null. Set arraybuffer response entity body null. Set blob response entity body null. Set document response entity body null. Set JSON response entity body null. Set text response entity body null. state not OPENED, run substeps: Change state OPENED. Fire event named readystatechange. setRequestHeader() method client setRequestHeader(header, value) Appends header list author request headers, header already list author request headers, combines value value. exception state not OPENED send() flag set. JavaScript TypeError header not valid HTTP header field name value not valid HTTP header field value. indicated algorithm certain headers be set are left up user agent. addition there are certain other headers user agent take control are not set author indicated end send() method section. non same origin requests using HTTP GET method preflight request made headers other Accept Accept-Language are set. setRequestHeader(header, value) method run steps: state not OPENED, throw exception. send() flag set, throw exception. header not match field-name production, throw JavaScript TypeError. value not match field-value production, throw JavaScript TypeError. empty string empty header field value. Terminate steps header case-insensitive match following headers: Accept-Charset Accept-Encoding Access-Control-Request-Headers Access-Control-Request-Method Connection Content-Length Cookie Cookie2 Date DNT Expect Host Keep-Alive Origin Referer TE Trailer Transfer-Encoding Upgrade User-Agent Via start header case-insensitive match Proxy- header just Proxy- headers are controlled user agent let control aspects transport. guarantees data integrity extent. Header names starting are not allowed be set allow new headers be minted are guaranteed not come XMLHttpRequest. header not author request headers list, header associated value list terminate steps. header author request headers list, followed U+0020, followed value, value header matching header. XMLHttpRequest standard intentionally constraints use HTTP here line contemporary implementations. simple code demonstrating setting same header twice: following script:var client = new XMLHttpRequest();client.open('GET', following header being sent:X-Test: timeout attribute client timeout be set time milliseconds. set non-zero value cause fetching terminate given time passed. time passed, request not yet completed, synchronous flag unset, timeout event then be dispatched, exception be thrown otherwise send() method). set: exception synchronous flag set JavaScript global environment document environment. timeout attribute return value. Initially value be Setting timeout attribute run steps: JavaScript global environment document environment synchronous flag set, throw exception. Set value new value. timeout attribute be set fetching progress. still be measured relative start fetching. withCredentials attribute client withCredentials True user credentials are be included cross-origin request. False are be excluded cross-origin request cookies are be ignored response. Initially false. set: exception state not UNSENT OPENED, send() flag set. set: exception synchronous flag set JavaScript global environment document environment. withCredentials attribute return value. Initially value be false. Setting withCredentials attribute run steps: state not UNSENT OPENED, throw exception. send() flag set, throw exception. JavaScript global environment document environment synchronous flag set, throw exception. Set withCredentials attribute's value given value. withCredentials attribute effect fetching same-origin resources. upload attribute client upload Returns associated XMLHttpRequestUpload object. be used gather transmission information data transferred server. upload attribute return associated XMLHttpRequestUpload object. indicated earlier, XMLHttpRequest object associated XMLHttpRequestUpload object. send() method client send([data = null]) request. optional argument request entity body. argument ignored request method GET HEAD. exception state not OPENED send() flag set. send(data)method run steps: state not OPENED, throw exception. send() flag set, throw exception. request method GET HEAD, set data null. data null, do not include request entity body go step. Otherwise, let encoding be null, mime type be null, then follow rules, depending data: ArrayBufferView Let request entity body be raw data represented data. Blob object's type attribute not empty string let mime type be value. Let request entity body be raw data represented data. document Let encoding be data HTML document, let mime type be let mime type be otherwise. Then mime type. Let request entity body be data, serialized, converted Unicode, utf-8 encoded. Re-throw exception serializing data be serialized, exception thrown. string Let encoding be Let mime type be Let request entity body be data, utf-8 encoded. FormData Let request entity body be result running multipart/form-data encoding algorithm data form data set utf-8 explicit character encoding. Let mime type be concatenation U+0020 SPACE character, multipart/form-data boundary string generated multipart/form-data encoding algorithm. Content-Type header author request headers value valid MIME type charset parameter value not case-insensitive match encoding, encoding not null, set charset parameters Content-Type header encoding. Content-Type header author request headers mime type not null, Content-Type header value mime type author request headers. synchronous flag set, release storage mutex. Unset error flag, upload complete flag upload events flag. there request entity body empty, set upload complete flag. synchronous flag unset more event listeners are registered XMLHttpRequestUpload object, set upload events flag. synchronous flag unset, run substeps: Set send() flag. Fire progress event named loadstart. upload complete flag unset, fire progress event named loadstart XMLHttpRequestUpload object. Return send() method call, continue running steps algorithm. source origin request URL are same origin are same-origin request steps. Fetch request URL origin source origin, using referrer source override referrer source, synchronous flag set synchronous flag set, using HTTP method request method, taking account request entity body, list author request headers, rules listed end section. synchronous flag set making request also follow same-origin request event rules. send() method call now be returned virtue algorithm ending. synchronous flag unset Make upload progress notifications. Make progress notifications. processing request, data available user request, queue tasks update response entity body follow same-origin request event rules. Otherwise are cross-origin request steps. Make cross-origin request, passing parameters: request URL request URL. request method request method. author request headers list author request headers. request entity body request entity body. source origin source origin. referrer source referrer source. omit credentials flag Set withCredentials attribute's value false. force preflight flag Set upload events flag set. synchronous flag set making request also follow cross-origin request event rules. send() method call now be returned virtue algorithm ending. synchronous flag unset processing request, data available end user request, queue tasks update response entity body follow cross-origin request event rules. user agent end user configure proxy modify request appropriately; i.e., connect proxy host instead origin server, modify Request-Line send Proxy-Authorization headers specified. user agent supports HTTP Authentication Authorization not list author request headers, consider requests originating XMLHttpRequest object be part protection space accessed URIs send Authorization headers handle Unauthorized requests appropriately. authentication source origin request URL are same origin, Authorization not list author request headers, request URL's username empty string request URL's password null, user agents prompt end user username password. Otherwise, authentication user agents not prompt end user username password. Unfortunately end users are prompted legacy content constraints. However, possible behavior prohibited, bad UI. E.g. same origin restriction made user agent supports HTTP State Management persist, discard send cookies received Set-Cookie response header, sent Cookie header) applicable. user agent HTTP cache respect Cache-Control headers author request headers Cache-Control: no-cache cache). not send Cache-Control Pragma request headers automatically end user explicitly requests such behavior reloading page). Not Modified responses are result user agent generated conditional request user agent act server gave response appropriate content. user agent allow author request headers override automatic cache validation If-None-Match If-Modified-Since), case Not Modified responses be passed user agent server-driven content-negotiation follow constraints Accept Accept-Language request headers: headers not be modified are author request headers. not author request headers, Accept-Language appropriate value be appended not author request headers, Accept value be appended Responses have content-encodings automatically decoded. author request headers, user agents not include additional request headers other mentioned other authors are not allowed set using setRequestHeader(). authors have predictable API. Infrastructure send() method same-origin request event rules are error flag set Terminate steps. response HTTP status code redirect infinite loop precautions network error. Otherwise, run steps: Set request URL URL conveyed Location header. source origin origin request URL are same origin transparently follow redirect observing same-origin request event rules. Otherwise, follow cross-origin request steps terminate steps algorithm. HTTP places requirements user agent regarding preservation request method request entity body redirects, also end users be notified certain kinds automatic redirections. end user request abort error. there network error case DNS errors, TLS negotiation failure, other type network errors, network error. Do not request kind end user interaction. not include HTTP responses indicate type error, such HTTP status code timeout not request started amount milliseconds specified timeout passed timeout error. Once HTTP headers have been received, synchronous flag unset, HTTP status code response not Switch HEADERS_RECEIVED state. Once first byte more) response entity body been received synchronous flag unset there response entity body synchronous flag unset Switch LOADING state. Once whole response entity body been received there response entity body state LOADING there response entity body synchronous flag set Switch DONE state. cross-origin request event rules are error flag set Terminate steps. cross-origin request status preflight complete synchronous flag unset Make upload progress notifications. cross-origin request status network error network error. cross-origin request status abort error abort error. timeout not request started amount milliseconds specified timeout passed timeout error. Once HTTP headers have been received, cross-origin request status success, synchronous flag unset Switch HEADERS_RECEIVED state. Make progress notifications. Once first byte more) response entity body been received, cross-origin request status success, synchronous flag unset there response entity body, cross-origin request status success, synchronous flag unset Switch LOADING state. Once whole response entity body been received cross-origin request status success there response entity body, cross-origin request status success, state LOADING there response entity body, cross-origin request status success, synchronous flag set Switch DONE state. something said be network error run request error steps exception event error. something said be abort error run request error steps exception event abort. something said be timeout error run request error steps exception event timeout. something said be request error exception exception event event run steps: Terminate request. Change state DONE. synchronous flag set, throw exception exception. Fire event named readystatechange. point clear synchronous flag unset. upload complete flag unset, follow substeps: Set upload complete flag. Fire progress event named progress XMLHttpRequestUpload object. Fire progress event named event XMLHttpRequestUpload object. Fire progress event named loadend XMLHttpRequestUpload object. Fire progress event named progress. Fire progress event named event. Fire progress event named loadend. said switch HEADERS_RECEIVED state run steps: Change state HEADERS_RECEIVED. Fire event named readystatechange. said switch LOADING state run steps: Change state LOADING. Fire event named readystatechange. said switch DONE state run steps: synchronous flag set, update response entity body. Unset synchronous flag. Change state DONE. Fire event named readystatechange. Fire progress event named progress. Fire progress event named load. Fire progress event named loadend. said make progress notifications, download progressing, queue task fire progress event named progress 50ms byte received, least frequent. said make upload progress notifications run steps: request entity body being transmitted upload complete flag unset, queue task fire progress event named progress XMLHttpRequestUpload object 50ms byte transmitted, least frequent. request entity body been fully transmitted server started transmitting response status code such response) upload complete flag still unset, queue task run substeps: Set upload complete flag. Fire progress event named progress XMLHttpRequestUpload object. Fire progress event named load XMLHttpRequestUpload object. Fire progress event named loadend XMLHttpRequestUpload object. abort() method client abort() network activity. abort() method runthese steps: Terminate request. state UNSENT, OPENED send() flag being unset, DONE go step. Otherwise, run substeps: Change state DONE. Unset send() flag. Fire event named readystatechange. upload complete flag false run substeps: Set upload complete flag true. Fire progress event named progress XMLHttpRequestUpload object. Fire progress event named abort XMLHttpRequestUpload object. Fire progress event named loadend XMLHttpRequestUpload object. Fire progress event named progress. Fire progress event named abort. Fire progress event named loadend. Change state UNSENT. readystatechange event dispatched. Response response header HTTP response header transmitted response entity body. trailer fields status attribute client status Returns HTTP status code. status attribute return result running steps: state UNSENT OPENED, return error flag set, return Return HTTP status code. statusText attribute client statusText Returns HTTP status text. statusText attribute return result running steps: state UNSENT OPENED, return empty string. error flag set, return empty string. Return HTTP status text. getResponseHeader() method client getResponseHeader(header) Returns header field value response field name matches header, field name Set-Cookie Set-Cookie2. getResponseHeader(header) method run steps: state UNSENT OPENED, return null. error flag set, return null. header case-insensitive match Set-Cookie Set-Cookie2, return null. header case-insensitive match multiple response headers, return values headers single concatenated string separated other U+002C COMMA U+0020 SPACE character pair. header case-insensitive match single response header, return value header. Return null. Cross-Origin Resource Sharing specification filters response headers exposed getResponseHeader() cross-origin requests. following script: var client = new XMLHttpRequest();client.open("GET", true);client.send();client.onreadystatechange = function() == print(client.getResponseHeader("Content-Type")); print() function get process something text/plain; charset=UTF-8 getAllResponseHeaders() method client getAllResponseHeaders() Returns headers response, exception field name Set-Cookie Set-Cookie2. getAllResponseHeaders() method run steps: state UNSENT OPENED, return empty string. error flag set, return empty string. Return response headers, excluding headers are case-insensitive match Set-Cookie Set-Cookie2, single string, header line separated U+000D CR U+000A LF pair, excluding status line, header name header value separated U+003A COLON U+0020 SPACE pair. Cross-Origin Resource Sharing specification filters response headers exposed getAllResponseHeaders() cross-origin requests. following script: var client = new XMLHttpRequest();client.open("GET", true);client.send();client.onreadystatechange = function() == print(this.getAllResponseHeaders()); print() function get process something Date: Sun, Oct GMTServer: Apache/1.3.31 timeout=15, max=99Connection: Keep-AliveTransfer-Encoding: chunkedContent-Type: text/plain; charset=utf-8 Response entity body response MIME type MIME type Content-Type header excluding parameters converted ASCII lowercase, null response header not be parsed was omitted. override MIME type initially null get value overrideMimeType() invoked. Final MIME type override MIME type null case response MIME type. response charset value charset parameter Content-Type header null there was charset parameter header not be parsed was omitted. override charset initially null get value overrideMimeType() invoked. Final charset override charset null case response charset. response entity body fragment entity body response received so far complete entity body response response not have entity body, response entity body null. response entity body updated part send() method reset open() method. arraybuffer response entity body ArrayBuffer representing response entity body null. arraybuffer response entity body null, let be return value following algorithm: response entity body null, return empty ArrayBuffer object. Return ArrayBuffer object representing response entity body. blob response entity body Blob representing response entity body null. blob response entity body null, set return value following algorithm: response entity body null, return empty Blob object. Return Blob object representing response entity body. document response entity body document representing response entity body null. document response entity body null, set return value following algorithm: response entity body null, return null. JavaScript global environment worker environment, return null. final MIME type not null, text/html, text/xml, application/xml, not end return null. responseType empty string final MIME type text/html, return null. restricted responseType being order prevent breaking legacy content. final MIME type text/html, run substeps: Let charset be final charset. charset null, prescan first bytes response entity body not terminate unsuccessfully then let charset be return value. charset null, set charset utf-8. Let document be document result parsing response entity body following rules set forth HTML Standard HTML parser scripting disabled known definite encoding charset. Flag document HTML document. Otherwise, let document be document result parsing response entity body following rules set forth XML specifications. character encoding, namespace well-formedness error, etc.), return null. Scripts resulting document tree not be executed, resources referenced not be loaded associated XSLT be applied. charset null, set charset utf-8. Set document's encoding charset. Set document's content type final MIME type. Set document's URL request URL. Set document's origin source origin. Return document. JSON response entity body JavaScript valuerepresenting response entity body. response entity body null, set return value followingalgorithm: Let JSON text be result running utf-8 decode byte stream response entity body. Return result invoking initial value parse property JSON object defined JavaScript, JSON text only argument, null function exception. text response entity body string representing response entity body null. text response entity body null, set return value following algorithm: response entity body null, return empty string. Let charset be final charset. responseType empty string, charset null, final MIME type null, text/xml, application/xml ends use rules set forth XML specifications determine encoding. Let charset be determined encoding. restricted responseType being empty string keep non-legacy responseType value simple. charset null, set charset utf-8. Return result running decode byte stream response entity body using fallback encoding charset. Authors are strongly encouraged always encode resources using utf-8. overrideMimeType() method client overrideMimeType(mime) Sets Content-Type header response mime. exception state LOADING DONE. JavaScript TypeError mime not valid media type. overrideMimeType(mime) method run steps: state LOADING DONE, throw exception. parsing mime analogously value Content-Type header throw JavaScript TypeError. mime successfully parsed, set override MIME type MIME type, excluding parameters, converted ASCII lowercase. charset parameter successfully parsed, set override charset value. responseType attribute client responseType = value Returns response type. be set change response type. Values are: empty string set: setting ignored JavaScript global environment worker environment set: exception state LOADING DONE. set: exception synchronous flag set JavaScript global environment document environment. responseType attribute return value. Initially value be empty string. Setting responseType attribute run steps: state LOADING DONE, throw exception. JavaScript global environment document environment synchronous flag set, throw exception. JavaScript global environment worker environment given value terminate steps. Set responseType attribute's value given value. response attribute client response Returns response entity body. response attribute return result running steps: responseType empty string state not LOADING DONE, return empty string. error flag set, return empty string. Return text response entity body. Otherwise state not DONE, return null. error flag set, return null. responseType Return arraybuffer response entity body. responseType Return blob response entity body. responseType Return document response entity body. responseType Return JSON response entity body. responseText attribute client responseText Returns text response entity body. exception responseType not empty string responseText attribute return result running steps: responseType not empty string throw exception. state not LOADING DONE, return empty string. error flag set, return empty string. Return text response entity body. responseXML attribute client responseXML Returns document response entity body. exception responseType not empty string responseXML attribute return result running steps: responseType not empty string throw exception. state not DONE, return null. error flag set, return null. Return document response entity body. responseXML attribute XML name historical reasons. also returns HTML resources documents. Events summary section non-normative. following events are dispatched XMLHttpRequest XMLHttpRequestUpload objects: Event name Interface Dispatched readystatechange Event readyState attribute changes value, changes UNSENT. loadstart ProgressEvent request starts. progress ProgressEvent Transmitting data. abort ProgressEvent request been aborted. instance, invoking abort() method. error ProgressEvent request failed. load ProgressEvent request successfully completed. timeout ProgressEvent author specified timeout passed request completed. loadend ProgressEvent request completed success failure). Interface FormData HTMLFormElement form)]interface FormData void append([EnsureUTF16] DOMString name, Blob value, optional DOMString filename); void append([EnsureUTF16] DOMString name, DOMString value);}; JavaScript global environment aworker environment, FormData beexposed JavaScript constructor part arguments). FormData object ordered list ofentries. Eachentry aname avalue. purposes interaction other algorithms, anentry's type ifvalue string otherwise. Ifan entry's type filename thevalue entry'svalue'sname attribute. fd = new FormData([form]) Returns new FormData object, optionally initialized entries form given). fd append(name, value filename]) Appends new entry FormData object. FormData(form) constructor run steps: Let fd be new FormData object. form given, set fd's entries result constructing form data set form. Return fd. Theappend(name, value, filename)method run steps: Let entry be new entry. Set entry's name name. value Blob, set value new File object name attribute value value File filename given, set value's name attribute value filename. Set entry's value value. Append entry FormData object's list entries. References HTTP State Management Mechanism, Adam Barth. IETF. Cross-Origin Resource Sharing, Anne van Kesteren. W3C. DOM, Anne van Kesteren, Aryeh Gregor, Ms2ger et al.. W3C. DOM Parsing Serialization, Travis Leithead Ms2ger. W3C. ECMAScript Language Specification. ECMA. Encoding Standard, Anne van Kesteren. WHATWG. File API, Arun Ranganathan Jonas Sicking. W3C. HTML, Robin Berjon, Travis Leithead, Erika Doyle Navara et al.. W3C. Hypertext Transfer Protocol HTTP/1.1, Roy Fielding, James Gettys, Jeffrey Mogul et al.. IETF. HTTP Authentication: Basic Digest Access Authentication, J. Franks, Phillip Hallam-Baker, J. Hostetler et al.. IETF. Multiple vendors' web servers enable HTTP TRACE method default. US-CERT. Microsoft Internet Information Server vulnerable cross-site scripting HTTP TRACK method. US-CERT. HTTP proxy default configurations allow arbitrary TCP connections. US-CERT. Progress Events, Anne van Kesteren, Charles McCathieNevile Jungkee Song. W3C. Key words use RFCs Indicate Requirement Levels, Scott Bradner. IETF. Typed Array, David Herman Kenneth Russell. Khronos. URL Standard, Anne van Kesteren. WHATWG. Web IDL, Cameron McCormack. W3C. Extensible Markup Language, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen et al.. W3C. Namespaces XML, Tim Bray, Dave Hollander, Andrew Layman et al.. W3C. Acknowledgments editor thank Addison Phillips, Adrian Bateman, Ahmed Kamel, Alex Hopmann, Alex Vincent, Alexey Proskuryakov, Andrea Marchesini, Asbjørn Ulsberg, Boris Zbarsky, Björn Höhrmann, Cameron McCormack, Chris Marrin, Christophe Jolif, Charles McCathieNevile, Dan Winship, David Andersson, David Flanagan, David Håsäther, David Levin, Dean Jackson, Denis Sureau, Dominik Röttsches, Doug Schepers, Douglas Livingstone, Elliott Sprehn, Elliotte Harold, Eric Lawrence, Eric Uhrhane, Erik Arvidsson Erik Dahlström, Feras Moussa, Geoffrey Sneddon, Gideon Cohn, Glenn Adams, Gorm Haug Eriksen, Håkon Wium Lie, Hallvord R. M. Steen, Henri Sivonen, Huub Schaeks, Ian Davis, Ian Hickson, Ivan Herman, Jarred Nicholls, Jeff Walden, Jens Lindström, Jim Deegan, Jim Ley, Joe Farro, Jonas Sicking, Julian Reschke, Song), Lu), Karl Dubost, Lachlan Hunt, Maciej Stachowiak, Magnus Kristiansen, Marc Hadley, Marcos Caceres, Mark Baker, Mark Birbeck, Mark Nottingham, Mark S. Miller, Martin Hassman, Mohamed Zergaoui, Ms2ger, Odin Hørthe Omdal, Olli Pettay, Pawel Glowacki, Peter Michaux, Philip Taylor, Robin Berjon, Rune F. Halvorsen, Ruud Steltenpool, Sergiu Dumitriu, Sigbjørn Finne, Simon Pieters, Stewart Brodie, Sunava Dutta, Takeshi Yoshino, Thomas Roessler, Tom Magliery, Travis Leithead Yehuda Katz, Zhenbin Xu contributions specification. Special thanks Microsoft employees first implemented XMLHttpRequest interface, was first widely deployed Windows Internet Explorer browser. Special thanks also WHATWG drafting initial version specification Web Applications document renamed HTML). Special thanks Anne van Kesteren provided nearly contents stepped down W3C editor now succession providing discussions contents editor XMLHttpRequest Living Standard WHATWG version specification convergence. Thanks also have helped improve specification sending suggestions corrections. keep bugging issues!) 