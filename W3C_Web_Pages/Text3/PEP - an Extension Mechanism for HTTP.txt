PEP Extension Mechanism HTTP WD-http-pep-971121 PEP Extension Mechanism HTTP W3C Working Draft November Authors Henrik Frystyk Nielsen, Dan Connolly, Rohit Khare, Eric Prud'hommeaux version: http://www.w3.org/TR/WD-http-pep-971121 WD-http-pep-971121.html,v fillault Exp Latest Released Version: http://www.w3.org/TR/WD-http-pep Previous Versions: http://www.w3.org/TR/WD-http-pep-970714 http://www.w3.org/TR/WD-http-pep-970428 http://www.w3.org/TR/WD-http-pep-970321 http://www.w3.org/TR/WD-http-pep-970131 http://www.w3.org/TR/WD-http-pep-960820 http://www.w3.org/TR/WD-http-pep-960819 http://www.w3.org/TR/WD-http-pep-960222 http://www.w3.org/TR/WD-http-pep-951122 http://www.w3.org/TR/WD-http-pep-960220 Status Document W3C Working Draft review W3C members other interestedparties. draft document be updated, replaced made obsoleteby other documents time. inappropriate use W3C Working Draftsas reference material cite other progress." Alist current W3C working drafts be found WD also been submitted IETF ID<draft-ietf-http-pep-05.txt>. PEP specification gone thorough design phase entereda steady state authors do not intend modify document anyfurther. same time have developed practical experience demo code whichdemonstrates client, server, proxy interactions using dynamic loadedPEP extensions. However, believe essential specificationto be tested real world applications being deployed large, whichis reason status Experimental. Abstract HTTP used increasingly applications need more facilities standard version protocol ranging distributedauthoring, collaboration, printing, various remote procedure callmechanisms. Protocol Extension Protocol extension mechanismdesigned address tension private agreement publicspecification accommodate extension applications such HTTP clients,servers, proxies. PEP mechanism designed associate extensionwith URI[2], use few new RFC derived header fields carrythe extension identifier related information parties involvedin extended transaction. document PEP interactions PEP andHTTP/1.1[7]. PEP intended be compatible HTTP/1.0[5] inasmuch asHTTP/1.1 compatible HTTP/1.0 section proposedthat PEP extension mechanism be included future versions HTTP. PEP extension mechanism be applicable other information exchangenot mentioned document. recommended readers get acquaintedwith section suggested reading specification listof sections specific HTTP based applications. Table Contents Introduction Requirements Purpose Operational Overview Guide Specification PEP Extension Space HTTP Notational Conventions Bag Syntax Extension Declarations Mapping Header Fields Strength Declaration End-to-End Extension Declarations Hop-by-Hop Extension Declarations Extension Policy Information Realm Policy Policy Expirations Extra Parameters End-to-End Policies Hop-by-Hop Policies Publishing Extension Binding HTTP Requests Extending Existing HTTP Methods Adding New HTTP Methods HTTP Status Codes Policy Not Fulfilled Bad Mapping HTTP Proxy Servers Proxy Servers End-to-End Recipients Proxy Servers Acting Behalf User Agents Proxy Servers Acting Behalf Origin Servers Proxy Servers Repeated Hop-by-Hop Extensions Practical Considerations HTTP Interaction Existing HTTP/1.1 Methods Interaction Existing HTTP/1.1 Headers Server Initiated Extension Declarations Security Considerations Normative References Bibliography: Informative References Acknowledgements Authors Addresses Summary PEP Interactions Examples Client Queries Server DAV Client Informs Server ZipFlate Compression Extension Server Content-Digest Extension Server Client use Payment Extension Introduction Requirements HTTP generic request-response protocol, designed accommodate varietyof applications, network information exchange searching filetransfer repository access query forms processing. Most HTTP transactions are initiated user agent issuing request tobe applied resource origin server, intermediaries betweenthem cases. origin server replies response indicatingthe result transaction. Semantically, however, HTTP transaction principal accessinga resource user) principal responsible publication ofa given resource publisher responsible serviceprovided particular URI, example, mapping URIand representation resource end user accessesinformation provided publisher. Exactly role end useror publisher scope document. HTTP, case most transaction based information exchange protocols,is used increasingly applications need more facilities standardversion protocol distributed authoring, collaborationand printing, various remote procedure call mechanisms. Many extended applications do not require agreement whole Internetabout extended facilities; rather, conforming peers supporting particular protocol extension feature employ dynamically prior agreement; possible party having capability new protocol require other party understand abide new protocol abort operation; negotiation matching capabilities possible. need extensibility tension dynamically extensibleapplications public, static specifications. Purpose Protocol Extension Protocol extension mechanism designedto accommodate dynamic extension HTTP applications software components;and address tension private agreement public specification.The kind extensions capable being introduced PEP range extending single protocol message; introducing new encodings; initiating HTTP-derived protocols new applications; switching protocols once initiated, run independent original protocol stack. document protocol extension mechanism referred PEP design result analyzing variety extensions extensionmechanisms HTTP HTTP-like protocols, motivation specification also interactions PEP HTTP/1.1[7]including scoping rules cache semantics. PEP intended be compatiblewith HTTP/1.0[5] inasmuch HTTP/1.1 compatible HTTP/1.0 section1.4 proposed PEP extension mechanism be includedin future versions HTTP. Operational Overview PEP intended be used party designs extension; party extension identifier, URI, makes more representations extension available address section party using PEP compliant agent implementation extension wishes use agent use extension referencing URI PEP extension declaration section Information extensions be passed agents including information be used conditions section extension ubiquitous, be incorporated new versionof base protocol, hence transitioning dynamic extension staticspecification. case, applications refer new version ofthe base protocol instead PEP extension section PEP extension declarations are characterized following properties: link features introduced extension URI identifying extension, potentially allowing recipient interpret message correctly prior agreement. contain strength scope allowing sender define appropriate action be taken recipient even not understand semantics extension. agent generate declarations independent other agents advantage including extension identifier costof extra bytes spell URI, use central registry ofextension names avoided. PEP also be used extend applications tosupport centrally registered extensions, assuming URI published partof registration section PEP mechanism designed accommodate not require dynamicextension clients, servers, proxies software components Clients servers be implemented software component interfaces allow dynamic installation extension facilities. implementation compatible software component interface supported agent be made available URI identifying extension. agent receiving message referring extension not known agent dereference extension's identifier dynamically load support extended facility. representation implementation dynamic extensible software componentinterfaces scope specification. Guide Specification specification organized Section PEP fitsinto HTTP. not required reading further understandingof specification. Section overview notational conventionsused specification. Section core part specification describing thegeneric PEP extension mechanism. Section describe theinteractions PEP HTTP/1.1[7]. generic PEP extension mechanism be applicable other informationexchange protocols. Such mappings, however, are scope thisspecification. PEP Extension Space HTTP PEP designed support dynamic extensibility HTTP methods, headers,and status codes. describing detail PEP isconstructive have look methods, headers, status codes behavein HTTP: Methods method token HTTP request method be performed resource identified Request-URI. Methods need priori agreement semantics not be extended dynamically. HTTP server not know method, report error message section 5.1.1). limitation method space request only contain single method. Hence, not possible support multiple, simultaneous extensions having multiplicity methods. Status Codes status code element 3-digit integer result code attempt understand satisfy request. Status codes are method tokens there only be single status code response. However, status codes are somewhat easier extend, unknown status codes be treated x00 cod-e class section example, new status code, New Code) default Headers Header fields be used pass information parties involved transaction, transaction resource identified Request-URI. advantage headers header space relatively open compared methods status codes. New headers be introduced be ignored recipient not recognize header affecting outcome transaction section order achieve desired flexibility, PEP designed use headerspace describing extensions not directly HTTP methods status codes.Instead, PEP placeholder method space status codespace respectively guaranteeing interactions existing HTTPapplications perform according PEP specification. placeholdersare: special PEP method PEP- method prefix request more PEP extensions be adhered transaction aborted section special status code Not Fulfilled) policy accessing resource was not met further information be found response diagnosing problem section placeholders allow multiple PEP extensions be deployedsimultaneously overloading method space status code space. Notational Conventions specification uses same notational conventions basic parsingconstructs RFC particular BNF constructs document are be interpreted describedin RFC key words NOT", NOT", NOT", document are tobe interpreted described RFC PEP not rely particular features defined URLs cannotpotentially be expressed using URNs section Therefore, moregeneric term URI[2] used specification. Bag Syntax bag element recursive structure uses braces todelimit attribute-value pairs consist tokens, quoted-strings,URIs recursively defined bags. BNF bag syntax bag = bagname bagname = token bagitem = bag token quoted-string bag semantics are defined context bag name. valueof quoted string be URI cases. explicitly definedotherwise, tokens bag are case-insensitive. Comments definedby RFC indicated surrounding comment text parenthesesMUST NOT be used bag construct. Extension Declarations Extension declaration bags are used indicate PEP extensions havebeen applied message. grammar extension declaration asfollows: ext-decl = req-ext-attr req-ext-attr = map opt-ext-attr = strength attribute-ext map = <"> URI <"> strength = attribute-ext = bag header-prefix = map attribute bag URI identifying extensionand list header field names introduced extension section4.1 extension identifier relative, interpreted relativeto base URI message defined RFC strength attribute bag recipient MUSTor MAY obey semantics given extension report error extension declaration bag be extended throughthe use more attribute-ext bags. Unrecognizedattribute-ext bags be ignored MUST NOT be removed byproxies forwarding extension declaration section Extension declarations be hop-by-hop end-to-end section13.5.1) depending scope declaration section declarations MUST be transmitted ultimate recipient ofthe extension declaration. Hop-by-hop declarations are meaningful only fora single transport-level connection. Mapping Header Fields header-prefix map attribute bag be used toindicate header fields message matching value using string prefix-matching are introducedby extension declaration instance. extension instanceto dynamically reserve part header space message introducingnew header fields risking header name conflicts other extensioninstances. Examples header-prefix values are Agents NOT overload well-known widely deployed header fields withnew semantics new semantics are superset existing semanticsso header fields still be interpreted according oldsemantics. Agents NOT reuse already mapped header fields same message.If header field mapped multiple extension declarations samemessage, recipient report error section Proxies adding extension declarations message MUST make sure anyheader fields introduced do not conflict already mapped header fieldsin protocol message section Strength Declaration strength attribute bag be used specify actions tobe taken ultimate recipient extension declaration. Thestrength value indicate recipient MUST obey extension declaration report error; recipient MAY obey extension declaration ignore altogether. strength ultimate recipient MUST consult andadhere rules given extension processing message orreport error section strength ultimate recipient extensionMAY consult adhere rules given extension processingthe message, ignore extension declaration completely. agent maynot be able distinguish ultimate recipient not understandan extension referred extension declaration strength"may" simply extension declaration. strength attribute present, default strength Not accepting ignoring extension declaration different notaccepting mapping header field-names introduced attribute bag. ultimate recipient accept mapping,for example field-name already mapped extensiondeclaration protocol message, report error section8.2). End-to-End Extension Declarations End-to-end declarations MUST be transmitted ultimate recipient ofthe declaration. PEP header field end-to-end header fieldand defined pep = example GET HTTP/1.1 Host: some.host PEP: multiple end-to-end extensions are declared same message, thedeclarations MUST be listed order were applied themessage. Proxies MAY certain conditions act ultimate recipient ofdeclarations behalf user agents origin servers section Hop-by-Hop Extension Declarations Hop-by-hop extension declarations are meaningful only singletransport-level connection. C-PEP header field hop-by-hopheader field MUST NOT be communicated proxies further connections.The C-PEP header following grammar: c-pep = example GET HTTP/1.1 Host: some.host C-PEP: 43-Credentials: Connection: C-PEP, Credentials HTTP, C-PEP header field MUST be protected aConnection header including C-PEP aConnection header directive. directive MUST be handled accordingto HTTP/1.1 specification Connection header section10.2 section agent MUST NOT send C-PEP header field HTTP/1.0 proxyas not obey HTTP/1.1 rules parsing Connectionheader field section multiple hop-by-hop extensions are declared same message, extensiondeclarations MUST be listed order were applied. Hop-by-hopC-PEP declarations MUST be processed end-to-endPEP declarations. Extension Policy Information Extension Policy bags are used indicate extensions be appliedto message. Extension policies differ extension declarations latter information extensions have been appliedto message. extension policy defined policy-decl = req-pol-attr req-pol-attr = id opt-pol-attr = max-age parameters strength attribute-ext id = <"> URI <"> = max-age = delta-seconds parameters = URI-wildcard = <"> URI <"> wildcard wildcard = id attribute URI identifying extension extension identifier relative, interpreted relativeto base URI message defined RFC attribute bag resources, policy intendedfor section max-age attribute bag informationshould be considered stale section params attributebag be used pass additional information extension policy(see section strength attribute policy requirementor optional resource(s) section extension policy bag be extended more attribute-ext bags. Unrecognizedattribute-ext bags be ignored MUST NOT be removed byproxies forwarding extension policy section Extension policies be hop-by-hop end-to-end policies depending scope section End-to-endpolicies MUST be transmitted ultimate recipient extension policy.Hop-by-hop policies are meaningful only single transport-level connection. Note: expected extension policies be integrated withother metadata initiatives RDF initiative example. Realm Policy attribute bag be used specify resource(s) identifiedby URI(s) policy extension policies tobe deployed third party sites be distributed other means thandirectly involved parties. URI followed LWS wildcard("*") set URIs given URI using prefixmatching. URI wildcard means URI only. Examples URI-wildcards are empty attribute bag bagitems included) indicatesthat policy not applied resource. attributebag present, default value Request-URI. realm include number resources note single wildcard"*" not valid URI-wildcard value. Policy Expirations max-age attribute bag be used specify date/time afterwhich recipient consider policy stale. max-ageattribute bag value information longer be usedif age greater specified time seconds section13.2.3 calculate age). max-age attribute bag cannotbe used force recipient discard policy information; semanticsapply only caching mechanism policy information. Extra Parameters params attribute bag be used include additional information aboutthe extension modifiers use extension. paramsvalues not be case-sensitive, depending semantics theparameter name. params attribute bag defined generic bag structure,which be nested. default parameters are defined. Note: PEP implementations pass parameters module ormodules handling particular extension have impact useof extension. End-to-End Policies End-to-end policies MUST be transmitted ultimate recipient message.The PEP-Info header field end-to-end header definesas pep-info = example HTTP/1.1 Content-Type: text/html Content-Length: PEP-Info: <!doctype html public HTML > <html> Proxies MAY certain conditions act ultimate recipients extensionpolicies behalf user agents origin servers section Hop-by-Hop Policies Hop-by-hop policies are meaningful only single transport-level connection.The C-PEP-Info header field hop-by-hop header field MUSTNOT be communicated proxies further connections. TheC-PEP-Info header following grammar: c-pep-info = example HTTP/1.1 Policy Not Fulfilled C-PEP-Info: Connection: C-PEP-Info HTTP, C-PEP-Info header field MUST be protected aConnection header including C-PEP-Info aConnection header directive. directive MUST be handled accordingto HTTP/1.1 specification Connection header section10.2 section agent MUST NOT send C-PEP-Info header field HTTP/1.0proxy not obey HTTP/1.1 rules parsing theConnection header field section Publishing Extension protocol extension definition be published addressof extension identifier, not requirement specification.The only absolute requirement distinct names be used distinctsemantics. example, way achieve use mid,cid, uuid URI. association extension identifierand specification be made distributing specification, whichreferences extension identifier. strongly recommended integrity persistence extensionidentifier maintained kept unquestioned lifetime ofthe extension. Care be taken not distribute conflicting specificationsthat reference same name. Even URI used publish extensionspecifications, care be taken specification made availableat address not change significantly time. agent associatethe identifier old semantics, associate withthe new semantics. extension definition be made available different representationsranging human-readable specification defining extension semantics, downloadable code semantics defined extension, formal interface description provided extension, machine-readable specification defining extension semantics. example, software component specification resideat same address human-readable specification contentnegotiation). human-readable representation document extensionand encourage deployment, software component clients andservers be dynamically extended. Binding HTTP Requests HTTP request called request least onePEP extension declaration strength HTTP server MUSTNOT return 2xx status-code obeying extensiondeclaration(s) strength binding request. sectiondescribes binding request mechanism PEP existingHTTP applications. section stated header fields SHOULDbe ignored recipient MUST be forwarded proxies." Hence, usinga PEP C-PEP extension declaration not sufficientto evoke correct behavior existing HTTP agents binding request.However, section 5.1.1, Method, said return501 Implemented) method unrecognized not implemented bythe server." similar statement made section thereforesafe assume using method name produce correct resultfrom existing HTTP servers proxies. PEP uses HTTP request method name extend existing HTTP/1.1 methodsand introduce new methods section cases, bindingHTTP request cached entries described section binding requests are not cachable. Extending Existing HTTP Methods method name HTTP/1.1 requests containing PEP extension declarationof strength semantically method MUST beprefixed section example, client mightexpress binding rights-management constraints HTTP PUT requestas PEP-PUT HTTP/1.1 PEP: 8-copyright: http://www.w3.org/COPYRIGHT.html 8-contributions: http://www.w3.org/PATCHES.html Host: www.w3.org Content-Length: Content-Type: text/html <!doctype html ultimate recipient binding HTTP request method name MUST process request performing followingactions order occur: Identify extension declarations hop-by-hop end-to-end) strength server MAY ignore declarations strength affecting result transaction; Evaluate process extensions identified order were declared section extension declarations do not match policy accessing resource then respond Not Fulfilled) status-code section Strip prefix method name process reminder request according semantics existing HTTP/1.1 method name defined prefix reserved PEP MUST NOT be used otherHTTP extensions. Adding New HTTP Methods PEP method be used PEP extension declarations strength"must" do not naturally extend existing HTTP/1.1 methods. Suchmethods be address space manipulation extensions MOVE COPY,for example: PEP HTTP/1.1 PEP: 4-Destination: destination.html Host: some.host PEP method semantics request aredefined more PEP extension declarations strength request. PEP method not have HTTP message semanticsbesides being placeholder PEP extension declarations hence allother semantics MUST be defined declaration(s) included request. ultimate recipient PEP request MUST process requestby doing following: Identify extension declarations hop-by-hop end-to-end) strength server MAY ignore declarations strength affecting result transaction; Evaluate process extensions identified order were declared section extension declarations do not match policy accessing resource then respond Not Fulfilled) status-code section successful response be response entity,202 action not yet been enacted, Content)if response not include entity. extensiondeclarations have strength response be PEP method reserved PEP MUST NOT be used otherHTTP extensions. HTTP Status Codes PEP new status codes addition ones already definedby HTTP/1.1[7]. Status-Code described including adescription metainformation required response. Policy Not Fulfilled policy accessing resource not been met request. Theresponse MUST include PEP-Info C-PEP-Info headerfield specifying extensions required publishing party accessingthe resource. server MAY use attribute bag indicatewhether policy other resources. client MAY repeat request using appropriate extension(s). Ifthe initial request already included extensions requested 420response, then response access been refused thoseextension declarations. response same set extension policies priorresponse, then client MAY present entity included responseto user, entity include relevant diagnostic information. Implementers note similarity way authentication challengesare issued status-code section10.4.2) Bad Mapping mappings indicated more map attribute bags were not unique mapped same header field more once.The client MAY repeat request using new set mappings believesthat find unique set header fields transactionwill succeed. HTTP Proxy Servers section role caching non-caching proxies howthey interact PEP extensions. Normally, ultimate recipient anend-to-end extension declaration end-to-end extension policy anorigin server user agent. case, proxy MUST forward components extension, includingdeclarations, policies, headers, methods status codes definedby specification. other cases, however, intermediate caching non-caching proxies MAYbe authorized act behalf origin servers user agents. Howsuch agreement reached party representing proxy theparty behalf act, scope PEP, example,the parties be same trust domain. Proxy Servers End-to-End Recipients Proxy Servers Acting Behalf User Agents case proxy authorized act ultimate recipient behalfof proxy clients end-to-end extensions, MUST obey followingrules: proxy remove extension declaration(s) header fields are part declaration(s) act authoritatively forwarding response proxy client; issue extension policies extensions act authoritatively was user agent; extension declaration added HTTP proxy strength proxy MUST prepend method name prefix use PEP method instead method name used proxy client request, forwarding response origin server section example proxy acting behalf more user agents anelementary school wishing enforce certain policy accessing informationon Internet. local school proxy act authoritatively retrievalfilter behalf pupils instead having distributed filtering enabledon user agents using client. Proxy Servers Acting Behalf Origin Servers case proxy authorized act ultimate recipient behalfof origin server end-to-end extensions, MUST obey followingrules: proxy remove extension declaration(s) header fieldsthat are part declaration(s) act authoritativelybefore forwarding request origin server; issue extension policies extensions act authoritatively was origin server; extension declaration added HTTP proxy strength there are other extension declarations strength request, proxy MUST remove method name prefix forwarding request origin server section request uses PEP method, proxy MUST NOT forward request origin server communication proxy origin server be completed using existing HTTP/1.1 method. example proxy acting behalf origin server corporationhaving subscription on-line journal. access origin servergoes corporate firewall runs caching proxy server. Theorganization reports publisher journal monthly basis atwhich point subscription re-evaluated. day-to-day access, theproxy authority act authoritatively behalf origin serverregistering usage journal. Proxy Servers Repeated Hop-by-Hop Extensions PEP extension be used parts message path, including useragents, origin servers, proxies, not covered end-to-end hop-by-hopextension declarations, be defined repeated hop-by-hop extension.This example be case proxy extension applied subsetof proxies message path. designer extension decide repeat itselfon hop-by-hop basis. other words, scope more complex hop-by-hopor end-to-end scope property extension transparentto PEP. Practical Considerations HTTP section practical considerations intended PEP extendedHTTP applications. issues described not apply other informationretrieval protocols. Interaction Existing HTTP/1.1 Methods Extension designers consider extension work withexisting HTTP/1.1 methods using method token prefix orwith PEP method section specificationdoes not provide absolute rule use PEP methodcompared method token prefix method token prefix required situations intermediateproxies act authoritatively behalf origin servers user agents(see section case extension be used existingmethods then be considered extension be used withany existing HTTP/1.1 methods only subset HTTP/1.1 methods follow convention being requestermeaning never have significance taking actionother retrieval section example caseof GET HEAD method. PEP extension declarationsof strength explicitly modify replace method name,existing HTTP applications never be able mistake PEP enabled messagefor existing HTTP messages indicated being safe. extensions have property fromerror expiration issues) side effects N > identical extendedrequests same single extended request. notthe case PEP extension then consider to1) disable repeated requests, inform user repeating identical requests extension. Interaction Existing HTTP/1.1 Headers Designers extensions be used HTTP messaging model shouldconsider interaction existing HTTP/1.1 headers. Especially, shouldbe noted PEP designed be compatible HTTP/1.0[5] inasmuchas HTTP/1.1 compatible HTTP/1.0 section Connection header described section allowsthe sender specify options are desired particular transportconnection only. PEP hop-by-hop extension declarations policies alongwith header fields introduced extension declarations MUST be includedas Connection header directives. PEP applications MUST NOT sendany hop-by-hop extension declarations policies HTTP/1.0 proxies asthey do not obey rules HTTP/1.1 parsing Connectionheader field also section Upgrade header, section client specifywhat additional communication protocols supports useif server finds appropriate switch protocols. PEP functionality need central registry protocolnames. PEP compliant agents MAY use Protocols) statuscode switch HTTP-based protocols protocols, once initiated,run completely independently HTTP. content coding values Content-Encoding header describedin section indicate encoding transformation beenapplied entity. PEP same functionality theneed central registry content codings. content codings andPEP extension declarations are ordered, using lead ambiguoussituations. Simultaneous use mechanisms therefore stronglydiscouraged. origin server explicitly prevent intermediaries applying aContent-Encoding resource using no-transformCache-Control directive section Server Initiated Extension Declarations PEP extension declarations be generated servers well clients.If PEP compliant server response extension declarationreferring extension message such way themessage not be decoded using extension, correspondingrequest was received client version lower HTTP/1.1, received Via header field indicating was forwarded proxy version lower HTTP/1.1, response not already include Expires header, sender include Expires header field whosefield-value identical field-value itsDate header field(see section agents themessage path are HTTP/1.1, then sender use theCache-Control header field instead Expires headerfield mark entity uncachable. Security Considerations parameter party give information extensions used party's resources. parties provide resources different servers, different addresses same server. distinguishing parties responsible different resources same server be infeasible, clients ignore information given server have reason trust reason believe trusting have significant negative consequences. Dynamic installation extension facilities described introduction software written party provider implementation) be executed authority party operating host software). host party variety horse" attacks provider, malicious third party implementations provider's name. See, example RFC2046[6], section discussion risks. Normative References D. H. Crocker. Format ARPA Internet Text Messages", STD RFC UDEL, August T. Berners-Lee, Resource Identifiers WWW. Unifying Syntax Expression Names Addresses Objects Network used World-Wide Web", RFC CERN, June T. Berners-Lee, L. Masinter, M. McCahill. Resource Locators RFC CERN, Xerox PARC, University Minnesota, December R. Fielding, Uniform Resource Locators", RFC UC Irvine, June T. Berners-Lee, R. Fielding, H. Frystyk, Transfer Protocol HTTP/1.0", RFC W3C/MIT, UC Irvine, W3C/MIT, May N. Freed, N. Borenstein, Internet Mail Extensions Part Media Types", RFC Innosoft, First Virtual, November R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, T. Berners-Lee, Transfer Protocol HTTP/1.1", RFC U.C. Irvine, DEC W3C/MIT, DEC, W3C/MIT, W3C/MIT, January D. Kristol, L. Montulli, State Management Mechanism", RFC Bell Laboratories Lucent Technologies, Netscape Communications, February S. Bradner, words use RFCs Indicate Requirement Levels", RFC Harvard University, March J. C. Mogul, R. Fielding, J. Gettys, H. Frystyk, interpretation HTTP version numbers", Internet Draft RFC DEC, U.C. Irvine, DEC W3C/MIT, W3C/MIT, HTTP Working Group, May, O. Lassila, R. Swick, Description Framework Model Syntax", W3C/Nokia, W3C, W3C Working draft, October work progress H. Schulzrinne, A. Rao, R. Lanphier, Time Streaming Protocol Internet Draft draft-ietf-mmusic-rtsp-05, Columbia U./Netscape/Progressive Networks, March work progress T. Berners-Lee, R. Fielding, L. Masinter, Resource Locators Internet Draft draft-fielding-url-syntax-09, W3C/MIT, U.C. Irvine, Xerox Corporation, May work progress Bibliography: Informative References D. Eastlake, Payment Preamble", Internet Draft draft-eastlake-universal-payment-03, CyberCash, March work progress. D. M. Kristol, Proposed Extension Mechanism HTTP", Internet Draft draft-kristokl-http-extensions-00, January Document expired. JEPI, Payment Mechanisms HTTP", Internet Draft draft-khare-jepi-uppflow-00, W3C, August Document expired. J. Miller et al, Label Syntax Communication Protocols W3C Recommendation REC-PICS-labels, W3C, October Y. Goland et al, Distributed Authoring Versioning", Internet Draft, draft-jensen-webdav-ext-01, March work progress. N. Borenstein, User Agent Configuration Mechanism Multimedia Mail Format Information", RFC pp. Bellcore, September J. Klensin, N. Freed, M. Rose, E. Stefferud, D. Crocker. Service Extensions", RFC MCI, Innosoft, Dover Beach Consulting, Network Management Associates, Brandenburg Consulting, November D. Robinson, WWW Common Gateway Interface Version Internet Draft draft-robinson-www-interface-01, February Document expired. A. Baird-Smith, object oriented server", W3C Note, June H. Frystyk, Architecture", December R. Thau, considerations Apache Server API", Fifth International World Wide Web Conference, May Paris, France Netscape Corporation, Netscape Server API" Microsoft Corporation, Server API Documentation" Open Market, Inc, Restoring CGI's Good Properties Then Spyglass, MicroServer Application Development Interface" J. Franks, Server HTTP" Roxen, Roxen Challenger" Acknowledgements PEP protocol product substantial amount investigationand collaboration. Dave Kristol did first writing HTTP extensionmechanisms[15]. Jim Miller Dave Raggett sketched initial design,which Rohit Khare wrote up number drafts. Tim Berners-Lee, AnselmBaird-Smith, Paul Leach Daniel Dardailler deserve special recognitionfor efforts commenting design phase protocol. Alsothanks Henning Schulzrinne, Anup Rao Robert Lanphier pointingout generalities PEP providing support integration RTSP[12]. specification direct reflection implementation work: aclient implementation HTPEP module) server implementationby Eui-Suk Chung Anit Chakraborty JEPI project. document benefited greatly comments participatingin HTTP-WG. addition already mentioned, following individualshave contributed specification: Eui-Suk Chung, Don Eastlake, Roy Fielding, Jim Gettys, Yaron Goland, Phill Hallam-Baker, Paul Hoffman, Koen Holtman, Ora Lassila, Larry Masinter, Jim Whitehead Authors Addresses Dan Connolly Architecture Domain Lead, World Wide Web Consortium MIT Laboratory Computer Science Technology Square Cambridge, MA U.S.A. Email: connolly@w3.org Rohit Khare Technical Staff, World Wide Web Consortium MIT Laboratory Computer Science Technology Square Cambridge, MA U.S.A. Email: khare@w3.org Henrik Frystyk Nielsen Technical Staff, World Wide Web Consortium MIT Laboratory Computer Science Technology Square Cambridge, MA U.S.A. Email: frystyk@w3.org Eric Prud'hommeaux Contractor, World Wide Web Consortium MIT Laboratory Computer Science Technology Square Cambridge, MA U.S.A. Email: eric@w3.org Appendices Summary PEP Interactions following tables summarize outcome strength scope rules inPEP transactions involving PEP compliant non-PEP compliant HTTP proxiesand origin servers. summary intended guide index text,but necessarily cryptic incomplete. summary never be usedor referenced separately complete PEP specification. tablesshould be read Standard processing action taken ultimate recipient not understanding ignoring extension section Extended processing action taken ultimate recipient understanding obeying extension section Forward extension action taken intermediate party not ultimate recipient section Strip extension action taken intermediate party ultimate recipient section Not Fulfilled) response ultimate recipient not understanding not wishing obey extension section Implemented) response ultimate recipient not understanding method method token prefix section Table Origin Server Scope Hop-by-hop End-to-end Strength Optional Required Optional Required PEP not supported Standard processing Implemented) Standard processing Implemented) Extension not supported Standard processing Not Fulfilled) Standard processing Not Fulfilled) Extension supported Extended processing Extended processing Extended processing Extended processing Table Proxy Server Scope Hop-by-hop End-to-end Strength Optional Required Optional Required PEP not supported Strip extension Implemented) Forward extension Implemented) Extension not supported Strip extension Not Fulfilled) Forward extension Forward extension Extension supported Extended processing strip Extended processing strip Extended processing strip Extended processing strip Examples following examples show various scenarios using PEP HTTP/1.1 requestsand responses. Information not essential illustrating examples isleft Client Queries Server DAV example, purpose using PEP request determinewhether server supports Distributed Authoring andVersioning protocol extension making request binding client forces server process extension declarationand obey extension report error. PEP-GET HTTP/1.1 Host: some.host PEP: HTTP/1.1 PEP-Info: response shows server understand DAV clientcan use resources matching prefix thatserver. policy informational other factors access controlmay prevent client actually using DAV resources. PEP not distinguish querying using extension PEP declaration identical. fact query dependon request method name request modifiers. Client Informs Server ZipFlate Compression Extension example shows client informing server capable handlingthe zipflate compression extension response. issuing extensionpolicy instead extension declaration, client theextension not used request. GET HTTP/1.1 Host: some.host PEP-Info: HTTP/1.1 PEP: Cache-Control: no-transform Vary: response shows server extension useit response. furthermore no-transformcache-control directive order avoid proxies add theirown content-coding message section header field indicating cache not use responseto reply subsequent request revalidation. example, client have used extension declaration strength"may" instead extension policy achieve same effect. requestwould not have been affected compression message bodiesand not headers. request were include message body, however,the difference be zipflate extension was applied thatbody not. Server Content-Digest Extension example shows server applying Content-Digest extension responsemessage indicating client ignore client not indicatedwhether supports extension even supports PEP. GET HTTP/1.1 Host: some.host HTTP/1.1 PEP: 4-Content-Digest: Cache-Control: max-age=3600 response fully cachable not require revalidation replyingto subsequent requests. Server Client use Payment Extension last example shows server client use micro-paymentextension order access resource causing additional roundtrip usingthe Not Fulfilled) status code section first requestdoes not contain PEP constructs leading error message. non-PEPcompliant client treat Request) status code willnot be able fulfill server's requirement second request section GET HTTP/1.1 Host: some.host Policy Not Fulfilled PEP-Info: PEP-GET HTTP/1.1 Host: some.host PEP: 12-Price: HTTP/1.1 actual price passed extra parameter extension policy.The client price issues new request containing properextension declaration. did not agree price, havetried lower price depending policy resource, servermay have responded positively. Copyright W3C(MIT,INRIA,Keio Rights Reserved. W3Cliability,trademark,documentuse andsoftwarelicensing rules apply. 