Device APIs Requirements Device APIs Requirements W3C Working Group Note October Version: http://www.w3.org/TR/2009/NOTE-dap-api-reqs-20091015/ Latest Published Version: http://www.w3.org/TR/dap-api-reqs/ Latest Editor's Draft: http://dev.w3.org/2009/dap/api-reqs/ Previous version: none Editors: Robin Berjon, Vodafone Daniel Coloma, TelefÃ³nica EspaÃ±a Max Froumentin, Opera Marcin Hanclik, Access Jere KÃ¤pyaho, Nokia ì?´ê°•ì°¬ Lee), ETRI Bryan Sullivan, AT&T Dzung Tran, Intel Copyright Â© W3CÂ® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract are requirements intended be met development client-side APIs enable creation Web Applications Web Widgets interact devices services such Calendar, Contacts, Camera, etc. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. document was published Device APIs Policy Working Group Working Group Note. wish make comments regarding document, please send public-device-apis@w3.org archives). feedback welcome. first publication document current vision Working Group APIs plans develop. are open issues listed body document feedback be particularly appreciated. group plans update document issues get resolved. Publication Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Global Requirements Application Configuration Application Launcher Calendar May be considered future versions Camera Communications Log Contacts File System Gallery Messaging System Information Events Tasks User Interface A. Acknowledgements B. References B.1 Normative references B.2 Informative references Introduction section non-normative. requirements document are produced high-level, functionally oriented fashion order provide sufficient ground build going full landscape analysis process given APIs being produced concern domains industry experience already solid. document not currently considered be complete, rather snapshot DAP WG's thinking time publication. Global Requirements requirements apply APIs produced DAP WG. APIs be made available consistent fashion, hanging single access point; methods take long time complete support asynchronous, cancellable operation. APIs be made available navigator, navigator.device, straight window.device? Application Configuration Due overlapping Widgets: widget Interface Web Storage deliverable been dropped. Application Launcher following requirements have been expressed. User Agent provide means non-web applications register handlers media types URI schemes. be scope API.) be possible launch application media type protocol handler be possible pass arguments launched application. be possible launch application asynchronously. be possible launch application synchronously. applications run synchronously, be possible catch output streams etc.). following requirements, be considered be functionally part API, are already addressed part HTML5 Custom scheme content handlers: interface enable applications register handlers specific protocol. User Agent provide default handlers specific protocol. interface enable applications register handlers specific media type. User Agent provide default handlers specific media type. Calendar interface: enable listing multiple available calendars; expose basic properties calendars such default time zone, name, etc.; enable creating, deleting, updating calendars; enable creating, deleting, updating, finding calendar events; expose calendar event properties mapping iCalendar properties values. support only VEVENT. However Andrew McMillan makes following point: differences VEVENT VTODO are trivial comparison complexity common elements, VJOURNAL entirely subset there very little gain removing VTODO VJOURNAL specification. Removal restrict clients implementing potentially useful functionality. other supporting components specification VALARM VTIMEZONE seem so essential reasonable implementation VEVENT don't even merit discussion." May be considered future versions iCalendar parsing serialision; hCalendar parsing serialision; calendar diffs; direct CalDAV access. Camera interface: enable capture static images; enable capture videos; enable listing available cameras; enable listing available formats codecs, camera; enable retrieval captured content; provide metadata captured content width, height, format, duration); enable choosing preferred aspects captured content width, height, format, frame rate); enable displaying viewfinder; support asynchronous, cancellable capture; enable displaying viewfinder part document video element enable control camera's capabilities zoom, luminosity, night mode, focus mode). Given support capturing video, need take sound capture account. Once supported, there reason not support capturing sound own? go there, Capture API, ability list mikes? user requests given capture size available, do refuse do fall back? latter likely) algorithm used find fallback? be request 1000x50): camera's preferred default 500x100 number pixels) 1000x700 longest side) 2000x100 ratio) very easily get bogged down specifying camera capabilities format feature variants â€” do decide ones are reasonably Communications Log interface: be able provide list incoming outgoing communication events; be able search events type phone, SMS...) well content; be able expose relevant metadata events end time, etc.). Contacts interface: enable listing available address books device; enable listing contacts address book(s); enable reading details contact; enable creating new contact; enable updating contact; enable deleting contact; enable filtering list contacts search subset. Are there convincing use cases supporting multiple address books v1 opposed just default maybe exposing more later)? Do need support groups v1? File System interface: integrate W3C File API enable listing items directory; enable creating file directory; enable deleting file directory; enable writing file; enable appending file; enable getting metadata file size, creation update time, media type); enable setting metadata file; enable copying files directories; enable moving files directories; handle text encoding conversion reading writing file least UTF-8 UTF-16 LE/BE); support binary access file content; enable navigating directory tree; reflect file system paths using normalised separator consistent encoding; provide conversion paths file: URLs; support reading writing Base64 using data: URLs); support reading lines text document; support events detecting mounting/unmounting file system detect memory card being plugged support listing available file systems; provide access temporary storage location form directory); provide file system metadata size, available space, quota). Gallery interface: enable listing available gallery sources, names types; enable finding content gallery; enable adding, updating, removing content gallery; expose metadata gallery's content items author, media-dependent information, etc.). Exposing metadata tricky, often giving choice creating endless ontology building open-ended system guarantees interoperability. lot functionality be provided Gallery API basically way accessing well-known parts file system, File System API way exposing sufficient metadata. make very simple API. Messaging interface: support messages several formats transports supported platform SMS, MMS...); allow creating sending messages; support multiple accounts transport/format type; support setting various envelope fields corresponding message type SMS...); support attaching files format System Information Events interface: enable listing available power sources wall...); expose device running battery not; expose charge level battery globally; enable listing available network interfaces, types 3G, LAN...), signal strengths; list available network interface are active, provide events be informed status; provide CPU information; provide CPU load information; enable listing storage areas, types, writability, available space; provide RAM information; provide RAM load information; enable listing displays, well colour depth, resolution, etc.; enable listing input devices keyboard, touch, keypad, voice, stylus...); enable listing audio output devices properties; enable listing audio input devices properties; enable listing video capture devices properties; enable listing picture capture devices properties; enable listing thermal sensors, names measurements; enable listing ambient light sensors, names measurements; enable listing proximity detectors, names measurements; expose gyroscope accelerometer capability measurements; enable listing vibration capability; expose availability compass geolocation capability. system information sensors â€” be separate? have system information universal sensor API? do get interoperability Tasks interface: enable listing multiple available task lists expose basic properties projects such default name, priority, etc.; enable creating, deleting, updating projects; enable creating, deleting, updating, finding tasks; expose task properties mapping iCalendar properties values See issues are part Calendar API. User Interface interface: support beeping; support vibrating; support manipulating backlight(s); enable creation, deletion, update native application menus, arbitrary depth levels, callbacks. A. Acknowledgements editors extend special thanks Nokia, OMTP BONDI, PhoneGap providing foundation working group's requirements discussion. B. References B.1 Normative references Robin Berjon. File Upload. October W3C Working Draft. progress.) URL: http://www.w3.org/TR/2006/WD-file-upload-20061018 B. Desruisseaux. Internet Calendaring Scheduling Core Object Specification September Internet RFC URL: http://www.rfc-editor.org/rfc/rfc5545.txt B.2 Informative references Ian Hickson; David Hyatt. HTML April W3C Working Draft. progress.) URL: http://www.w3.org/TR/2009/WD-html5-20090423/ Ian Hickson. Web Storage. September W3C Working Draft. progress.) URL: http://www.w3.org/TR/2009/WD-webstorage-20090910/ Marcos Caceres; Robin Berjon; Arve Bersvendsen. Widgets APIs Events. August W3C Working Draft. progress.) URL: http://www.w3.org/TR/2009/WD-widgets-apis-20090818/ 