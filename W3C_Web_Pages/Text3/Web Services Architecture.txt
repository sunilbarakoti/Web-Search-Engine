Web Services Architecture Web Services Architecture W3C Working Group Note February version: http://www.w3.org/TR/2004/NOTE-ws-arch-20040211/ Latest version: http://www.w3.org/TR/ws-arch/ Previous version: http://www.w3.org/TR/2003/WD-ws-arch-20030808/ Editors: David Booth, W3C Fellow Hewlett-Packard Hugo Haas, W3C Francis McCabe, Fujitsu Labs America Eric Newcomer October Iona Michael Champion March Software AG Chris Ferris March IBM David Orchard March BEA Systems document also available non-normative formats: PostScript version PDF version. Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark, document use software licensing rules apply. Abstract document Web Services Architecture. functional components relationships components effect desired properties overall architecture. Status Document section status document timeof publication. Other documents supersede document. Alist current W3C publications latest revision thistechnical report be found W3C technical reports index athttp://www.w3.org/TR/. public Working Group Note produced W3C Web Services Architecture Working Group, part W3C Web Services Activity. publication Working Group Note withthe end Working Group's charter period, andrepresents culmination group's work. Discussion document invited public mailing list www-ws-arch@w3.org archives). list remaining open issues included Conclusions. Patent disclosures relevant specification be found Working Group's patent disclosure page. Publication Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. Other documents supersede document. Table Contents Introduction Purpose Web Service Architecture Intended Audience Document Organization Web service? Agents Services Requesters Providers Service Description Semantics Overview Engaging Web Service Related Documents Concepts Relationships Introduction read section Concepts Relationships Concept Maps Model Conformance Architectural Models Message Oriented Model Address Delivery Policy Message Message Body Message Correlation Message Envelope Message Exchange Pattern Message Header Message Receiver Message Reliability Message Sender Message Sequence Message Transport Service Oriented Model Action Agent Choreography Capability Goal State Provider Agent Provider Entity Requester Agent Requester Entity Service Service Description Service Interface Service Intermediary Service Role Service Semantics Service Task Resource Oriented Model Discovery Discovery Service Identifier Representation Resource Resource description Policy Model Audit Guard Domain Obligation Permission Permission Guard Person Organization Policy Policy Description Policy Guard Relationships relationship Definition Relationships other elements Explanation relationship Definition Relationships other elements Explanation relationship Definition Relationships other elements Explanation relationship Definition Relationships other elements Explanation realized relationship Definition Relationships other elements Explanation Stakeholder's Perspectives Service Oriented Architecture Distributed Systems Web Services Architectural Styles Relationship World Wide Web REST Architectures Web Services Technologies XML SOAP WSDL Using Web Services Web Service Discovery Manual Versus Autonomous Discovery Discovery: Registry, Index Peer-to-Peer? Registry Approach Index Approach Peer-to-Peer Discovery Discovery Service Trade-Offs Federated Discovery Services Functional Descriptions Discovery Web Service Semantics Message semantics visibility Semantics Architectural Models Role Metadata Web Services Security Security policies Message Level Security Threats Message Alteration Confidentiality Man-in-the-middle Spoofing Denial Service Replay Attacks Web Services Security Requirements Authentication Mechanisms Authorization Data Integrity Data Confidentiality Integrity Transactions Communications Non-Repudiation End-to-End Integrity Confidentiality Messages Audit Distributed Enforcement Security Policies Security Consideration Architecture Cross-Domain Identities Distributed Policies Trust Policies Secure Discovery Mechanism Trust Discovery Secure Messaging Privacy Considerations Peer-to-Peer Interaction Web Services Reliability Message reliability Service reliability Reliability management Web Service Management Web Services EDI: Transaction Tracking Something Wrong Need Tracking Examples Tracking Requirements Effective Tracking Tracking URIs Conclusions Requirements Analysis Value Work Significant Unresolved Issues Appendices Overview Web Services Specifications B Overview Web Services Security Technologies B.1 XML-Signature XML-Encryption B.2 Web Services Security B.3 XML Key Management Specification B.4 Security Assertion Markup Language B.5 XACML: Communicating Policy Information B.6 Identity Federation C References D Acknowledgments Introduction Purpose Web Service Architecture Web services provide standard means interoperating different software applications, running variety platforms frameworks. document intended provide common definition Web service, define place larger Web services framework guide community. WSA conceptual model context understanding Web services relationships components model. architecture not attempt specify Web services are implemented, restriction Web services be combined. WSA minimal characteristics are common Web services, number characteristics are needed many, not Web services. Web services architecture interoperability architecture: global elements global Web services network are required order ensure interoperability Web services. Intended Audience document intended diverse audience. Expected readers include Web service specification authors, creators Web service software, people making decisions Web service technologies, others. Document Organization document main sections: core concepts section Concepts Relationships stakeholder's perspectives section Stakeholder's Perspectives). Concepts Relationships bulk conceptual model conformance constraints be based. example, resource concept states resources have identifiers fact have URIs). Using assertion basis, assess conformance architecture particular resource looking identifier. given instance architecture, resource identifier, then not valid instance architecture. concepts relationships represent enumeration architecture, stakeholders' perspectives approaches different viewpoint: architecture goals requirements. section elucidate more global properties architecture demonstrate concepts actually achieve important objectives. primary goal Stakeholder's Perspectives section provide top-down view architecture various perspectives. example, Web Services Security section show security Web services addressed architecture. aim here demonstrate Web services be made secure indicate key concepts features architecture achieve goal. key stakeholder's perspectives supported document reflect major goals architecture interopability, extensibility, security, Web integration, implementation manageability. Web service? purpose Working Group architecture, prejudice other definitions, use following definition: Web service software system designed support interoperable machine-to-machine interaction network. interface described machine-processable format WSDL). Other systems interact Web service manner prescribed description using SOAP messages, typically conveyed using HTTP XML serialization conjunction other Web-related standards.] Agents Services Web service abstract notion be implemented concrete agent. Figure agent concrete piece software hardware messages, service resource characterized abstract set functionality provided. illustrate distinction, implement particular Web service using agent day written programming language), different agent day written different programming language) same functionality. agent have changed, Web service remains same. Requesters Providers purpose Web service provide functionality behalf owner person organization, such business individual. provider entity person organization appropriate agent implement particular service. Figure Basic Architectural Roles.) requester entity person organization wishes make use provider entity's Web service. use requester agent exchange messages provider entity's provider agent. most cases, requester agent initiate message exchange, not always. Nonetheless, consistency still use term agent" agent provider agent, even cases provider agent actually exchange.) Note: word terminology: Many documents use term service provider refer provider entity provider agent. Similarly, use term service requester refer requester entity requester agent. However, terms are ambiguous sometimes referring agent sometimes person organization agent document terms requester entity, provider entity, requester agent provider agent. order message exchange be successful, requester entity provider entity first agree semantics mechanics message exchange. slight simplification be explained further Using Web Services.) Service Description mechanics message exchange are documented Web service description Figure WSD machine-processable specification Web service's interface, written WSDL. message formats, datatypes, transport protocols, transport serialization formats be used requester agent provider agent. also more network locations provider agent be invoked, provide information message exchange pattern expected. essence, service description agreement governing mechanics interacting service. slight simplification be explained further Using Web Services.) Semantics semantics Web service shared expectation behavior service, particular response messages are sent effect, requester entity provider entity regarding purpose consequences interaction. contract overall agreement requester entity provider entity respective agents interact, not necessarily written explicitly negotiated. be explicit implicit, oral written, machine processable human oriented, be legal agreement informal agreement. again slight simplification be explained further Using Web Services.) service description contract governing mechanics interacting particular service, semantics contract governing meaning purpose interaction. dividing line not necessarily rigid. more semantically rich languages are used describe mechanics interaction, more essential information migrate informal semantics service description. migration more work required achieve successful interaction be automated. Overview Engaging Web Service are many ways requester entity engage use Web service. general, following broad steps are required, illustrated Figure requester provider entities become known other least know other); requester provider entities somehow agree service description semantics govern interaction requester provider agents; service description semantics are realized requester provider agents; requester provider agents exchange messages, thus performing task behalf requester provider entities. exchange messages provider agent concrete manifestation interacting provider entity's Web service.) steps are explained more detail Web Service Discovery. steps be automated, others be performed manually. Figure General Process Engaging Web Service Related Documents Working Group produced following companion documents process defining architecture: Requirements Document Reqs] UsageScenarios Glossary Glossary] OWLOntology Concepts Relationships Introduction formal core architecture enumeration concepts relationships are central Web services' interoperability. read section architecture described terms few simple elements: concepts, relationships models. Concepts are often noun-like identify things properties expect see realizations architecture, similarly relationships are normally linguistically verbs. large-scale effort, often necessary structure architecture do larger-scale meta-concept model. model coherent portion architecture particular theme aspect architecture. Concepts concept expected have correspondence realizations architecture. example, message concept class object be confused Objects Classes are found Object Oriented Programming languages) expect be able identify Web services context. precise form message be different different realizations, message concept look given concrete system rather prescribing precise form. Not concepts have realization terms data objects structures occurring computers communications devices; example person organization people human organizations. Other concepts are more abstract still; example, message reliability property message transport service property be touched nonetheless important Web services. concept presented regular, stylized way consisting short definition, enumeration relationships other concepts, slightly longer explanatory description. example, concept agent relating concepts fact agent computational resource, identifier owner. description part agent more detail agents are important archicture. Relationships Relationships denote associations concepts. Grammatically, relationships are verbs; more accurately, predicates. statement relationship typically form: concept predicate concept. example, agent, state agent computational resource statement makes assertion, case nature agents. Many such statements are descriptive, others are definitive: message message sender Such statement makes assertion valid instances architecture: expect be able identify message sender realization architecture. Conversely, system identify sender message not conformant architecture. Even service used anonymously, sender identifier not possible associate identifier actual person organization. Concept Maps Many concepts architecture are illustrated concept maps. concept map informal, graphical way illustrate key concepts relationships. example diagram: Figure Concept Map shows concepts are related various ways. box concept, arrow labeled arc) relationship. merit concept map rapid navigation key concepts relate other. be stressed however diagrams are primarily navigational aids; written text definitive source. Model model coherent subset architecture typically particular aspect overall architecture. different models share concepts, usually different points view; major role model explain encapsulate significant theme overall Web services architecture. example, Message Oriented Model Web services strictly message passing perspective. particular, not attempt relate messages services provided. Service Oriented Model, however, top Message Oriented Model order explain fundamental concepts involved service effect explain purpose messages Message Oriented Model. model described separately terms concepts relationships inherent model. ordering concepts model section alphabetical; not be understood imply relative importance. more focused viewpoint reader directed Stakeholder's perspectives section architecture perspective key stakeholders architecture. reason choosing alphabetical ordering there large amount cross-referencing concepts. result, very difficult, not misleading, choose non-alphabetic ordering sense priority concepts. Furthermore, optimal ordering very much point view reader. Hence, devote Stakeholders perspectives section number prioriterized readings architecture. Conformance language specifications, protocol specifications, conformance architecture necessarily somewhat imprecise art. However, presence concept enumeration strong hint realization architecture, there be corresponding feature implementation. Furthermore, relationship identified here, then there be corresponding relationships realized architecture. consequence non-conformance likely be reduced interoperability: absence such concrete feature not prevent interoperability, likely make such interoperability more difficult. primary function Architecture's enumeration terms models, concepts relationships give guidance conformance architecture. example, architecture notes message message sender; realization architecture not permit message be associated sender not conformance architecture. example, SMTP be used transmit messages. However, SMTP present) forgery sender's identity, SMTP not sufficient discharge responsibility. Architectural Models architecture models, illustrated Figure model Figure labeled be viewed key concept model. Figure Meta Model Architecture models are: Message Oriented Model messages, message structure, message transport so particular reference reasons messages, significance. Figure Simplified Message Oriented Model essence message model few key concepts illustrated agent messages, structure message terms message headers bodies mechanisms used deliver messages. course, there are additional details consider: role policies govern message level model. abridged diagram shows key concepts; detailed diagram expands include many more concepts relationships. Service Oriented Model aspects service, action so clearly, distributed system, services be adequately realized means messaging, converse not case: messages do not need relate services. Figure Simplified Service Oriented Model Service Oriented Model most complex models architecture. However, too few key ideas. service realized agent used agent. Services are mediated means messages exchanged requester agents provider agents. very important aspect services relationship real world: services are mostly deployed offer functionality real world. model elaborating concept service's owner person organization, real world responsibility service. Finally, Service Oriented Model makes use meta-data, described Service Oriented Architecture, key property Service Oriented Architectures. meta-data used document many aspects services: details interface transport binding semantics service policy restrictions there be service. Providing rich descriptions key successful deployment use services Internet. Resource Oriented Model resources exist have owners. Figure Simplified Resource Oriented Model resource model adopted Web Architecture concept resource. expand incorporate relationships resources owners. Policy Model constraints behavior agents services. generalize resources policies apply equally documents descriptions services) well active computational resources. Figure Simplified Policy Model Policies are resources. are applied agents attempt access resources, are put place, established, people have responsibility resource. Policies be enacted represent security concerns, quality service concerns, management concerns application concerns. Message Oriented Model Message Oriented Model aspects architecture relate messages processing Specifically, model, are not concerned semantic significance content message relationship other messages. However, MOM focus structure messages, relationship message senders receivers messages are transmitted. MOM illustrated Figure Figure Message Oriented Model Address Definition address information required message transport mechanism order deliver message appropriately. Relationships other elements address information used describe deliver messages. address be URI. address typically transport mechanism specific. address be contained message envelope. Explanation order message transport mechanisms function, normally necessary provide information messages be delivered. called address message receiver. Typically, form address information depend particular message transport. case HTTP message transport, address information take form URL. precise method message sender uses convey address information also depend transport mechanism used. occasion, address information be provided additional arguments invoking procedure. address information be located message typically message envelope. Delivery Policy Definition delivery policy policy methods messages are delivered message transport. Relationships other elements Delivery policy policy Delivery policy message transport Delivery policy be expressed policy description language Delivery policy express quality service associated delivering message message transport mechanism Explanation Delivery policies are policies relate delivery messages. Typically, delivery policy combination particular message particular message transport mechanism. policies apply, however, originate descriptions message be intrinsic transport mechanism, Examples delivery policies include quality service assurances such reliable best effort message delivery security assurances such encrypted unencrypted message transport. kind delivery policy take form assertions recording audit message was delivered. Message Definition message basic unit data sent Web services agent context Web services. Relationships other elements message unit data sent agent message be part message sequence message be described using service description language message message sender message more message recipients message have identifier message message body message more message headers message message envelope message delivered message transport system message have delivery policy associated Explanation message data structure passed sender recipients. structure message defined service description. main parts message are envelope, set more headers, message body. envelope encapsulate component parts message well-known location message transport services locate necessary addressing information. header ancillary information message facilitates modular processing. body message message content URIs actual data resource. message be simple HTTP GET request, HTTP headers are headers parameters encoded URL are content. Note extended Web services functionality architecture not supported HTTP headers. message also simply be plain XML document. However, such messages do not support extended Web services functionality defined architecture. message be SOAP XML, SOAP headers are headers. Extended Web services functionality are supported SOAP headers. Message Body Definition message body structure primary application-specific content message sender deliver message recipient. Relationships other elements message body contained message envelope. message body application-specific content intended message recipient. Explanation message body mechanism transmitting information recipient message. form message body, other constraints body, be expressed part service description. many cases, precise interpretation message body depend message headers are message. Message Correlation Definition Message correlation association message context. Message correlation requester agent match reply request, especially multiple replies be possible. Relationships other elements Message Correlation means associating message specific conversational context. Message correlation be realized including message identifiers enable messages be identified. Explanation Message correlation message be associated particular purpose context. conversation, important be able determine actual message been received expected message. Often implicit conversations are relayed stream-oriented message transports; not transports allow correlation be established so implicitly. situations correlation be handled explicitly, technique associate message identifier messages. message identifier identifier received message be correlated originating request. sender also add identifier service, not necessarily originating sender, be recipient message asynchronous messaging). Correlation also be realized underlying protocol. example, HTTP/1.1 correlate request response. Message Envelope Definition message envelope structure component parts message: message body message headers. Relationships other elements message envelope contain address information intended recipients associated message message envelope message body. message envelope message headers. Explanation Issue message associated destination address? unresolved issue here. message somehow be associated destination address. combination message destination address be significant architectural concept, yet SOAP not require address be included message header. Resolution: None recorded. message envelope contain information needed actually deliver messages. so, least contain sufficient address information so message transport deliver message. Typically information part service binding information found WSDL document. Other metadata be present envelope security information allow message be authenticated quality service information. correctly design message transport mechanism be able deliver message based purely information envelope. example, encrypted message fully identities sender, recipient well message content, still be delivered using only address information encrypted data stream Message Exchange Pattern Definition Message Exchanage Pattern template, devoid application semantics, generic pattern exchange messages agents. relationships temporal, causal, sequential, etc.) multiple messages exchanged conformance pattern, well normal abnormal termination message exchange conforming pattern. Relationships other elements message exchange pattern generic pattern exchange messages agents. message exchange pattern have unique identifier message exchange pattern realize message correlation message exchange pattern describe service invocation Explanation Distributed applications Web services architecture communicate message exchanges. message exchanges are logically factored patterns be composed different levels form larger patterns. Message Exchange Pattern template, devoid application semantics, generic pattern exchange messages agents. patterns be described state machines define flow messages, including handling faults arise, correlation messages. Issue difference MEP Choreography? precise difference MEP choreography unresolved. view MEPs being atomic patterns, choreography including composition patterns. Also, choreography generally patterns include application semantics = MEPs application semantics), MEP devoid application semantics. Finally, there usually difference scale MEP choregraphy: choreography often makes use MEPs building blocks. Resolution: None recorded. Messages are instances MEP are correlated, explicitly implicitly. exchanges be synchronous asynchronous. order promote interoperability, useful define common MEPs are broadly adopted unambiguously identified. MEP described purpose interoperability, be associated URI identify MEP. protocols natively support certain MEPs, e.g., HTTP natively supports request-response. other cases there be additional glue needed map MEPs protocol. Web service description languages level WSDL view MEPs perspective particular service actor. simple request-reponse MEP, example, incoming message operation associated outgoing message reply. MEP not necessarily limited capturing only inputs outputs single service. Consider pattern: agent uses instance MEP request-response) communicate initially B. agent B then uses separate, related instance MEP communicate C. agent uses instance MEP communicate C reply only C processed example makes clear overall pattern be described terms inputs outputs single interaction. pattern constraints relationships messages various MEP instances. also fact exchange in-out MEP perspective actor B, mirrored out-in MEP perspective actor A. Finally, actual application instantiates communication pattern picture adding computation B C carry application-specific operations. instructive consider kinds fault reporting occur such layering. Consider fault transport protocol level. transport level be able manage certain faults re-tries), also simply report fault binding level. Similarly binding level manage fault re-initiating underlying protocol) report SOAP fault. choreography application layers be intertwined separated depending are architected. also rigid distinction choreography binding layers; binding-level MEPs are essentially simple choreographies. Conceptually, choreographic level enforce constraints message order, maintain state consistency, communicate choreographic faults application, etc. ways transcend particular bindings transports. Message Header Definition message header part message information specific aspect message. Relationships other elements message header contained message envelope message header be specific well known types Editorial note relationship here used differentway elsewhere document. message header identify service role, kind processing expected header. message header be processed independently message body Explanation Message headers represent information messages independently standardized WS-Security) have separate semantics message body. example, there be standard forms message header describe authentication messages. form such headers defined messages; course, given authentication header be specific particular message. primary function headers facilitate modular processing message, also be used support routing related aspects message processing. header part message include information pertinent extended Web services functionality, such security, transaction context, orchestration information, message routing information, management information. Message headers be processed independently message body, message header have identifying service role kind processing be performed messages header. message have several headers, potentially identifying different service role. many headers relate infrastructure facilities, such security, routing, load balancing so also possible headers be application specific. example, purchase order processing Web service be structured layers; corresponding different functions organization. stakeholders process headers different messages standardized ways: customer information be captured standardized header, stock items different standardized header so Message Receiver Definition message receiver agent message. Relationships other elements message receiver agent message receiver recipient message Explanation message receiver agent intended receive message message sender. Messages be passed intermediaries process aspects message, typically examining message headers. message recipient not be aware processing such intermediaries. Often specific message receiver, ultimate recipient, identified final recipient message. ultimate recipient be responsible completing processing message. Message Reliability Definition Message reliability degree certainty message be delivered sender receiver have same understanding delivery status. Relationships other elements message reliability property message delivery. message reliability be realized combination message acknowledgement correlation. message reliability be realized transport mechanism Explanation goal reliable messaging reduce error frequency messaging provide sufficient information status message delivery. Such information participating agent make compensating decision errors less desired results occur. High level correlation such commit" needed more agents are involved. Note distributed system, theoretically not possible guarantee correct notification delivery; however, practice, simple techniques greatly increase overall confidence message delivery. important note guarantee delivery messages alone not improve overall reliability Web service due need end-to-end reliability. Arguments System Design".) however, reduce overall cost Web service. Message reliability be realized combination message receipt acknowledgement correlation. event message not been properly received acted sender attempt resend, other compensating action application level. Message Sender Definition message sender agent message. Relationships other elements message sender agent message sender originator message Explanation message sender agent message agent. message sender, identity sender not be available others case anonymous interactions. Messages also be passed intermediaries process aspects message; typically examining message headers. sending agent not be aware such intermediaries. Message Sequence Definition message sequence sequence related messages. Relationships other elements message sequence sequence related messages message sequence realize documented message exchange pattern Explanation requester agent provider agent exchange number messages interaction. ordered set messages exchanged message sequence. sequence be realizing well-defined MEP, usually identified URI. Message Transport Definition Message Transport mechanism be used agents deliver messages. Relationships other elements message transport mechanism messages message transport more capabilities message transport constrained various delivery policies message transport know sufficient address information order deliver message. Explanation message transport actual mechanism used deliver messages. Examples message transport include HTTP TCP, SMTP, message oriented middleware, so responsibility message transport deliver message sender more recipient, i.e. transport SOAP Infoset agent possibly implied semantics HTTP methods semantics). Message transports provide different features message integrity, quality service guaranties, etc.). message transport function, sending agent provide address recipient. Service Oriented Model Service Oriented Model aspects architecture relate service action. primary purpose SOM explicate relationships agent services requests. SOM builds MOM, focus action rather message. concepts relationships SOM are illustrated Figure Figure Service Oriented Model Action Definition action, purposes architecture, action be performed agent, possibly result receiving message, results sending message observable state change. Relationships other elements action result desired goal state action be sending message action be processing received message Explanation core concept service notion party performing action(s) behest party. perspective requester provider agents, action typically performed executing fragment program. WSA, actions performed requester provider agents are largely scope, so far are result messages being sent received. effect, programs are executed agents are not scope architecture, however resulting messages are scope. Agent Definition agent program acting behalf person organization. definition specialization definition Arch]. notion software agent Arch].) Relationships other elements agent computational resource agent owner person organization agent realize more services agent request more services Explanation Agents are programs engage actions behalf someone something else. purposes, agents realize request Web services. effect, software agents are running programs drive Web services implement access Software agents are also proxies entities own important many services involve use resources also have owners definite interest disposition. example, services involve transfer money incurring legal obligations result. specifically avoid attempt govern implementation agents; are only concerned ensuring interopability systems. Choreography Definition choreography sequence conditions multiple cooperating independent agents exchange messages order perform task achieve goal state. Editorial note different level abstraction definition used W3C Web Services Choreography Working Group. Relationships other elements choreography uses more service interfaces choreography pattern possible interactions set agents choreography be expressed choreography description language choreography pertains given task choreography relationship exchanged messages tasks service. Explanation choreography model sequence operations, states, conditions control interactions involved participating services. interaction prescribed choreography results completion useful function. Examples include placement order, information delivery eventual payment, putting system well-defined error state. choreography be distinguished orchestration. orchestration sequence conditions Web service other Web services order realize useful function. choreography be described using choreography description language. choreography description language permits description Web services be composed, service roles associations Web services be established, state, composed services be managed. Capability Definition capability named piece functionality feature) declared supported requested agent. Relationships other elements capability identifier URI capability description semantics capability be advertised agent supports capability be required agent wishes use capability be referenced service description Explanation Agents participating exchange implement wide variety features. example, there be different ways achieve reliable delivery message, there be several mechanisms available support security. Web service advertise supports particular capability, agent requiring capability select service basis. Web service indicate particular capability requester agent uses requester agent select avoid basis. also be negotiation manual automatic capabilities select. concept capability SOAP features, broader. Goal State Definition goal state state service resource desireable person organization's point view. Relationships other elements goal state state real world, state relevant resources goal state desired person organization interest defining goal state be characterized informally, formally formal expression. Explanation Goal states are associated tasks. Tasks are unit action associated services have measurable meaning. Typically measured perspective owner service, goal state characterized predicate true state example, book selling service have goal state book been purchased legitimate customer. difficult be formal vague properties such desireable, however, also clear services are deployed used intention. e-commerce service oriented buying selling, stock ticker service oriented giving timely information. goal state simply way being able declare success task completed sucessfully. Provider Agent Definition provider agent agent capable empowered perform actions associated service behalf owner provider entity. Relationships other elements provider agent Web service software agent provider agent more services provider agent causes perform actions associated task provider agent acts behalf provider entity Explanation provider agent software agent Web service performing tasks behalf owner provider entity. given service be offered more agent, especially case composite services, given provider agent realize more Web service. Provider Entity Definition provider entity person organization providing Web service. Relationships other elements provider entity person organization provider entity offers Web service provider entity provider agent Explanation provider entity person organization offering Web service. provider agent acts behalf provider entity Requester Agent Definition requester agent software agent wishes interact provider agent order request task be performed behalf owner requester entity. Relationships other elements requester agent agent requester agent uses service requester agent acts behalf requester entity Explanation requester agent software agent certain function be performed behalf owner requester entity. architectural perspective, agent looking invoking initiating interaction provider agent. Requester Entity Definition requester entity person organization wishes use provider entity's Web service. Relationships other elements requester entity person organization requester entity requester agent Explanation requester entity person organization wishes make use Web service. requester entity counterpart provider entity. Service Definition service abstract resource capability performing tasks coherent functionality point view provider entities requester entities. be used, service be realized concrete provider agent. Relationships other elements service resource service more tasks service service description service service interface service service semantics service identifier service service semantics service more service roles relation service's owner service have more policies applied service owned person organization. service provided person organization. service realized provider agent. service used requester agent. Explanation service abstract resource person organization collection related tasks having specific service roles. service be realized more provider agents act behalf person organization provider entity. critical distinction Web service, compared other Web resources, Web services do not necessarily have representation; however, are associated actions. Issue be representation returned HTTP Web service URI? be representation Web service? service description be available service URI? Resolution: None recorded. Web service be compliant architecture there be sufficient service descriptions associated service enable use other parties. Ideally, service description give sufficient information so automatic agent not only use service also decide service appropriate; turn description semantics service. distinguish number things relation service: service owner; service be realized provider agent; requester agent interact provider agent; provider agent owner provider entity). Web services are inherently computer-to-computer interactions requester provider agents; yet are also ultimately deployed human service requester provider agents act behalf owners. Web services are focused actions. convenient, purposes characterizing semantics, capture terms tasks. semantics computational system bound behavior system: intended semantics bound desired behavior. Tasks combine concept action intention: i.e., Web services are conventionally invoked given purpose mind. purpose be expressed intended goal state: such book being delivered temperature reading being taken. requirement there be one-to-one correspondence messages services. given message be processed more service, especially situation there are service intermediaries, given service course, process more kind message. formalize asserting service more service roles. service role intended role determined owner service. given role characterized aspects messages concerned Service Description Definition service description set documents describe interface semantics service. Relationships other elements service description machine-processable description service service description machine-processable description service's interface service description machine-processable description messages are exchanged service service description include description service's semantics service description expressed service description language Explanation service description details interface potentially, expected behavior service. data types, operations, transport protocol information, address. also include categorization other metadata facilitate discovery utilization. complete description be realized set XML description documents. are many potential uses service descriptions: be used facilitate construction deployment services, be used people locate appropriate services, be used requester agents automatically discover appropriate provider agents case requester agents are able make suitable choices. Service Interface Definition service interface abstract boundary service types messages message exchange patterns are involved interacting service, together conditions implied messages. Relationships other elements service interface messages relevant service Explanation service interface different types messages service message exchange patterns be used. Service Intermediary Definition service intermediary Web service main role transform messages value-added way. messaging point view, intermediary processes messages route agent Specifically, say service intermediary service outgoing messages are equivalent incoming messages application-defined sense. Relationships other elements service intermediary service. service intermediary specific service role. service intermediary semantics messages Explanation service intermediary specific kind service typically acts kind filter messages Normally, intermediaries do not consume messages rather forward other services. course, intermediaries do often modify messages essence application specific perspective do not modify meaning message. course, message altered way, then perspectives longer same message. However, just paper document altered anyone comment document, yet still same document, so intermediary messages forwarding same message changes. Coupled concept service intermediary service role Typically, more messages' headers rather bodies messages. specification header coupled permissable semantics intermediary make clear extent messages forwarded itnermediary are same message modifications are permitted. are number situations additional processing messages required. example, messages are exchanged agents enterprise not need encryption; however, message leave enterprise then good security suggest be encrypted. Rather burden software agent means encrypting decrypting messages, functionality be realized means intermediary. main responsiblity software agents then ensuring messages are routed appropriately have right headers targetted appropriate intermediaries. Service Role Definition service role abstract set tasks identified be relevant person organization offering service. Service roles are also associated particular aspects messages exchanged service. Relationships other elements service role set service tasks service role be defined terms particular properties messages. service role be established service owner. Explanation service role intermediate abstraction service task. given message received service involve processing associated several service roles. Similarly, messages emitted also involve more service role. formalize distinction noting service role typically associated particular property messages. ultimate processing, service role be determine final disposition messages received. However, other service roles be associated more generic properties messages such encryption, reference customer inventory item. Service roles identify points interest service owner processing messages. such, are established party offers service. Service Semantics Definition semantics service behavior expected interacting service. semantics contract necessarily legal contract) provider entity requester entity. intended real-world effect invoking service. service semantics be formally described machine readable form, identified not formally defined, informally defined band" agreement provider entity requester entity. Relationships other elements service semantics contract provider entity requester entity concerning effects requirements pertaining use service service semantics intended effects using service service semantics service tasks constitute service. service semantics be identified service description service semantics be described formal, machine-processable language Explanation Knowing type data structure not enough understand intent meaning use. example, methods deposit withdraw account typically have same type signature, different effect. effects operations are semantics operation. good practice be explicit intended effects using Web service; perhaps even point constructing machine readable description semantics service. Machine processable semantic descriptions provide potential sophisticated usage Web services. example, accessing such descriptions, requester agent autonomously choose provider agent use. Apart expected behavior service, other semantic aspects service include policy restrictions service, relationship provider entity requester entity, manageability features are associated service. Service Task Definition service task action combination actions associated desired goal state. Performing task executing actions, intended achieve particular goal state. Relationships other elements service task action combination actions. service task associated more intended goal states. service task performed executing actions associated task. service task service interface Explanation service task abstraction intended effect invoking service. Tasks are associated goal states characterized predicates are satisfied successful completion. performance task made observable exchange messages requester agent provider agent. specific pattern messages choreography associated task. addition exchanged messages, there be other private actions associated task. example, database update task, task be signaled initiating message completion message, are public, actual database update, typically private. case service oriented architecture only public aspects task are important, are expressed entirely terms messages exchanged. Tasks represent useful unit modeling semantics service indeed service role given service consist number tasks. Resource Oriented Model Resource Oriented Model aspects architecture relate resources. Resources are fundamental concept underpins much Web much Web services; example, Web service particular kind resource important architecture. ROM key features resources are relevant concept resource, independent role resource context Web services. Thus focus issues such ownership resources, policies associated resources so Then, virtue fact Web services are resources, properties are inherited Web services. illustrate basic concepts relationships ROM Figure Figure Resource Oriented Model Discovery Definition Discovery act locating machine-processable description Web service-related resource have been previously unknown certain functional criteria. matching set functional other criteria set resource descriptions. goal find appropriate Web service-related resource.[WS Glossary] Relationships other elements Discovery act locating resource description Discovery matching set functional other criteria set resource descriptions. Discovery be performed agent, end-user Discovery be realized using discovery service Explanation context Web services, resources being discovered are usually service descriptions. requester entity not already know service wishes engage, requester entity discover are various means discovery be performed. Various things human end users agents initiate discovery. Requester entities find service descriptions development static binding, execution dynamic binding. statically bound requester agents, using discovery optional, service description be obtained other ways, such being sent directly provider entity requester entity, developed collaboratively, provided third party, such standards body. Discovery Service Definition discovery service service agents retrieve Web service-related resource descriptions. Relationships other elements discovery service service discovery service used publish descriptions discovery service used search resource descriptions discovery service be used agent Explanation discovery service used publish search descriptions meeting certain functional semantic criteria. primarily intended use requester entities, facilitate process finding provider agent particular task. However, depending implementation policy discovery service Discovery: Registry, Index Peer-to-Peer?), also be used provider entities actively publish service descriptions. resource model general purpose, most important resource purposes Web service. Furthermore, primary role discovery service facilitate discovery Web services. dynamic discovery, requester agent interact directly discovery service find appropriate provider agent engage. static discovery, human interact discovery service appropriate software agent, such browser. use automated discovery service optional, other means be used enable requester entity provider entity agree service description govern interaction. example, requester entity obtain service description directly provider entity, parties develop service description collaboratively, circumstances, service description be created requester entity dictated provider entity. example, large company require suppliers provide Web services conform particular service description.) Likewise, requester entity obtain service description other sources discovery service, such local file system, FTP site, URL, WSIL document. Identifier Definition identifier unambiguous name resource. Relationships other elements identifier be realized URI identifier resource relevant architecture Explanation Identifiers are used identify resources. architecture use Uniform Resource Identifiers identify resources. Issue URIs be used identify Web services components, rather QNames? specifications use QNames identify things. However, QNames be ambiguous, same QName be used identify things different types. effect, specifications having practice have different symbol spaces distinguish different uses QName.) URIs be preferred instead QNames Web services? significant majority Working Group answer yes. Resolution: None recorded. Representation Definition representation piece data resource state. Relationships other elements resource have representation Explanation Representations are data objects reflect state resource. resource unique identifier URI). Note representation resource need not be same resource example resource asociated booking state restaurant have different representations depending representation retrieved. representation usually retrieved performing HTTP URI. Resource Definition resource defined be anything have identifier. resources general be anything, architecture only concerned resources are relevant Web services therefore have additional characteristics. particular, incorporate concepts ownership control: resource architecture thing name, have reasonable representations be said be owned. ownership resource critically connected right set policy resource. Relationships other elements resource identifier resource have more representations resource have more resource descriptions resource owned person organization resource be governed more policies Explanation Resources form heart Web architecture Web universe resources have URIs identifiers, defined real-world perspective, most interesting aspect resource ownership: resource something be owned, therefore have policies applied Policies applying resources are relevant management Web services, security access Web services many other aspects role resource world. Resource description Definition resource description machine readable data permit resources be discovered. Resource descriptions be many different forms, tailored specific purposes, resource descriptions contain resource's identifier. Relationships other elements resource description resource's identifier resource description reference policies applicable resource resource description reference semantics applicable resource Explanation resource description machine-processable description resource. Resource descriptions are used discovery services permit agents discover resource. precise contents resource description vary, depending resource, purpose description accessibility resource. However, purposes important note description contain resource's identifier. I.e., description form: new resource owned XYZ co." not regarded valid resource description not mention resource's identifier. primary purpose resource descriptions facilitate discovery resource. aid purpose, description likely contain information location resource, access potentially policies govern policy. resource Web service, description also contain machine-processable information invoke Web service expected effect using Web service. Note resource description fundamentally distinct resource representation. latter snapshot reflecting state resource, description meta-level information resource. Policy Model Policy Model aspects architecture relate policies extension, security quality service. Security fundamentally constraints; constraints behavior action accessing resources. Similarly, quality service also constraints service. PM, constraints are modeled core concept policy; relationships other elements architecture. Thus PM framework security be realized. However, there are many other kinds constraints, policies are relevant Web services, including various application-level constraints. concepts relationships PM are illustrated Figure Figure Policy Model Audit Guard Definition audit guard mechanism used behalf owner monitors actions agents verify satisfaction obligations. Relationships other elements audit guard policy guard audit guard monitor more resources. audit guard monitor actions relative more services. audit guard determine agent's obligations have been discharged. Explanation audit guard enforcement mechanism. used monitor discharge obligations. role audit guard monitor agents, resources services are consistent associated obligations established service's owner manager. Typically, audit guard monitors state resource service, ensuring obligation satisfied. associated obligations are satisfied. nature, not possible proactively enforce obligations; hence, obligation violation result kind retribution fact violation. Domain Definition domain identified set agents resources subject constraints more policies. Relationships other elements domain collection agents resources. domain scope application more policies Explanation domain scope applicability policies. domain be defined explicitly implicitly. Members explicitly defined domain are enumerated central authority; members implicitly defined domain are not. example, membership implicitly defined domain depend state agent something thus be dynamic. Obligation Definition obligation kind policy actions states agent resource. Relationships other elements obligation kind policy obligation require agent perform more actions obligation require agent service be more allowable states obligation be discharged performance action other event. Explanation obligation fundamental types policies. agent obligation perform action, then required do so. action performed, then agent be said have satisfied obligations. Not obligations relate actions. example, agent providing service have obligation maintain certain state readiness. service policies are often expressed terms obligations.) Such obligation typically not discharged obligee's actions; event certain time period expiring) discharge obligation. Obligations, nature, be proactively enforced. However, obligations are associated enforcement mechanisms: audit guards. monitor controlled resources agents result kind retribution; retributions are not modeled architecture. obligation continue exist requirements have been met example, obligation maintain particular credit card balance), be discharged action event. Permission Definition permission kind policy allowed actions states agent resource. Relationships other elements permission type policy permission enable more actions permission enable more allowable states Explanation permission fundamental types policies. agent permission perform action, access resource, achieve certain state, then expected attempt perform action etc., be successful. Conversely, agent not have required permission, then action fail even otherwise have succeeded. Permissions are enforced guards, particular permission guards, function ensure permission policies are honored. Permission Guard Definition permission guard mechanism deployed behalf owner enforce permission policies. Relationships other elements permission guard policy guard permission guard mechanism permission policies permission guard control more resources. permission guard actions relative more services. Explanation permission guard enforcement mechanism used enforce permission policies. role permission guard ensure uses service resource are consistent policies established service's owner manager. Typically, permission guard resource service requester resource service. many situations, not necessary service be aware permission guard. example, possible role message intermediary act permission guard final intended recipient messages. permission guard acts enabling requested action access, denying Thus, normally possible permission policies be proactively enforced. Person Organization Definition person organization be owner agents provide request Web services. Relationships other elements person organization own agent person organization belong domain person organization establish policies governing resources own Explanation WSA concept person organization intended refer real-world people are represented agents perform actions behalf. actions considered architecture are ultimately rooted actions humans. Policy Definition policy constraint behavior agents people organizations. Relationships other elements policy constraint allowable actions states agent person organization policy have identifier policy be described policy description policy define capability Explanation policy constraint behavior agents perform actions access resources. are many kinds policies, relate accessing resources particular ways, others relate more generally allowable actions agent perform: provider agents requester agents. Logically, identify types policy: permissions obligations. most policies relate actions various kinds, not exclusively so. example, there be policy agent be certain state conversely not be particular state) relation services requesting providing. Closely associated policies are mechanisms establishing policies enforcing architecture not model former. Policies have applications defining security properties, quality service properties, management properties even application properties. Policy Description Definition policy description machine-processable description policy set policies. Relationships other elements policy description policy Explanation policy description machine processable description constraint behavior agents perform actions, access resources. policy description not policy, define policy be used determine policy given situation. Policy descriptions include specific conditions, such XXX Co. access files directory FFF". also include more general rules, such entity right access files directory FFF, also obligation close seconds.". Policy Guard Definition policy guard mechanism more policies. deployed behalf owner. Relationships other elements policy guard owner responsible establishing guard Explanation policy guard abstraction mechanism used owners resources enforce policies. architecture kinds policy guards: audit guards permission guards. relate core kinds policies permission policies respectively). Relationships section terms appear architectural models are not specific Web services Web services architecture. However, are defined here help clarify use terms document. relationship Definition X Y relationship relationship concepts X Y, such X also Y. Relationships other elements Assuming X Y, then: true P true Y then P true X Y P then X Q such Q P. transitive P true Y then P true X Explanation Essentially, say concept X Y mean feature Y also feature X. Note, however, X presumably more specific concept Y, features X also be more specific variants features Y. example, service concept, state service identifier. more specific Web service concept, note Web service identifier form URI identifier. relationship Definition concept Y X only Y expression language L values Y are instances X. Relationships other elements Assuming Y X, then: Y valid expression L, then values Y are instances concept X Explanation Essentially, say Y concept X are saying expression Y instances X. example, service description concept, state service descriptions are expressed service description language. means expect legal expressions service description language be instances service description concept. relationship Definition Saying concept X Y relationship" instance X associated instance Y. Relationships other elements Assuming X Y, then: E instance X then Y valid E. Explanation say X Y" mean see X also see Y example, Web service concept, state Web services have URI identifiers. So, Web service concept found, assume Web service referenced identifier. turn, implementations use identifiers reliably refer Web services. given Web service not have identifier associated then architecture been violated. relationship Definition relationship Y" relationship concepts X Y, such X right authority control, utilize dispose Y. Relationships other elements Assuming X Y, then: policy X right establish policies constrain agents other entities use Y disposal X right transfer rights respect Y entity. transitive P true Y then P true X Explanation Essentially, say X Y mean X significant set rights respect Y, rights are transferrable. general, ownership partial, there be many entities have rights respect service resource. realized relationship Definition statement X realized Y" concept X abstraction concept Y. equivalent view concept X implemented using Y. Relationships other elements Assuming X realized Y, then: implemented Y present, true system, then concept X system reified Y reification concept X. Explanation say concept feature X realized Y, mean Y implementation reification concept X. I.e., Y valid concept system then have also ensured concept X valid same system. example, correlation feature, state message correlation associate identifiers messages. be realized number ways including identifier message header, message body, service binding so message identifier key realization message correlation. Stakeholder's Perspectives section architecture various perspectives, perspective representing coherent view architecture. example, security major stakeholder's perspective architecture Service Oriented Architecture Distributed Systems distributed system diverse, discrete software agents worktogether perform tasks. Furthermore, agents distributedsystem do not operate same processing environment, so mustcommunicate hardware/software protocol stacks network. meansthat communications distributed system are intrinsically less fastand reliable using direct code invocation shared memory. Thishas important architectural implications distributed systems requirethat developers infrastructure applications) consider theunpredictable latency remote access, take account issues ofconcurrency possibility partial failure Comp]. Distributed object systems are distributed systems semantics ofobject initialization method invocation are exposed remote systemsby means proprietary standardized mechanism broker requestsacross system boundaries, marshall unmarshall method argument data, etc.Distributed objects systems typically not necessarily) arecharacterized objects maintaining fairly complex internal staterequired support methods, fine grained interactionbetween object program using focus sharedimplementation typesystem interface hierarchy object program usesit. Service Oriented Architecture form distributedsystems architecture typically characterized followingproperties: Logical view: service abstracted, logical view actualprograms, databases, business processes, etc., defined terms itdoes, typically carrying business-level operation. Message orientation: service formally defined terms themessages exchanged provider agents requester agents, not theproperties agents internal structure agent,including features such implementation language, process structureand even database structure, are deliberately abstracted away SOA:using SOA discipline not not need know anagent implementing service constructed. key benefit concernsso-called legacy systems. avoiding knowledge internalstructure agent, incorporate software component orapplication be message handling code toadhere formal service definition. Description orientation: service described machine-processable meta data. description supports public nature SOA: only details are exposed public important use service be included description. semantics service be documented, directly indirectly, description. Granularity: Services tend use small number operations relatively large complex messages. Network orientation: Services tend be oriented use network, not absolute requirement. Platform neutral: Messages are sent platform-neutral, standardized format delivered interfaces. XML most obvious format constraint. Web Services Architectural Styles Distributed object systems have number architecturalchallenges. Comp] others point Problems introduced latency unreliability underlyingtransport. lack shared memory caller object. numerous problems introduced partial failure scenarios. challenges concurrent access remote resources. fragility distributed systems incompatible updates areintroduced participant. challenges apply irrespective distributedobject system implementedusing COM/CORBA Web services technologies. Web services are lessappropriate alternatives fundamental criteria successfuldistributed object architectures are met. criteria are met, Webservices technologies be appropriate benefits offer termsof platform/vendor neutrality offset performance implementationimmaturity issues introduce. Conversely, using Web services technologies implement distributedsystem magically turn distributed object architecture SOA.Nor are Web services technologies necessarily best choice forimplementing SOAs necessary infrastructure expertise are inplace use COM CORBA implementation technology there norequirement platform neutrality, using SOAP/WSDL not add enoughbenefits justify costs performance, etc. general SOA Web services are most appropriate forapplications: operate Internet reliability andspeed be guaranteed; there ability managedeployment so requesters providers are upgraded once; components distributed system run different platforms vendorproducts; existing application needs be exposed use network, be wrapped Web service. Relationship World Wide Web REST Architectures World Wide Web networked information system several constraints: Agents identify objects system, called resources, Uniform Resource Identifiers Agents represent, describe, communicate resource state representations resource variety widely-understood data formats XML, HTML, CSS, JPEG, PNG). Agents exchange representations protocols use URIs identify directly indirectly address agents resources. Arch] even more constrained architectural style reliable Web applications known Representation State Transfer been proposed Roy Fielding inspired W3C Technical Architecture Group's architecture document Arch] many see model build Web services REST Web subset WWW HTTP) agents provide uniform interface semantics essentially create, retrieve, update delete rather arbitrary application-specific interfaces, manipulate resources only exchange representations. Furthermore, REST interactions are sense meaning message not depend state conversation. identify major classes Web services: REST-compliant Web services, primary purpose service manipulate XML representations Web resources using uniform set operations; arbitrary Web services, service expose arbitrary set operations. classes Web services use URIs identify resources use Web protocols HTTP SOAP XML data formats messaging. be noted SOAP be used manner consistent REST. However, SOAP also be used manner not consistent REST.) Web Services Technologies Web service architecture many layered interrelated technologies. are many ways visualize technologies, just there are many ways build use Web services. Figure illustration technology families. Figure Web Services Architecture Stack section describe technologies seem critical role fill relation architecture. necessarily bottom-up perspective, section, are looking Web services perspective tools be used design, build deploy Web serivces. technologies consider here, relation Architecture, are XML, SOAP, WSDL. However, there are many other technologies be useful. example, see list Web services specifications compiled Roger Cutler Paul Denning.) See also B Overview Web Services Security Technologies XML XML key technology requirement many places. offering standard, flexible inherently extensible data format, XML significantly burden deploying many technologies needed ensure success Web services. important aspects XML, purposes Architecture, are core syntax concepts XML Infoset Infoset], XML Schema XML Namespaces. XML Infoset not data format se, formal set information items associated properties comprise abstract description XML document XML Infoset specification consistent rigorous set definitions use other specifications need refer information well-formed XML document. Serialization XML Infoset definitions information be expressed using XML However, not inherent requirement architecture. flexibility choice serialization format(s) broader interoperability agents system. future, binary encoding XML infoset be suitable replacement textual serialization. Such binary encoding be more efficient more suitable machine-to-machine interactions. SOAP SOAP standard, extensible, composable framework packaging exchanging XML messages. context architecture, SOAP also convenient mechanism referencing capabilities use headers). Part XML-based messaging framework: processing model exensibility model. SOAP messages be carried variety network protocols; such HTTP, SMTP, FTP, RMI/IIOP, proprietary messaging protocol. Part optional components: set encoding rules expressing instances application-defined data types, convention representing remote procedure calls responses, set rules using SOAP HTTP/1.1. SOAPVersion Part define acronym anymore, there are expansions term reflect thesedifferent ways technology be interpreted: Service Oriented Architecture Protocol: general case, SOAP message theinformation needed invoke service reflect results serviceinvocation, information specified service interfacedefinition. Simple Object Access Protocol: using optional SOAP RPC Representation,a SOAP message methodinvocation remote object, serialization argument listof method be moved local environment remoteenvironment. WSDL WSDL Part language describing Web services. WSDL Web services starting messages are exchanged requester provider agents. messages are described abstractly then bound concrete network protocol message format. Web service definitions be mapped implementation language, platform, object model, messaging system. Simple extensions existing Internet infrastructure implement Web services interaction browsers directly application. application be implemented using COM, JMS, CORBA, COBOL, number proprietary integration solutions. long sender receiver agree service description, WSDL file), implementations Web services be anything. Using Web Services introduction outlined illustrated Figure broad steps involved process engaging Web service Overview Engaging Web Service). section expands steps. steps are necessary, not be sufficient: many scenarios require additional steps, significant refinements fundamental steps. Furthermore, order steps are performed vary situation situation. requester provider entities known other", sense party interaction become aware other party. are cases. typical case, requester agent be initiator. case, say requester entity become aware provider entity, i.e., requester agent somehow obtain address provider agent. are ways typically occur: requester entity obtain provider agent's address directly provider entity; requester entity use discovery service locate suitable service description provider agent's invocation address) associated functional description, manual discovery autonomous selection. cases are described more fully Web Service Discovery. other cases, provider agent initiate exchange messages requester provider agents. case, saying requester provider entities become known other actually means provider entity aware requester entity, i.e., provider agent somehow obtains address requester agent. application dependent irrelevant architecture. case expected be less common requester agent initiator, important subscription scenarios. requester entity provider entity agree service description WSDL document) semantics govern interaction requester agent provider agent. note Same Semantics Service Description further explanation meant here not necessarily mean requester provider entities communicate negotiate other. simply means parties have same compatible) understandings service description semantics, intend uphold are many ways be achieved, such requester provider entities communicate directly other, explicitly agree service description semantics. provider entity publish offer service description semantics take-it-or-leave-it requester entity accept unmodified conditions use. service description semantics network address particular service) be defined standard industry organization, used many requester provider entities. case, act requester provider entities reaching agreement accomplished parties independently conforming same standard. service description semantics excepting network address service) be defined published requester entity are written provider entity's perspective), offered provider entities take-it-or-leave-it basis. occur, example, large company suppliers provide Web services conform particular service description semantics. case, agreement achieved provider entity adopting service description semantics requester entity published. Depending scenario, Step portions Step be performed prior Step service description semantics are input embodied requester agent provider agent appropriate. other words, information be input implemented requester provider agents. are many ways be achieved, architecture not specify care means are used. example: agent be hard coded implement particular, fixed service description semantics. agent be coded more general way, desired service description semantics be input dynamically. agent be created first, service description semantics be generated deduced agent code. example, tool examine set existing class files generate service description. Regardless approach used, information perspective semantics service description somehow be input implemented requester agent provider agent agents interact. slight simplification; see note Same Semantics Service Description further explanation.) requester agent provider agent exchange SOAP messages behalf owners. Note: Same Semantics Service Description. convenient say requester provider entities semantics service description, slight simplification perhaps slightly misleading) say parties agree same semantics service description: word often active communication parties explicit act signing contract) cause agreement become binding parties, yet required case step slight simplification say requester provider agents implement same semantics WSD, reasons: requester agent perspective requester entity, provider agent perspective provider entity example, party's input other party's output); requester provider agents only need implement aspects service description semantics are relevant respective roles. summary, convenient evocative) say requester provider entities agree semantics service description govern interaction requester provider agents, be more accurate say simply need have congruent non-conflicting view semantics service description interaction. Web Service Discovery requester entity wishes initiate interaction provider entity not already know provider agent wishes engage, then requester entity need suitable candidate. Discovery act locating machine-processable description Web service have been previously unknown certain functional criteria. Glossary] goal find appropriate Web service. discovery service service facilitates process performing discovery. logical role, be performed requester agent, provider agent other agent. Figure Process") expands Figure describe process engaging Web service discovery service used. Figure Discovery Process Service engagement using discovery service proceeds roughly following steps. requester provider entities known other": discovery service somehow obtains Web service description Figure associated functional description service. functional description Figure machine-processable description functionality partial semantics) service provider entity offering. be simple few words meta data URI, be more complex, such TModel UDDI) collection RDF, DAML-S OWL-S statements. architecture not specify care discovery service obtains service description functional description. example, discovery service implemented search engine, then crawl Web, collecting service descriptions finds provider entity having knowledge discovery service implemented registry UDDI), then provider entity need actively publish service description functional description directly discovery service. requester entity supplies criteria discovery service select Web service description based associated functional description, capabilities potentially other characteristics. locate service having certain desired functionality semantics; however, be possible specify criteria related provider agent, such name provider entity, performance reliability criteria, criteria related provider entity, such provider entity's vendor rating. discovery service returns more Web service descriptions references meet specified criteria. multiple service descriptions are returned, requester entity perhaps using additional criteria. requester provider entities agree semantics Figure desired interaction. commonly be achieved provider entity defining semantics offering take-it-or-leave-it basis requester entity, be achieved other ways. example, parties adopt certain standard service semantics are defined industry standards body. circumstances requester define semantics. important point parties agree sense described Using Web Services) semantics, regardless achieved. Step also parties agree sense described Using Web Services) service description be used. However, requester entity obtained Web service description Step 1.c, effect requester provider entities have already done so. service description semantics are input embodied requester agent provider agent, appropriate. requester agent provider agent exchange SOAP messages behalf owners. Manual Versus Autonomous Discovery discovery process described not specific requester entity actually discovery. manual discovery, requester human uses discovery service design time) locate select service description desired functional other criteria. autonomous discovery, requester agent task, design time run time. steps are similar case, constraints needs are significantly different, such Interface requirements. requirements something intended human interaction are very different requirements something intended machine interaction. Need standardization. far less need standardize interface protocol humans use machines are intended use. Trust. People do not necessarilytrust machines make decisions have significantconsequences. explained more fully Trust Discovery. case autonomous discovery, need machine-processable semantics greatly increased. situation autonomous discovery often needed requester agent been interacting particular provider agent, reason needs refresh choice provider agent, previous provider agent longer available, other reasons. Discovery: Registry, Index Peer-to-Peer? present, there are leading viewpoints discovery service be conceived: registry, index, peer-to-peer system. are differences? purpose better other? Registry Approach registry authoritative, centrally controlled store information. Publishing service description active step provider entity: explicitly place information registry information available others. case registry: registry owner authority place information update, registry. owner registry R delegate permission approved provider entities wish publish own service descriptions, arbitrary third party not publish description someone else's service registry R. means, example, company X not be able register functional description company Y's service, even description be valuable others be superior ways Y's own description. registry owner information placed registry. Others independently augment information. UDDI often seen example registry approach, also be used index. Index Approach contrast registry, index compilation guide information elsewhere. not authorative not centrally control information references. case index: Publishing passive: provider entity service functional descriptions Web, are interested index owners) collect provider entity's specific knowledge. Anyone create own index. descriptions are exposed, be harvested using spiders arranged index. Multiple organizations have such indexes. information contained index be date. However, index pointers authoritative information, information be verified use. index include third-party information. Different indexes provide different kinds information richer, sparser. Free-market forces determine index people use discover information seek. Google often cited example index approach. important note key difference registry approach index approach not merely difference registry index isolation. Indeed, UDDI be used means implement individual index: just spider Web, put results UDDI registry. Rather, key difference control: controls service descriptions get discovered? registry model, owner registry controls index model, anyone create index, market forces determine indexes become popular. Hence, effectively market controls service descriptions get discovered. Peer-to-Peer Discovery Peer-to-Peer computing alternative not rely centralized registries; rather Web services discover other dynamically. view, Web service node network peers, not be Web services. discovery time, requester agent queries neighbors search suitable Web service. matches request, then replies. Otherwise queries own neighboring peers query network particular hop count other termination criterion reached. Peer-to-peer architectures do not need centralized registry, node respond queries P2P architectures do not have single point failure, such centralized registry. Furthermore, node contain own indexing existing Web services. Finally, nodes contact other directly, so information receive known be current. contrast, registry index approach there be significant latency time Web service updated updated description reflected registry index.) reliability provided high connectivity P2P systems performance costs lack guarantees predicting path propagation. node P2P network provide resources needed guarantee query propagations response routing, turn means most time node acts relayer information be interest node results inefficiencies large overhead especially nodes become more numerous connectivity increases. Furthermore, there be guarantee request spread entire network, therefore there guarantee find providers service. Discovery Service Trade-Offs respective advantages disadvantages, P2P systems, indexes centralized registries strike different trade-offs make appropriate different situations. P2P systems are more appropriate dynamic environments proximity naturally limits need propagate requests, such ubiquitous computing. Centralized registries be more appropriate more static controlled environments information not change frequently. Indexes be more appropriate situations scale well accommodate competition diversity indexing strategies. Federated Discovery Services registry viewpoint more centralized approach discovery index approach, there arise situations multiple registries exist Web. expected multiple indexes also exist. such environment, web service requesters need use discovery service need obtain information more registry index. Federation ability consolidate results queries span more single registry index, make appear more single service. registry index contain information other registries indexes help support federation. example, registry dedicated air travel services know registry dedicated rail travel services. third registry general travel services contain information travel services, look other registries certain categories services. search general travel registry return referral requester pointing rail travel registry. Federation results scenario, contrasted referral, require general travel registry submit query rail travel registry behalf requester. general travel registry then merge results query rail travel registry results query own registry. general, rail, air travel registries need share common taxonomy ontology avoid forwarding inappropriate queries other registries. scenario, assume general travel registry examined query requester therefore did not forward query air travel registry. general travel registry have discovered rail travel registry using spider index approach. indexing engine have come registry, based information harvested registry classified rail travel registry. alternative approach be rail travel registry publish information general travel registry using shared taxonomy classify registry rail travel services. Note registry index provide web service discovery, so be appropriate use choreography orchestration description language describe exchanges services needed federation. Functional Descriptions Discovery mentioned beginning Discovery, Web services discovery ability search appropriate Web services based functional descriptions Figure other criteria. functional descriptions need be machine processable, written many provider entities read many requester entities, appropriate language representing functional descriptions least be: Web friendly URIs globally scalable) Unambiguous Capable expressing existing future functionality Capable expressing existing new vocabularies relationships functionalities area needs further standardization work. such effort OWL-S. Web Service Semantics computer programs successfully interact other number conditions be established: be physical connection such data process reach be agreement sense discussed Using Web Services) form data such data lines text, XML structures, etc. more) programs share agreement sense discussed Using Web Services) intended meaning data. example, data intended represent HTML page be rendered, data current status bank account; expectations processing involved processing data different even form data identical. be agreement sense discussed Using Web Services) implied processing messages exchanged programs. example, purchase ordering Web service expected agent places order process document containing purchase order purchase order, opposed simply recording auditing purposes. see more be required, now list sufficient. Message semantics visibility extent shared agreement form, structure meaning message shared just agents involved message governs overall visibility message semantics. emphasis messages, rather actions are caused messages, means SOAs have good visibility: third parties inspect flow messages have assurance services being invoked roles various parties. turn, means intermediaries, such firewalls, are better situation performing functions. firewall look message traffic, structure message, make predictable reasonable decisions security. REST-compliant SOAs, additional visibility uniform interface semantics, essentially HTTP protocol: intermediary inspect URI resource being manipulated, TCP/IP address requester, interface operation requested GET, PUT, DELETE) determine requested operation be performed. TCP/IP HTTP protocols have widely supported set conventions known ports) support intermediaries, firewalls, proxies, caches, etc. are almost universal today. Visibility, however, firewalls. architecture, instead emphasising REST-style uniform interface, emphasize messages' structure terms envelopes, headers bodies. enhance visibility architecturally fostering agreements particular forms headers. example, having well-known standards describe form interpretation authentication tokens headers, simultaneously reduce cost performing authentication increase overall visiblity message's semantics: authentication aspect message be specified standard way then easier larger number interested parties process message. Furthermore, increased visibility reduce cost entry marketplace. Other potential examples standardized headers include support message reliability, support message correlation, support process flow service composition support choreography. argument be extended obvious infrastructure-related processing messages more application-related processing message. example, capturing customer identification well-understood header, then applications capable processing header be able extract customer information message independently intended final disposition message. turn, extremely powerful architectural approach message processing: different stakeholders organization, represented different applications processing different aspects messages, collaborate minimal pre-ordained design. Semantics Architectural Models different models architecture focus different aspects interoperability issues Web service agents. Message Oriented Model Web service agents provider agents) interact other using message oriented communication model. format messages XML infosets structuring messages terms envelopes, headers bodies, described model, acts lay foundation standard comprehension messages exchanged Web service agents. Service Oriented Model builds basics message communication adding concept action service. Essentially, service model interpret messages requests actions responses requests. Furthermore, interpretation different aspects messages be expressed terms different expectations, well understood ways, different parts message: effect, incremental layered approach service possible using well understood headers. Resource Oriented Model further adding concept resource. Resources are important internally architecture Web service best understood resource context Web service management terms policy management) externally: resources are important metaphor interpreting interaction requester entity provider entity. Role Metadata important part Service Oriented Architecture approach extensive use metadata. important several reasons: fosters interoperability requiring increased precision documentation Web services permits tools give higher degree automation development Web services hence cost deploying same). metadata associated Web service be regarded partial machine-readable description semantics Web service. particular using technologies such WSDL, Web service be described machine readable document forms expected messages, datatypes elements messages using choreography description language expected flows messages Web service agents. However, current technologies used describing Web services are probably not yet sufficient meet interoperability requirements global scale. see following areas increased richer meta-data further enhance interoperability: be possible identify real-world entities referenced elements messages. example, using credit card arrange purchase goods services, element message credit card information fundamentally reference real-world entity: account card holder. appropriate technology standardized ontology languages, such OWL. be possible identify expected effects actions undertaken Web service requester provider agents. be captured datatyping be illustrated example Web service withdrawing money account compared depositing money accurately, transferring account account, vice versa). datatypes messages associated such services be identical, dramatically different effects: instead being paid goods services, risk account drained instead. expect richer model services, together technologies identifying effects actions, required. Such model likely incorporate concepts such contracts legally binding technical contracts) well ontologies action. Finally, Web service program particular message means terms expected results message, there also understanding relationship requester entity provider entity, provider agent not be able accurately determine requested actions are warranted. example, provider agent receive request transfer money account request be valid sense datatypes message are correct, semantic markers associated message lead provider agent correctly interpret message transfer request. However, transaction still not be valid, fully comprehensible, provider agent properly identfy relationship requester agent's owner requester entity) requested action. Currently, such concerns are often treated simply security considerations, are, ad hoc fashion. However, issues such delegated authority, proxy requests, so clear simple authentication model accurately capture requirements. expect model concepts such institutions, roles business terms), regulation formation be required. such model be able capture not only simple notions authority, more subtle distinctions such authority delegate action, authority virtue such delegation, authority authorize so Web Services Security Threats Web services involve threats host system, application entire network infrastructure. secure Web services, range XML-based security mechanisms are needed solve problems related authentication, role-based access control, distributed security policy enforcement, message layer security accommodate presence intermediaries. time, there are broadly-adopted specifications Web services security. result developers build up services do not use capabilities develop ad-hoc solutions lead interoperability problems. Web services implementations require point-to-point end-to-end security mechanisms, depending degree threat risk. Traditional, connection-oriented, point-to-point security mechanisms not meet end-to-end security requirements Web services. However, security balance assessed risk cost countermeasures. Depending implementers risk tolerance, point-to-point transport level security provide enough security countermeasures. Security policies perspective architecture, there are fundamental concepts related security: resources be secured; mechanisms resources are secured policy guards); policies, are machine-processable documents describing constraints resources. Policies be logically broken down main types: permission policies obligatory policies. permission policy concerns actions accesses entities are permitted perform obligation policy concerns actions states entities are required perform. are closely related, dependent: not consistent be obliged perform action not have permission perform. given policy document likely contain mix obligation permission policy statements. kinds policies have different enforcement mechanisms: permission guard mechanism be used verify requested action access permitted; audit guard only verify fact obligation not been met. precise form guards likely vary, resources being controlled implementation technologies deployed. architecture principally concerned existence guards role architecture. well engineered system be possible construct guards are not directly visible requester provider agents. example, unauthorized access threat be countered mechanism identity potential agents wish access controlled resource. mechanism turn, controlled policy document evidence be offered agents access permitted. permission guard acts guard enabling disabling access resource action. context SOAP, example, important role SOAP intermediaries permission guards: intermediary not, fact, forward message security policy violated. Not guards are active processes. example, confidentiality information encouraged encryption messages. noted above, potentially necessary encrypt not only content SOAP messages also identities sender receiver agents. guard here encryption be further backed up other active guards apply policy. Message Level Security Threats Traditional network level security mechanisms such Transport Layer Security Virtual Private Networks IPSec Protocol Security) Secure Multipurpose Internet Mail Exchange are point-to-point technologies. traditional security technologies are used Web services security, however, are not sufficient providing end-to-end security context, Web services require more granularities. general, Web services use message-based approach complex interactions include routing messages various trust domains. Web services face traditional security challenges. message travel various intermediaries reaches destination. Therefore, message-level security important opposed point-to-point, transport-level, security. Figure requester agent communicating ultimate receiver use more intermediaries. security context SOAP message end-to-end. However, there be need intermediary have access information message. illustrated security context intermediary original requester agent, intermediary ultimate receiver. Figure End-to-End Security threats listed addresses message security. Message Alteration threats affect message integrity, attacker modify parts whole) message. example, attacker delete part message, modify part message, insert extra information message. attacks affect message header body parts. attacker also affect message integrity manipulating attachments. example, attacker delete attachment, modify attachment, insert attachment message. Confidentiality threat, unauthorized entities obtain access information message message parts. example, intermediary obtains access credit card information was intended ultimate recipient. Man-in-the-middle Man-in-the-middle attacks are also known bucket-brigade attacks. kind assault possible attacker compromise SOAP intermediary then intercepts messages web service requester ultimate receiver. original parties think are communicating other. attacker just have access messages modify Mutual authentication techniques be used alleviate threats attack. Spoofing Spoofing complex attack exploits trust relationships. attacker identity trusted entity order sabotage security target entity. far target entity carrying conversation trusted entity. Usually, spoofing used technique launch other form attacks such forged messages. Strong authentication techniques are needed defend such attacks. Denial Service Denial service attacks focus preventing legitimate users service ability use service. DoS attacks are easy implement cause significant damage. DoS attacks disrupt operation agent attack effectively disconnect rest world. DoS attacks take various forms target variety services. DoS attacks exploit weaknesses architecture system attack. Ironically, security mechanisms add overhead be exploited DoS attacks. Distributed denial service attacks uses resources more machine launch synchronized DoS attacks resource. Replay Attacks attack intruder intercepts message then replays back targeted agent. Appropriate authentication techniques coupled techniques such time stamp sequence numbering messages defend replay attacks. Web Services Security Requirements are many security challenges adopting Web services. highest level, objective create environment, message level transactions business processes be conducted securely end-to-end fashion. need ensure messages are secured transit, presence intermediaries. also be need ensure security data storage. requirements providing end-to-end security Web services are summarized sub-sections. Authentication Mechanisms Authentication needed order verify identities requester provider agents. cases, use mutual authentication be needed participants not necessarily be directly connected single hop. example participants be initial requester intermediary. Depending security policy be possible authenticate requester, receiver mandate use mutual authentication. Several methods be used authenticate services. Techniques include: passwords, time pass certificates. Password-based authentication use strong passwords. Password authentication alone be insufficient. Based vulnerability assessment be necessary combine password authentication other authentication authorization process such certificates, Lightweight Directory Access Protocol Remote Authentication Dial-in User Service Kerberos, Public Key Infrastructure Authorization Authorization needed order control access resources. Once authenticated, authorization mechanisms control requester access appropriate system resources. be controlled access systems components. Policy access rights requester. principle least privilege access be used access rights are given requester. Data Integrity Data Confidentiality Data integrity techniques ensure information not been altered, modified transmission detection. Data confidentiality data only accessible intended parties. Data encryption digital signature techniques be used purpose. Integrity Transactions Communications needed ensure business process was done properly flow operations was executed correct manner. Non-Repudiation Non-repudiation security service party transaction false denial occurrence transaction party. Non-repudiation technologies provide evidence occurrence transactions be used third party resolve disagreement. End-to-End Integrity Confidentiality Messages integrity confidentiality messages be ensured even presence intermediaries. Audit Audit are needed order trace user access behavior. are also needed order ensure system integrity verification. Audit be performed agents. Such agents play role audit guard monitor; watch resources other agents, validating obligations have been established are respected discharged. often not possible prevent violation obligations. Instead, audit guard policy violation, form retribution remediation be enacted. precise forms are, course, scope architecture. Distributed Enforcement Security Policies Implementers be able define security policy enforce various platforms varying privileges. Security Consideration Architecture Organizations implement Web services be able conduct business secure fashion. aspects Web services including routing, management, publication, discovery be performed secure manner. Web services implementers be able utilize security services such authentication, authorization, encryption auditing. Web services messages flow firewalls, be tunneled existing ports protocols. Web services security use appropriate corporate wide policies need be integrated external cross-enterprise policy trust resolution. Organizations need implement capabilities are listed next. Cross-Domain Identities Requester provider agents communicate other using various identity verification schemes different security domains. Many systems define role based access privileges based identity. important Web services be able support mapping identities multiple domains even single domain. provider entity requester entity use identities encrypt sign messages exchange. exchange identity credentials context initial messages further trusted interactions. Service's identity optional, perfectly possible implement business service identity always acts behalf requester entity impersonating requester entity). Not having requester entity's identity translates anonymous access, rarely allowed business services. Distributed Policies Security Policies are associated requester entity, service discovery mechanism be used define access privileges request responses parties. polices be validated run time context interaction. party interaction own policies. Trust Policies Trust Policies are distributed policies apply environment other side's party interaction. requester entity needs trust environment service provider entity needs trust environment requester entity. Trust policies be recursive be defined trust policies involved parties even whole domains. example trust trust friend friend trusts Distributed Identities, Policies Trust be described processed machine. example, X.509 certificate be embedded message, thus asserting senders Identity. Policy be described XML attached service contract. Machines process, resolve adjust security based given descriptions. Trust mechanisms be used form Delegation Federation relationships. mechanisms be used facilitate secure interactions web services trust boundaries distributed fashion. Secure Discovery Mechanism Secure Discovery Mechanism policies govern publication discovery service. example, developers SOA applications procurement department not be allowed discover services available human resources department, developers are not entitled use human resources services. publishing service, identity usually necessary assert service publication policies, cases peer-to-peer discovery. requester entity service, not provide Identity; discovery well be anonymous. Trust Discovery Suppose requester entity Web service being offered provider entity was previously unknown requester entity. requester entity trust service? use service requester divulge sensitive information credit card numbers) service then there be significant risk involved. decision not trust particular service inherently requester entity Web service previously unknown provider entity. ramification discovery process, leads important difference manual discovery autonomous discovery. manual discovery used, human makes judgement using other, independently obtained information) trust engage previously unknown service discovered. autonomous discovery, machine makes decision. people not trust machine make significant judgement decisions put organizations risk, agents performing autonomous discovery are often limited using private discovery services list only services have been pre-screened deemed trustworthy requester entity. limited form autonomous discovery be more precisely called autonomous selection, available candidates are already known advance. other ways mitigate trust issue automated discovery include: agent autonomously discover candidate Web services then show human user choose; agent autonomously discover candidate services then check trusted registery independent information such Dunn Bradstreet quality rating. Secure Messaging Secure Messaging privacy, confidentiality integrity interactions. Digital signatures techniques be used help ensure non-repudiation. Techniques ensure channel security be used securing messages. However, such techniques are applicable few limited cases. Examples include static direct connection requester agent provider agent. applications, such mechanisms be appropriate. However, general case, message security techniques such encryption signing message payload be used routing reliable messaging. Figure Secure Discovery Privacy Considerations Issue relationship privacy Web services technology needs clarification. considerably more complexity privacy treated section. Resolution: None recorded. Privacy related behavior, habits actions are expressed terms policies owners data typically users Web services have, together mechanisms necessary ensure owners' rights are respected. Privacy policies are typically much more obligatory form access control policies. policy provider agent properly propagate P3P tags, example, obligation provider entity. However, not possible prevent rogue provider agent leaking private information. Thus, be possible monitor public actions Web service verify P3P tags are propagated appropriately. Many privacy-related constraints are concerned maintaining certain kinds state. example, provider entity have constraint P3P tags associated use Web services are appropriately propagated third parties. Such constraint easily expressed terms allowed actions provider agent perform. obligation ensure publicly observable condition proper use P3P tags) always maintained maintained private also). Similarly, provider agent link possible actions requester agent perform requester agent maintaining particular level secure access administrative tasks only be performed request using secure communications). Peer-to-Peer Interaction support Web services interacting peer peer style, architecture support peer peer message exchange patterns, permit Web services have persistent identity, permit descriptions capabilities peers support flexibility discovery peers other. message exchange pattern concept allow Web services communicate other using very general concept message exchange. Furthermore, allow fact message exchange pattern be identified permits interacting Web service agents explicitly reference particular message pattern interactions. Web service wishing use peer-to-peer style interaction use, example, publish-subscribe form message exchange pattern. kind message exchange just possible message exchange patterns possible pattern explicitly identifiable. agent concept note agents have identifiers. primary role agent identifier permit long running interactions spanning multiple messages. Much correlation, agent's identifier be used link messages together. example, publish subscribe scenario, publishing Web service include references Web service requested subscription, separately additionaly actual recipient service. agent concept also given agent adopt role provider agent requester agent. I.e., are roles agent, not necessarily intrinsic agent Such flexibility key part peer peer mode interaction Web services. service concept state services have semantics be identified aservice description be expressed service description language. identification semantics service, more advanced agents description service contract permits agents implementing Web services determine capabilities other peer agents. turn, critical success factor architecture supporting peer-to-peer interaction Web services. Finally, fact services have descriptions means descriptions be published discovery agencies also retrieved such agencies. effect, availability explicit descriptions Web services agents discover other automatically well having hard-coded. Web Services Reliability Dealing errors glitches inescapable fact life, especially context global network linking services belonging many different people. eliminate errors glitches, goal reduce error frequency interactions errors occur, provide greater amount information successful unsuccessful attempts service. Note focus reliability not really issues such syntax errors, even badly written applications. sufficient scope things go wrong level network connections being broken, servers being switched middle transactions even people entering incorrect information description file. context Web services, address issues reliability several distinct levels: reliable predictable delivery infrastructure services, such message transport service discovery, reliable predictable interactions services, reliable predictable behavior individual requester provider agents. analysis generally separate concerns fault tolerance, availability security, there course be overlapping issues. context security, deliberate acts cause things go wrong example, denial service attacks. sufficiently important case deal separate section. Message reliability Reliability level messages often referred reliable messaging. distributed system there are fundamental limits reliability communication agents public network. However, practice there are techniques use greatly increase reliability messages, cases communication then gain feedback went wrong. more detail, identify properties message sending are important: sender message be able determine given message been received intended receiver message been received exactly once. Knowing message been received correctly sender take compensating action event message not been received. very least, sender attempt resend message not been received. general goal reliable messaging define mechanisms make possible achieve objectives high probability success face inevitable unpredictable network, system software failures. goal also be examined respect wishes confirm only receipt message, perhaps also confirm validity message. questions be asked message validity: Was message received same sent? be determined such techniques byte counts, check sums, digital signatures. Does message conform formats specified agreed protocol message? Typically determined automatic systems using syntax constraints XML well formed) structural constraints more XML schemas WSDL message definitions). Does message conform business rules expected receiver? purpose additional constraints validity checks related business process are typically checked application logic human process managers. first considered be part reliable messaging, last partly addressed Web service choreography, more closely related business expectations parties. Web services architecture not give specific support reliable messaging, reporting event failure. However, give guidance be accomplished. headers body structure messages be utilized: providing standardized headers support message auditing then message reliability infrastructures be deployed ways do not need impact applications services. effect, augment message traffic necessary specific headers intermediaries implement specific semantics message reliability reporting case message communication Recall architecture not mandate specific means message delivery. fact, envisage many potential modes communication, including HTTP, SMTP, JMS based message transports. given message even involve multiple kinds message transport. However, messages are structured according SOAP, incorporate overall message reliability SOAP message structure. Message reliability most often achieved acknoweldgement infrastructure, set rules defining parties message communicate other concerning receipt message validity. WS-Reliability WS-ReliableMessaging are examples specifications acknowledgement infrastructure leverage SOAP Extensibility Model. cases underlying transport layer already reliable messaging support queue-based infrastructure), same level reliability be achieved SOAP defining binding underlying properties transport. Service reliability message reliability, are not position be able offer guarantees service provider agents and/service requester agents always perform flawlessly; again, especially context distributed system public network different agents be owned different people subject different policies management not possible engineer complete service reliability. However, message communication deploy techniques greatly enhance reliability reduce cost failure. principal technique here transactional context management. Transaction management conversations agents be managed so parties involved have greater degree confidence transactions progress satisfactorily, event failure failure be identified transactions cancelled, rolled back compensated architecture not give specific advice implement transactional reliability. However, again message reliability, combination flexible extensible message structures concept multiple processing messages intermediaries implementing service roles) guidance. way incorporate transactional support be use standardized headers containing information such transactional bracket markers context information are added messages exchanged service requester agents service provider agents such way intermediaries process messages monitor transactions way only minimally impacts existing applications. Specialized transactional intermediaries process messages' transaction-specific headers beginning transaction, commitment, roll-back so mark messages process results; so applications respond appropriately. Related transactional monitoring monitoring service choreographies. significant aspect specification interface service pattern message traffic see. simple cases, pattern often very straightforward; however, most realistic cases, choreography services be very complex. Monitoring messages are arriving order expected potentially significant tool deployment reliable services. Again, transactional monitoring, approach be deploy specialized intermediary processes specific function ensure choreographic well static message structure) requirements service usage are being met. especially important provider agent service not same ownership domain requester agent. key architectural property being used here potential deployment third party services monitor process messages specific role-oriented ways requesters services providers serives needs be unduly concerned possible architecture not require messages be consumed single agents conversely be produced single agents multiple agents collaborate processing given message. service role specific functionality, often encoded specific headers messages. Reliability management reliability individual requester provider agents scope architecture do not comment realization Web services. cases reliability level be enhanced provider entities adopting deployment platforms have strong management capabilities. Note platform manageability different perspective notion management identified Service Management manageability services peer business-partner perspective. Web Service Management Web service management management Web services set management capabilities enable monitoring, controlling, reporting service qualities service usage. Such service qualities include health qualities such availability number service instances) performance access latency failure rates), also accessibility endpoints). Facets service usage information be managed include frequency, duration, scope, functional extent, access authorization. Web service manageable set management operations support management capabilities. management capabilities realize monitoring, controlling reporting functions assistance management information model models various types service usage service quality information associated management Web service. Typical information types include request response counts, begin end timers, lifecycle states, entity identifiers senders, receivers, contexts, messages, etc.). provision management capabilities Web service become manageable, extent degree permissible management are defined management policies are associated Web service. Management policies therefore are used define obligations permissions managing Web service. Just Web service being managed needs have common service semantics are understood requester provider entities, Web service management also common management semantics, relation management policies management capabilities, be understood requester provider entities. Figure illustrateshow concepts service, policy capability defined architecture be applied management. Figure Management Concepts Relationships More detailed information Web services management available management documents were produced Management Task Force Working Group. Web Services EDI: Transaction Tracking basic assumptions many people make role Webservices be used functions similar thosepresently provided Electronic Data Interchange EDI well establishedtechnology, useful examine expectations current EDIusers have technology be used replacement.That do do now also expect newtechnology? most basic expectations concern security,message reliability function call security messagereliability are covered elsewhere document, section focus tracking. Something Wrong transaction awry reasonsother loss message security violations? ispossible, useful, automate safeguards protocol andapplication level, experience there virtuallylimitless variety ways business transactions fail. Informalinterviews current EDI practitioners have indicated inpractice EDI people actually do involved theissue finding actually happened transactions something gone wrong. example, such interaction start phonecall something haven't paid think have paid cases there often goodfaith desire sides figure happened complywith requirements transaction, information thatpeople are working differ coming common understandingcan take work. Need Tracking current EDI operations, many questions be answered inthese cases be handled automated fashion vendor theproprietary network used transactions. example, company invoice company B wasdelivered, vendor access records, probably centralrepository, respond, message was delivered company B'smailbox Dec have not yet downloaded message".Queries sort are relatively easy satisfy environmentbecause vendor control aspects communication. Web servicesscenario, transactions take place distributedenvironment, central authority, other means replace current automated queries EDI vendoror important tracking capability be lost. possibility be provide kind uniform tracking interface. basic requirement here companies are cooperating abusiness transaction find time status history thetransaction. Significant complexity added fact thatmultiple companies be involved. company initiate atransaction sending message B, process then involvemessages B C. cases interactions B andC be known opposed being part B's internal process opaque not immediately clear be handled querying B C, responding aquery B carry obligation query C andreturn results. presumably issue be ironedout creation specification(s) uniform interface. Examples Tracking illustrations, here are typical queries sendto B C. Web Services Usage Scenarios additional examples. B) Did receive process message M B) return copies messages associated Transaction T. B) return copies messages B given timerange. C) return messages associated transactions involvingA given time frame messages B C relatedto transactions involved). B) return copies messages B other companiesinvolved transaction transactions date range). course, cases, party performing query be authorized receive information. Current EDI practices automate queries; others mayinvolve manual processing. general, however, there are significantcost savings be realized automating much process aspossible. Requirements Effective Tracking order help automate tracking process, there are various requirements, ofwhich are probably achievable using current planned specificationsand others require new ones: uniform, interoperable interface tracking queries, so company Acan send standard query business partners. interfaceshould be associated functional Web services interfaces. example, such interfacemight be implemented part management interface. Standard identifiers transactions individual messages are necessary define queries. Note queriesinvolve identifiers participants transaction other senderand receiver particular message. are clearly aspects thisrequirement are related choreography domain. Policies controlling party authorized make trackingqueries B. be several variants such policies: e.g. acan query B messages directly B not messagesbetween B C associated transactions involving so Itmay be possible establish policies using mechanisms currentlyavailable development security policy domain, orthere be transactional aspects policies are notcurrently being considered. method establish trust relationships necessary implementthe policies Tracking URIs important connections Web services architecture Web architecture whole, common use URIs. URIs are important many aspects Web services, particularly worth noting potential role benefit indentifying tracking transactions Web services. simple example illustrate benefit, suppose URIs are used transaction identifiers. time new transaction initiated, new URI generated unambiguously identify transaction, much primary key database. However, database key only be unambiguous particular database, URI globally unambiguous, means be conveniently transmitted others loss confusion meaning. Furthermore, URI be dereferenceable: URI also location document dynamic query database), act convenient link determining status history transaction, provided user authorized access such information. mechanisms need ensure tracking URI be dereferenced proper authority privacy controls, use URIs largely orthogonal requirement.) potential value dual use URIs globally unambiguous identifiers universally dereferenceable links most fundamental important insights architecture Web. Web services architecture builds Web architecture, Web services leverage benefits clarity, simplicity, universality convenience use URI offers. not say Web services tracking be done using URIs way. Indeed, there are other ways tracking be performed, engineering design take many factors consideration. Rather, point illuminate fact Web services architecture based Web architecture, Web services have possibility taking advantage use URIs. Conclusions Requirements Analysis believe architecture substantially requirements defined Reqs], exception security privacy. architecture substantial material foundation addressing more work needed. Working Group wanted do more address was not able do so available resources. Value Work architecture conceptual foundation establishing interopable Web services. architecture number important abstractions interdependencies. Contributions work include following: coherent framework specific technologies be considered logical context facilitates work specification writers architects. consistent vocabulary, including authoritative definition service" received widespread acceptance industry Glossary]. OWL ontology Web services architecture concepts SOA distributed object architecture. architectural relationship Web Web services relationship Web services REST. gaps inconsistencies existing Web services specifications. role semantics need machine-processable semantics ontologies Web services Significant Unresolved Issues also issues list previously maintained Working Group.) difference MEP Choreography? Message Exchange Pattern be representation returned HTTP Web service URI? Service] URIs be used identify Web services components, rather QNames? Identifier] relationship privacy Web services technology needs clarification. Privacy Considerations] SOAP architecture introduce concept concept not represented WSDL logical WSDL documents define same service differently? email thread available http://lists.w3.org/Archives/Public/www-ws-desc/2003Dec/0045.html relationship conversations, correlations transactions choreography unclear needs more work. need consistent tracking mechanisms Web services. Web Services EDI: Transaction Tracking] Overview Web Services Specifications annotated list Web services specifications http://lists.w3.org/Archives/Public/www-ws-arch/2004Feb/0022.html) was produced independently members Working Group, Roger Cutler Paul Denning. Working Group useful list, opinions expressed therein are personal opinions authors do not represent consensus Working Group. B Overview Web Services Security Technologies section attempts provide non-exhaustive description current available work Web services security relevant requirements solutions presented Web Services Security. Note technologies build existing security technologies, are relatively new need be fully tested actual deployment scenarios. B.1 XML-Signature XML-Encryption XML signatures are designed use XML transactions. standard was jointly developed W3C IETF RFC standard schema capturing result digital signature operation applied arbitrary data processing. XML signatures add authentication, data integrity, support non-repudiation signed data. XML Signature ability sign only specific portions XML tree rather complete document. important single XML document need be signed multiple times single multiple parties. flexibility ensure integrity certain portions XML document, leaving open possibility other portions document change. Signature validation mandates data object was signed be accessible party interested transaction. XML signature generally indicate location original signed object. XML Encryption process encrypting data representing result XML. data be arbitrary data XML document), XML element, XML element content. result encrypting data XML Encryption element references cipher data. B.2 Web Services Security Developed OASIS, Web Services Security SOAP extension providing quality protection message integrity, message confidentiality, message authentication. WSS mechanisms be used accommodate wide variety security models encryption technologies. work general mechanism associating security tokens messages. specification not require specific type security token. designed support multiple security token formats. WSS encode binary security tokens. specification encode X.509 certificates Kerberos tickets. Additionally, also include opaque encrypted keys. WSS specification end end security framework support intermediary security processing. Message integrity provided using XML Signature conjunction security tokens ensure messages are transmitted modifications. integrity mechanisms support multiple signatures, possibly multiple actors. techniques are extensible such support additional signature formats. Message confidentiality granted using XML Encryption conjunction security tokens keep portions SOAP messages confidential. encryption mechanisms support operations multiple actors. B.3 XML Key Management Specification XKMS XML-based way managing Public Key Infrastructure system uses public-key cryptography encrypting, signing, authorizing verifying authenticity information Internet. protocols distributing registering public keys, suitable use conjunction proposed standard XML Signature XML Encryption. XKMS allow implementers outsource task key registration validation utility. simplify implementation actual work managing public private key pairs other PKI details done third party. XKMS trust utility works PKI system, passing information back forth Web service. trust utility work, Web service be kept simple. XKMS W3C specification. B.4 Security Assertion Markup Language SAML Extensible Markup Language standard supports Single Sign SAML user log once Web site conduct business affiliated separate Web sites. SAML be used business-to-business business-to-consumer transactions. are threes basic SAML components: assertions, protocol, binding. Assertions be types: authentication, attribute, authorization. Authentication assertion identity user. attribute assertion specific information user. authorization assertion user authorized do. protocol SAML request assertions. are several available binding SAML. are bindings define SAML message exchanges are mapped SOAP, HTTP, SMTP FTP others. Organization Advancement Structured Information Standards body developing SAML. B.5 XACML: Communicating Policy Information XACML Extensible Markup Language standard based technology, developed Organization Advancement Structured Information Standards writing access control polices disparate devices applications. XACML access control language request/response language let developers write policies determine users access network Web. XACML be used connect disparate access control policy engines. B.6 Identity Federation Liberty Alliance defining specifications dealing various aspects identity. phase work grouped categories: ID-FF, ID-WSF, ID-SIS. ID-FF Federation Framework) businesses organizations be affiliated circles trust trust relationships. ID-FF several normative specifications, turn make normative references SAML. ID-WSF Web Services Framework) set specifications creating, discovering, using, updating various aspects identities particular type web service known Identity Service. ID-WSF builds ID-FF. user register several Identity Services. prominent part ID-WSF discovery service locating Identity Service given user ID-SWF also Data Services Template. ID-WSF also defined draft specification approach negotiating authentication method using SOAP messages identify SASL mechanisms Note WS-Security specifically states establishing security context authentication mechanisms scope. ID-WSF fill void. However, WS-Security also Username Token Profile, be used authentication mechanism. Potentially, Liberty ID-WSF be used negotiate use WSS Username Token Profile authentication mechanism. Currently, WSS Username Token Profile not registered IANA's SASL Mechanisms collection. ID-SIS Service Instance Specifications) profiles particular types Identity Services. profiles conform ID-WSF Data Services Template. Liberty defined such profiles. Employee Profile query modify information associated Principal context employer. Personal Profile query modify identity information Principals C References Comp Note Distributed Computing, S. C. Kendall, J. Waldo, A. Wollrath, G. Wyant, November http://research.sun.com/techrep/1994/abstract-29.html.) Fielding Architectural Styles Design Network-based Software Architectures, PhD. Dissertation, R. Fielding, http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm.) OWLO OWL Ontology Web service architecture concepts, M. Paolucci, N. Srinivasan, K. Sycara http://www.w3.org/2004/02/wsa/.) RFC Uniform Resource Identifiers Generic Syntax, IETF RFC T. Berners-Lee, R. Fielding, L. Masinter, August http://ietf.org/rfc/rfc2396.txt.) SOAP Part SOAP Version Part Messaging Framework, W3C Recommendation, M. Gudgin, M. Hadley, N. Mendelsohn, J-J. Moreau, H. Nielsen, June http://www.w3.org/TR/2003/REC-soap12-part1-20030624/.) SOAP Part SOAP Version Part Adjuncts, W3C Recommendation, M. Gudgin, M. Hadley, N. Mendelsohn, J-J. Moreau, H. Nielsen, June http://www.w3.org/TR/2003/REC-soap12-part2-20030624/.) Web Arch Architecture World Wide Web, First Edition, W3C Working Draft, I. Jacobs, December http://www.w3.org/TR/2003/WD-webarch-20031209/.) WS Glossary Web Services Glossary, W3C Working Group Note, H. Haas, A.Brown, Febuary http://www.w3.org/TR/2004/NOTE-ws-gloss-20040211/.) WSA Reqs Web Services Architecture Requirements, W3C Working Group Note, D. Austin, A. Barbir, C. Ferris, S. Garg, February http://www.w3.org/TR/2004/NOTE-wsa-reqs-20040211.) WSAUS Web Services Architecture Usage Scenarios, W3C Working Group Note, H. H. Haas, D. Orchard, February http://www.w3.org/TR/2004/NOTE-ws-arch-scenarios-20040211/.) WSDL Part Web Services Description Language Version Part Core Language, W3C Working Draft, R. Chinnici, M. Gudgin, J-J. Moreau, J. Schlimmer, S. Weerawarana, November http://www.w3.org/TR/2003/WD-wsdl20-20031110/.) XML Extensible Markup Language Edition), W3C Recommendation, T. Bray, J. Paoli, C.M. Sperberg-McQueen, E. Maler. October http://www.w3.org/TR/2000/REC-xml-20001006.) XML Infoset XML Information Set, W3C Recommendation, J. Cowan, R. Tobin, October http://www.w3.org/TR/2001/REC-xml-infoset-20011024/.) D Acknowledgments document been produced Web Services Architecture Working Group chairs Working Group were Chris Ferris July Michael Champion July Dave Hollander July chairs also wish thank following alphabetic order) substantial contributions final documents: Daniel Austin, Mark Baker, Abbie Barbir, David Booth, Martin Chapman, Ugo Corda, Roger Cutler, Paul Denning, Zulah Eckert, Chris Ferris, Hugo Haas, Hao Yin-Leng Husband, Mark Jones, Heather Kreger, Michael Mahan, Frank McCabe, Eric Newcomer, David Orchard, Katia Sycara. Members Working Group are time writing, alphabetical order): Geoff Arnold Microsystems, Inc.), Mukund Balasubramanian Inc.), Mike Ballantyne Abbie Barbir Networks), David Booth Mike Brumbelow Doug Bunting Microsystems, Inc.), Greg Carpenter Tom Carroll W. Grainger, Inc.), Alex Cheng Michael Champion AG), Martin Chapman Corporation), Ugo Corda Technology Corporation), Roger Cutler Jonathan Dale Suresh Damodaran Commerce(SBC)), James Davenport Corporation), Paul Denning Corporation), Gerald Edgar Boeing Company), Shishir Garg Telecom), Hugo Haas Hao Thomson Corporation), Dave Hollander Yin-Leng Husband Company), Mario Jeckle Research Technology), Heather Kreger Sandeep Kumar Systems Inc), Hal Lockhart Michael Mahan Francis McCabe Michael Mealling Inc.), Jeff Mischkinsky Corporation), Eric Newcomer Mark Nottingham Systems), David Orchard Systems), Bijan Parsia Lab), Adinarayana Sakala Waqar Sadiq Igor Sedukhin Associates), Hans-Peter Steiert Research Technology), Katia Sycara Mellon University), Bryan Thompson Associates, Inc.), Sinisa Zimek Previous members Working Group were: Assaf Arkin Inc.), Daniel Austin W. Grainger, Inc.), Mark Baker Mobile, Inc. Planetfred, Inc.), Tom Bradford Inc.), Allen Brown Corporation), Dipto Chakravarty Technologies), Jun Chen Corp.), Alan Davies Technology Corporation), Glen Daniels Ayse Dilber Zulah Eckert Company), Colleen Evans Software), Chris Ferris Daniela Florescu Inc.), Sharad Garg Mark Hapner Microsystems, Inc.), Joseph Hui Island), Michael Hui Associates), Nigel Hutchison AG), Marcel Jemio Mark Jones Timothy Jones Inc.), Tom Jordahl Jim Knutson Steve Lind Mark Little Bob Lojek Inc.), Anne Thomas Manes Jens Meinkoehn Deutsche Telekom Innovationsgesellschaft), Nilo Mitra Don Mullen Software, Inc.), Himagiri Mukkamala Inc.), Joel Munter Henrik Frystyk Nielsen Corporation), Duane Nickull Global Technologies), David Noor Wave Software), Srinivas Pandrangi Kevin Perkins Mark Potts Blocks, Inc.), Fabio Riccardi Inc.), Don Robertson Darran Rolls Technologies, Inc.), Krishna Sankar Systems Inc), Jim Shur Wave Software), Patrick Thompson Wave Software), Steve Vinoski Scott Vorthmann Software, Inc.), Jim Webber Prasad Yendluri Inc.), Jin Yu Corp.) people have contributed discussions www-ws-arch public mailing list are also gratefully acknowledged. 