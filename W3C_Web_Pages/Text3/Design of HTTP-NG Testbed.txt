Design HTTP-NG Testbed NOTE-HTTP-NG-testbed-980710 Design HTTP-NG Testbed W3C Note July version: http://www.w3.org/TR/1998/NOTE-HTTP-NG-testbed-980710 Latest Released Version: http://www.w3.org/TR/NOTE-HTTP-NG-testbed Author: Daniel Veillard, <veillard@w3.org> Copyright W3C INRIA, Keio Rights Reserved. W3C liability, trademark, document use software licensing rules apply. Status Document note published theHTTP-NG Protocol DesignWorking Group describing goals, current state future developmentof HTTP-NG testbed.. document been produced part HTTP-NGActivity. work progress not imply endorsement consensus W3C members theHTTP-NG ProtocolDesign HTTP-NGWeb Characterization Working Groups. document subject change,check reference latest version. goal testbeds are evaluate feasibility theHTTP-NG model, itsperformances, extendibility, ability integrate HTTP-NGmodel existing Web architecture. Building higher level demonstrationexhibiting extra benefits HTTP-NG model also planned. suggestedexperiments are kinds: base testbed infrastructure Higher level functionalities demonstrations Transition strategy evaluation Available tools codebases Current status document expected architecture kind testbed,the main pieces code used, expected experiments way evaluatethe results. document part suite documents describing HTTP-NG designand prototype implementation: HTTP-NG Short- Longterm Goals, WD HTTP-NG Architectural Model, WD HTTP-NG Wire Protocol, WD Classic Web Interfaces HTTP-NG, WD MUX Protocol, WD Description HTTP-NG Testbed, Note send comments specification base testbed infrastructure purpose evaluate suitability expect HTTP-NG whenrunning basic HTTP interfaces using HTTP-NG protocol client sideand server. architecture client issuing HTTP-NG requests, aserver answering requests using realistic set Web pages. requestscan be generated SURGE URI generator tuned reflect variouskind common HTTP usage, hand coded reflect more specific uses. Theclient run shot" mode fetching page relatedinlined objects purpose analyzing complete trace session,or robot mode produce realistic load server. goal tobe able run exact same tests similar enviroment using theHTTP/1.1 protocol, order compare characteristics stacks. first goal base testbed experiment verify HTTP-NGspecification actually handle functionalities used HTTP users.The output Web Characterization Working Group be set scenariosexhibiting common HTTP practices. SURGE program then be usedto generate realistic set URI time stamps, turn beused HTTP-NG robot client requests HTTP-NG server. willalso need verify not so current practices top kludge usageof HTTP also be served be handled more specificfashion, generating URI hand modify client/server software(for example running protocol top HTTP). second goal series experiments analyze behaviorand performances HTTP-NG different qualities services. shouldat least try reproduce following commonly found network conditions: LAN: high bandwidth, low latencies. WAN: medium bandwidth, high latencies Dialup: low bandwidth, high latencies Satellite links wireless, etc. following metrics are interest: latency: time client start request, API level, availability beginning user level data throughput: be expressed using various different metrics, especially size user data transferred unit time shot tests number requests processed second robot mode. number packets used average size packets number operating system calls needed load induced machines least machines also be extremely useful toget dedicated piece hardware sitting client serverwhich simulate reproducible manner various network qualityof Services latency tweaking). also be done usingan extra dedicated machine tunneling software. Considering software, be worried actual performancesof Java, even things improve lot not so distant future. Currentlyis sound more reasonable do performance evaluation using C codebase, use ILU client server side. also tryto estimate induced cost genericity ILU being very generic systemsupporting lot protocols offering stubs various languages. Considering server side, need implement sample code sittingbehind stubs generated interfaces ILU stubber. thispurpose, ILU been integrated Apache server. result tests be compared withtheactual numbers obtained HTTP Getting half order magnitudefaster latencies LAN not be too difficult, have comparewith full range network Quality Service metrics checkthat least good points considering resultsa success. goal testbed test ability HTTP-NG specificationto support proxies caching. base testbed then be extended byadding proxy/cache HTTP-NG client server. analysis results configuration probably bit moredifficult establish, here are few points look performances term throughput CPU time usage. support expiration time, content negotiation feasibility differential updates Push schemes update set caches keep mind caching Web still infancy andthe HTTP-NG specification be able handle big changes Web cachingtechnology are likely occur few years. Extendibilityis key point HTTP-NG design proxying caching point view. Higher level functionalities testbed really want exhibit extra capabilities ofHTTP-NG HTTP time somewhat difficult predict howextended testbed be, simple core experiment definitelyneeded demonstrate concepts HTTP-NG. Here example based existing W3C testbeds: DOM Object Model) demonstration, Web client exports HTTP-NG internal documents structure associated interfaces defined DOM WG document. testbed demonstrate general interface Web based then display" metaphor shift cooperative environment relying distributed structured documents. DOM implementation top Amaya/Thot likely occur, adding support HTTP-NG be fairly trivial. provide good framework demonstration extra capabilities made possible HTTP-NG, here few suggestions: push demo, content inserted using DOM API server client. distributed authoring, based WebDav semantics achieved way direct remote access shared HTML white board etc... such framework, ideas build demos come easily, problem mainly related manpower needed achieve not capabilities underlying platform. server side, adding WebDav APIs top existing HTTP-NG server be good example extensibility mechanism provided HTTP-NG. Even full support WebDav functionalities, simple extension Jigsaw providing access Transition strategy testbed needed get proof HTTP-NG actually be deployedon large scale basis existing Web framework. show HTTP-NG actually be deployed even huge amount software isnot currently able support HTTP-NG protocol natively. experience ofthe migration HTTP HTTP showed far easier getthe server pool implement new features HTTP actuallyavailable most Web servers), client software, namely browsers. goal testbed prove actually possible deployHTTP-NG servers existing base HTTP/1.* clients implementingtranslation proxies. consist designing implementing HTTP HTTP-NG proxy. don't seek performances here cheapest implementationwill be best purely proof concept actualimplementation: test be conducted using several, commercial grade, HTTP clientsaccessing HTTP-NG server. Successful experiment not exhibit lossof usability client side. take care testing thecommon HTTP services, least GET, POST, PUT HEAD. Considering software, client side choice wide open, oneshould just tried most popular browsers editing tools, running a1.1 robot prove useful too stress proxy. performances isnot goal testbed, go cheapest solution termof development costs extending Jigsaw get HTTP-NGclient side way go. Once done, just need tweak existingproxy code Jigsaw have client server side using different stacks.The HTTP server be same base testbed, Jigsawif HTTP-NG server side implemented. Available tools codebases probably have different implementations HTTP-NG stack,possibly using different languages. Most existing software willrely written C Java, probably end up C/ILUand Java/Jigsaw implementations. Here are basic main pieces software be used buildthe HTTP-NG testbed:: ILU: Inter-Language Unification system multi-language object interfacesystem. object interfaces provided ILU hide implementation distinctionsbetween different languages, different address spaces, betweenoperating system types. ILU latest implementation HTTP-NG experimental code, awireformat, MUX channelmultiplexing implementation, glue needed link stubs generatedfrom Interface Definition Language currently mostadvanced HTTP-NG framework, now serve validate first versionsof drafts. Jigsaw: Jigsaw W3C's sample implementation HTTP, project anongoing W3C Activity Jigsaw full blown HTTP server entirely writtenin Java. HTTP-NG jigsaw code not advanced yet ILU implementation willprovide second piece code, allowing debug compatibility problems.Being written Java also mean different environment machine)and hence good test operating system portability. Moreover javacode access full featured testbed, Amaya Jigsaw server. Amaya: Amaya Web client acts browser authoring tool.It been designed primary purpose being testbed forexperimenting demonstrating new specifications extensions Webprotocols standards. experimental version Amaya embed Jigsaw Java HTTP stack, so possibleto get browser HTML editor using Java HTTP-NG code. proveuseful higher level functionalities demonstration, especially sincePICS andDOM support are being added Amaya. Apache: Apache most popular Web server, available freely sourcecode. modified version Apache embedding ILU library been producedfor Testbed. testing HTTP-NG stack full featuredWeb server solid framework tests, especially compareHTTP/1.1 HTTP-NG respective performances. Surge: SURGE URI Reference Generator) WWW workload generator whichis based analytical models WWW use. goal SURGE providea scalable framework server's perspective, makes documentrequests mimics set real users. various common Web access pattern result Web CharacterizationWorking Group be described SURGE analytical models, allowing producerealistic simulations actual Web traffic base testbed infrastructure. Current status current status ILU library core implementation ofHTTP-NG protocols, i.e. MUX protocol, wire encoding, basic HTTPinterfaces stubs. Other pieces software, namely Apache, Jigsaw, Surge,Amaya have been modified extent embed ILU library. Currentlythe base testbed mostly functional, more work needed testperformances, solve existing bottlenecks cleanup installation processbefore public release testbed. Advanced functionalities proxytesting extensibility showcase are still waiting more completespecifications upgrading corresponding tools. Here more detailed description current status piece ofsoftware: ILU support MUX, wire protocol, basic HTTP HTTP-NG interfaces, test implementation robot server. Apache ILU support integrated, server similar set pages Apache HTTP/1.1 implementation dynamically configurable ILU based protocol stack be HTTP HTTP-NG experimental stacks) using standard HTTP interfaces HEAD, POST). Amaya versions embedding ILU Java interpreter are available. Currently DOM API not stable enough testing already export Thot APIs ILU. Jigsaw experiments Jigsaw using ILU basic HTTP interface serving pages been conducted. latest releases Jigsaw provide specific extensions needed exporting resource using different protocol stacks, ease design HTTP-NG specific extensions. Jigsaw also provide HTTP/1.1 proxy implementation, best candidate test HTTP/1.1 <-> HTTP-NG proxy Surge version Surge been integrated ILU. various other small software pieces are also available. Most software base available CVS repository Amayaand Jigsaw available independently) intend make publicly availableduring continuous design phase. 