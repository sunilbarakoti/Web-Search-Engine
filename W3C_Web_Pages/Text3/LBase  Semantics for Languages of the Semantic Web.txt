LBase: Semantics Languages Semantic Web LBase: Semantics Languages Semantic Web W3C Working Group Note October version: http://www.w3.org/TR/2003/NOTE-lbase-20031010/ Latest version: http://www.w3.org/TR/lbase Previous version: http://www.w3.org/TR/2003/NOTE-lbase-20030905 Authors: R.V.Guha, IBM, < rguha@us.ibm.com> Patrick Hayes, IHMC < phayes@ihmc.us> Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark, document use software licensing rules apply. Abstract document presents framework specifying semantics languages Semantic Web. languages RDF OWL are currently various stages development expect others be developed future. framework intended provide framework specifying semantics languages uniform coherent way. strategy translate various languages common language thereby providing single coherent model theory. describe mechanism providing precise semantics Semantic Web Languages SWELs now purpose define clearly consequences allowed inferences constructs languages. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. Publication Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. document results discussions RDF Core Working Group concerning formalization RDF RDF-based languages. RDF Core Working Group part W3C Semantic Web Activity. group's goals requirements are discussed RDF Core Working Group charter. include requirements RDF Core group take account various formalizations RDF have been proposed publication RDF Model Syntax Recommendation. group encouraged make use formal techniques implementation-led test cases work. RDF schema system provide extensibility mechanism allow future work example Web Ontology logic-based Rule languages) provide richer facilities. document motivated requirements. not present RDF Core WG design Semantic Web layering. Rather, documents technique RDF Core WG are using discussions RDF Semantics specification. RDF Core WG solicit feedback other Working Groups RDF implementor community wider applicability technique. Note use abbreviation Lbase prior use MIT/LCS DAML project. conformance W3C policy requirements, known patent IPR constraints associated Note are detailed RDF Core Working Group Patent Disclosure page. Review comments document are invited be sent public mailing list www-rdf-comments@w3.org. archive comments available http://lists.w3.org/Archives/Public/www-rdf-comments/. Discussion document invited www-rdf-logic@w3.org list RDF Interest Group archives). Table Contents Model-theoretic semantics Outline Approach Consistency Lbase Syntax Interpretations Axiom Schemas Entailment Using Lbase Relation Inadequacies Acknowledgements References Change Log Model-theoretic semantics model-theoretic semantics language language minimal conditions world satisfy order assign appropriate meaning expression language. particular world called interpretation, so model theory be better called theory'. idea provide mathematical account properties such interpretation have, making few assumptions possible actual nature intrinsic structure. Model theory tries be metaphysically ontologically neutral. typically couched language set theory simply normal language mathematics example, semantics names denote things set IR called use set-theoretic language here not supposed imply things universe are set-theoretic nature. chief utility such semantic theory not suggest particular processing model, provide deep analysis nature things being described language, rather provide technical tool analyze semantic properties proposed operations language; particular, provide way determine preserve meaning. proposed inference rule, example, be checked see valid respect model theory, i.e. conclusions are always true interpretation makes antecedents true. note word often used rather different sense, eg model', refer computational system data structures kind. avoid misunderstanding, emphasise interpretations referred model theory are not, general, intended be thought things be computed manipulated computers. Outline Approach be many Semantic Web languages, most be built top more basic Semantic Web language(s). important layering be clean simple, not just human understandability, also enable construction robust semantic web agents use languages. emerging current practice SWELs be defined terms own model theory, layering top model theories languages are layered having model theory clearly desireable, even essential, SWEL, direct-construction approach several problems. range model theories, own notion consequence entailment. expertise logic make sure model theories align properly, model-theoretic alignment not always sit naturally interoperability requirements. Experience date OWL standard development time writing W3C Webont working group) shows quite difficult problems arise layering model theories extensions RDF layer semantic web. Moreover, strategy places very high burden layer, difficult anticipate semantic demands be made future higher layers, expectations different development user communities conflict. Further, believe melange model theories adversely impact developers building agents implement proof systems layers, proof systems likely be different layer, resulting need micro-manage small semantic variations various dialects sub-languages distinctions various dialects OWL). document, use alternative approach defining semantics different SWELs fashion interoperability. first define basic language Lbase expressive enough state content currently proposed web languages, fixed, clear model-theoretic semantics. Then, semantics SWEL Li defined specifying expressions Li map equivalent expressions Lbase, providing axioms written Lbase constrain intended meanings SWEL special vocabulary. Lbase meaning expression SWEL language then be determined mapping Lbase adding appropriate language axioms, there are intended result model theory Lbase model theory Semantic Web Languages, even languages are different. makes possible use single inference mechanism work different languages. possible exploit restrictions languages provide better performance, existence reference proof system likely be utility developers. also meanings expressions different SWELs be compared combined, very difficult have distinct model theories. idea providing semantics SWELs translating logic not new example Marchiolri&Saarela, Fikes&McGuinness] plan adopt somewhat different style previous semantics', have usually operated mapping RDF triples instances single three-place predicate. propose rather use logical form target language explication intended meaning SWEL, rather simply axiomatic description meaning, so RDF classes translate unary predicates, RDF properties binary relations, relation rdf:type translates application predicate argument, list-valued properties OWL DAML be translated n-ary variadic relations. syntax semantics Lbase have been designed kind translation mind. intent model theory Lbase be used spirit model theory not programming language, i.e., relations Li correspond relations Lbase, variables correspond variables so important note Lbase not being proposed SWEL. tool specifying semantics different SWELs. syntax Lbase described here not intended be accessible machine processing; such proposal be considered be proposal more expressive SWEL. Consistency using well understood logic first order logic core Lbase, providing mutually consistent mappings different SWELs Lbase, ensure content expressed several SWELs be combined consistently, avoiding paradoxes other problems. Mapping type/class language predicate/application language also set-theoretical paradoxes do not arise. use technique not guarantee mappings syntax different SWELs always be consistent, provide general framework detecting identifying potential inconsistencies. also important axioms defining vocabulary items introduced SWEL are internally consistent. first-order logic hence Lbase) only semi-decideable, are confident be routine construct Lbase interpretations establish relevant consistencies SWELs currently contemplated. general case, future efforts have rely certifications particular automated provers stating weren't able find inconsistency certain stated levels effort. availablity powerful inference engines first-order logic course relevant here. Lbase document, use version first order logic equality Lbase. fairly strict monotonic discipline language, so express local default preferences several other commonly-used non-monotonic constructs. expect Semantic Web encompass more understanding Semantic Web need replace Lbase more expressive logics. However, expect first order logic be proper subset such systems hence be able smoothly transition more expressive Lbase languages future. note computational advantages claimed various sublanguages first-order logic, such description logics, logical programming languages frame languages, are irrelevant purposes using Lbase semantic specification language. use First Order Logic suitable minor changes account use referring expressions URIs) Web, few simple extensions improve utility intended purposes. Names variables first-order logic based set atomic terms, are used basic referring expressions syntax. include names, refer entities domain, special names, variables. Lbase special class urirefs, defined be URI reference sense Urirefs are used refer individuals relations individuals. name be string unicode characters not starting characters containing whitespace characters, string unicode characters enclosed symbols <-> enclosed style provided allow names otherwise violate Lbase syntactic conventions; case understood actual name enclosed string. example, name characters, including space) be written Lbase <'<br Lbase various collections special names fixed meanings defined other specifications Lbase specification). assumption be defined collections Lbase axioms, so imposing intended meanings special names go strict first-order expressiveness. mathematical terms, allow sets names refer elements certain fixed algebras, even algebra characteristic first-order description.) such set names associated predicate true things denoted names set. present, assume categories such fixed names: numerals quoted strings, associated predicate names respectively. expect other categories special names be introduced handle, eg. XML structures. Numerals are defined be strings characters are interpreted decimal numerals usual way. arithmetic not first-order definable, first most obvious place Lbase first-order expressiveness. Quoted strings are arbitrary character sequences enclosed quotation marks, are interpreted denoting string quotation marks. avoid ambiguity, single quote marks strings are prefixed backslash character acts escape character, so string Double quote marks have special interpretation. associated predicate names NatNumber, String Relation are considered be special names. variable non-white-space character string starting character characters are considered be punctuation symbols. categories punctuation, whitespace, names, special names variables are exclusive such string be classified examining first character. not strictly necessary useful convention. Lbase language defined respect vocabulary, set non-special names. require Lbase vocabulary contain urirefs, other expressions are allowed. require Lbase interpretation provide meaning special name, interpretations are fixed, so special names are not counted part vocabulary.) are several aspects meaning expressions semantic web are not yet treated semantics; particular, URIs simple names, ignoring aspects meaning encoded particular URI forms not provide analysis time-varying data changes URI denotations. model theory also nothing say HTTP uri such World Wide Web Consortium HTML page accessible URI web site accessible URI. complexities be addressed future extensions Lbase; general, expect Lbase be extended notationally adding axioms order track future standardization efforts. do not take position here way urirefs be composed other expressions, e.g. relative URIs Qnames; model theory simply such lexical issues have been resolved way globally coherent, so single uriref be taken have same meaning Similarly, model theory given here special provision tracking temporal changes. implicitly, urirefs have same meaning occur. provide adequate semantics be sensitive temporal changes research problem scope document.. Lbase Syntax Even exact syntax chosen Lbase not important, do need syntax specification. follow same general conventions used most standard presentations first-order logic, generalization proven useful. assume there are sets names special names) together constitute vocabulary: individual names, relation names, function names, function name associated arity, non-negative integer. particular vocabulary sets not be disjoint. Expressions Lbase strictly, Lbase expressions particular vocabulary) are then constructed recursively term name special name variable, else form n-ary function name t1,...,tn are terms. formula atomic boolean quantified, atomic formula form t1 t2 are terms, else form R(t1,...,tn) R relation name variable t1,...,tn are terms; boolean formula forms W2 Wn) W2 Wn) W2) iff W2) W1) W1, are formulae; quantified formula forms W) W) are variables W formula. subexpression just quantifier variable list quantifier. occurrence variable W said be bound quantified formula nearest quantifer occurrence variable variable list, there otherwise said be free formula.) Finally, Lbase knowledge base set formulae. Formulae are also called formulae' simply general, surplus brackets be omitted expressions syntactic ambiguity arise. comments be order. only parts definition are way nonstandard are allowing names', was discussed earlier; allowing variables occur relation position, seem be odds claim Lbase first-order discuss further not assigning fixed arity relation names. last useful generalization makes substantial changes usual semantic properties first-order logic, translation process SWEL syntactic constructs. computational properties such relations' are quite complex, Lbase not being proposed language computational use.) Interpretations Satisfaction following definition interpretation couched mathematical language, amounts intuitively interpretation just enough information possible way world be world' order fix truth-value false) Lbase well formed formula world. specifying uriref, supposed be name also, function symbol, values function choice arguments; further, relation symbol, sequences things relation just enough information determine truth-values atomic formulas; then together set recursive rules, enough assign truth value Lbase formula. specifying following convenient define use standard definitions. relation set S set finite sequences members S. R relation elements R have same length n, then R said have arity n, be n-ary relation. Not relation need have arity. R relation S property sequence <s1,...,sn> members S, there exactly element R form <s0, s1, sn>, then R n-ary function; s0 value function arguments s1, n-ary function relation, convention, function value first argument relation, so n-ary function means same y = conventional textbook treatment first-order interpretations relation symbols denote relations. modify slightly require relation symbols denote entities associated relation, called relational extension, sometimes abuse terminology referring entities relational extensions relations. device Lbase freedom quantify relations be familiar higher-order logic, remaining strictly first-order language semantic metatheoretic properties. use special name Relation denote property having relational extension. Let VV be set variables, NN be set special names. assume there globally fixed mapping SN elements NN domain ISN consisting character strings integers). exact specification SN given numerals usual reading decimal numeral denote natural number quoted strings dequotation rules described earlier. interpretation vocabulary V then structure defined set ID, called domain universe mapping union VV) ID; mapping IEXT IR, subset ID, relation ID+ISN set tuples elements ID+ISN). satisfies following conditions: n-ary function symbol V, IEXT(I(f)) n-ary function ID+ISN. IEXT(I(NatNum)) = n natural number} IEXT(I(String)) = s character string} IEXT(I(Relation)) = IR interpretation then value other Lbase expression E according following rules: E then name variable special name SN(E) term value IEXT(I(f)) arguments equation true otherwise false formula form R(t1,...,t2) true IEXT(I(R)) sequence <I(t1),...,I(tn)>, otherwise false Wn) true i=1 n, otherwise false Wn) false i=1 n, otherwise true <=> W2) true otherwise false => W2) false otherwise true not W true otherwise false B mapping set W variables ID, then define be interpretation variable W. E then W) false mapping B ID, otherwise true W) true mapping B ID, otherwise false Finally, knowledge base considered be true only elements are true, be conjunction elements. Intuitively, meaning expression containing free variables not well specified formally specified, interpretation free variables arbitrary.) resolve confusion, impose familiar convention free variables sentence knowledge base are considered be universally quantified top level expression occur. insist variables knowledge-base expression be bound quantifier expression; force implicit quantification be made explicit.) definitions are quite conventional. only unusual features are incorporation special-name values domain, use explicit extension mapping, fact relations are not required have fixed arity, description functions class relations. explicit extension mapping technical device allow relations be applied other relations going first-order expressivity. note same name be used individual relation position, sense relations hence functions) status, not incorporate comprehension principles make logical assumptions relations are domain. Notice special semantic conditions were invoked treat variables relation position differently other variables. particular, language makes comprehension assumptions resulting language first-order usual senses: compact satisfies downward Skolem-Lowenheim property, example, usual machine-oriented inference processes still apply, particular unification algorithm. obtain translation more conventional syntax re-writing atomic sentence using rule form R(t1,...,tn) => t1,...,tn), relation indicating relation R true remaining arguments. presentation given here need artificial translation, existence first-order properties language. translate conventional first-order syntax Lbase form, simply qualify quantifiers range only non-Relations. issue further discussed Menzel ref). Allowing relations fixed arity technical convenience Lbase accept more natural translations SWELs. makes significant difference metatheory formalism compared fixed-arity sytnax relation given arity. Treating functions particular kind relation use function symbol relation position fixed arity, more arity function); translations be specified more efficiently. noted earlier, incorporating special name interpretations particular, integers) domain Lbase strict first-order compliance, domains have natural recursive definitions are common use computer science. Mechanical inference systems typically have special-purpose reasoners effectively test satisfiability domains. Notice incorporation special domains interpretation not automatically incorporate truths full theory such structures Lbase; example, presence integers semantic domain not require truths arithmetic be valid provable Lbase. Axiom schemes axiom scheme stands infinite set Lbase sentences having similar allow schemes are Lbase formulae expressions form ie expressions same syntactic category separated dots, be used, such schema intended stand infinite knowledge base containing Lbase formulae gotten substituting actual sequence appropriate expressions variables formulae) expression shown, call Lbase instances scheme. have fact been using convention already, informally; now are making formal.) example, following Lbase scheme: Q(a, expression first quantifier actual scheme expression, not conventional abbreviation following Lbase instances, others: Q(a, Q(a,?y,?yy,?z))) Axiom schemes do not take language first-order, instances are first-order sentences language compact, so Lbase sentence infinite set instances axiom scheme, then fact be entailed finite set instances scheme. note Lbase schemes be understood only syntactic abbreviations sets Lbase sentences stating translation rules specifying axiom sets. Lbase expressions are required be finite, not think Lbase schemes being sentences; example making assertions, being instances subexpressions Lbase sentences, being posed theorems be proved. Such usages go first-order Lbase framework. amount convention using infinitary logic: see Menzel] details.) kind restricted use schemes' familiar many textbook presentations logic. Entailment Following conventional terminology, say satisfies E set S expressions E interpretation satisfies member S also satisfies E. set S schemes, are understood stand infinite sets instances. Entailment key idea model-theoretic semantics real-world applications. noted earlier, making assertion amounts claiming world interpretation value true assertion. B, then interpretation makes true also makes B true, so assertion already same assertion B; say meaning B somehow contained subsumed A. B entail other, then same thing, sense asserting makes same claim world. interest observation most vividly B are different expressions, then relation entailment exactly appropriate semantic licence justify application inferring generating other. notions satisfaction, entailment validity, formal semantics rigorous definition notion be related directly computable methods determining not meaning preserved transformation representation knowledge. process technique constructs well formed formula Foutput other Finput said be valid Finput Foutput, otherwise invalid. Note being invalid process not mean conclusion false, being valid not guarantee truth. However, validity best guarantee assertional language offer: given true inputs, never draw false conclusion Using Lbase define semantics SWEL Imagine have Semantic Web Language Li. provide semantics Li using Lbase, provide: procedure translating expressions Li expressions Lbase. process also consequently define subset Lbase used Li. set vocabulary items introduced Li set axioms axiom schemas Lbase Lbase schema) capture intended meanings terms Given set expressions G Li, apply procedure obtain set equivalent well formed formulae Lbase. then conjoin axioms associated vocabulary introduced Li other language Li layered). there are associated axiom schemata, appropriately instantiate conjoin axioms. resulting set, referred axiomatic equivalent G. are several different adopt writing axiomatic equivalents. most conservative amounts simply transliterating basic vocabulary SWEL Lbase syntactic form, then relying axioms determine meaning. cases axioms amount definition vocabulary item, however, be shortened translating SWEL vocabulary defined form directly, resulting simpler translation. example, giving axiomatic equivalent OWL-DL, meaning rdfs:subClassOf be captured adequately translating directly form logical implication: rdfs:subClassOf bbb =(translates bbb(?x) direct translation axiomatic equivalent altogether, however, so makes impossible express other RDFS truths rdfs:subClassOf property. be acceptable were concerned only OWL-DL, syntactic restriction such propositions; not acceptable wish relate different SWELs primary goal here. therefore focus style translation burden expressing meaning SWEL vocabulary largely axioms. illustrative example, give following table sketch axiomatic equivalent RDF graphs using RDF(S) OWL vocabularies, form translation N-triples. Note, not be referred accurate normative semantic description. RDF expression E Lbase expression TR[E] plain literal internal occurrences prefixed plain literal term pair('sss','ttt') typed literal term LiteralValueOf('sss',TR[ddd]) RDF container membership property name form rdf:_nnn rdf-member(nnn) other URI reference <aaa> blank node variable distinct variable blank node) triple rdf:type bbb TR[bbb](TR[aaa]) rdfs:Class(TR[bbb]) other triple bbb ccc TR[bbb](TR[aaa] TR[ccc]) rdf:Property(TR[bbb]) RDF graph existential closure conjunction translations triples graph. set RDF graphs conjunction translations graphs. RDF axioms rdf:type(?x rdf:Property(rdf:type) rdf:Property(rdf:subject) rdf:Property(rdf:predicate) rdf:Property(rdf:object) rdf:Property(rdf:first) rdf:Property(rdf:rest) rdf:Property(rdf:value) rdf:List(rdf:nil) NatNumber(?x) rdf:Property(rdf-member(?x)) pair(?x iff uniqueness pairs, required graph syntax rules. RDFS axioms rdfs:Resource(?x) rdfs:Class(?y) iff rdf:type(?x rdfs:range(?x rdfs:domain(?x rdfs:subClassOf(?x rdfs:Class(?y) rdfs:Class(?x) rdfs:subClassOf(?x rdfs:subClassOf(?x rdfs:Resource) rdfs:subClassOf(?x rdfs:subClassOf(?y rdfs:subClassOf(?x rdfs:subPropertyOf(?x,?y) rdf:Property(?y) rdf:Property(?x) rdfs:subPropertyOf(?x rdfs:subPropertyOf(?x rdfs:subPropertyOf(?y rdfs:subPropertyOf(?x rdfs:ContainerMembershipProperty(?x) rdfs:subPropertyOf(?x rdfs:member) rdf:XMLLiteral(?x) rdfs:Literal(?x) String(?y) rdfs:Literal(?y) LanguageTag(?y)) rdfs:Literal(pair(?x,?y)) rdfs:Datatype(?x) rdfs:Literal(?y) NatNumber(?x) rdfs:domain(rdf-member(?x) rdfs:Resource) rdfs:range(rdf-member(?x) rdfs:Resource) rdfs:Class(rdfs:Resource) rdfs:Class(rdf:Property) rdfs:Class(rdfs:Class) rdfs:Class(rdfs:Datatype) rdfs:Class(rdf:Seq) rdfs:Class(rdf:Bag) rdfs:Class(rdf:Alt) rdfs:Class(rdfs:Container) rdfs:Class(rdf:List) rdfs:Class(rdfs:ContainerMembershipProperty) rdfs:Class(rdf:Statement) rdf:Property(rdfs:domain) rdf:Property(rdfs:range) rdf:Property(rdfs:subClassOf) rdf:Property(rdfs:subPropertyOf) rdf:Property(rdfs:comment) rdf:Property(rdfs:seeAlso) rdf:Property(rdfs:isDefinedBy) rdf:Property(rdfs:label) rest axioms are direct transcriptions RDFS axiomatic triples, using RDF Lbase transcription rules: rdfs:domain(rdf:type rdfs:Resource) rdfs:domain(rdfs:domain rdf:Property) rdfs:domain(rdfs:range rdf:Property) rdfs:domain(rdfs:subPropertyOf,rdf:Property) rdfs:domain(rdfs:subClassOf rdfs:Class) rdfs:domain(rdf:subject rdf:Statement) rdfs:domain(rdf:predicate rdf:Statement) rdfs:domain(rdf:object rdf:Statement) rdfs:domain(rdf:member rdfs:Resource) rdfs:domain(rdf:first rdf:List) rdfs:domain(rdf:rest rdf:List) rdfs:domain(rdfs:seeAlso rdfs:Resource) rdfs:domain(rdfs:isDefinedBy rdfs:Resource) rdfs:domain(rdfs:comment rdfs:Resource) rdfs:domain(rdfs:label rdfs:Resource) rdfs:domain(rdfs:value rdfs:Resource) rdfs:range(rdf:type rdfs:Class) rdfs:range(rdfs:domain rdfs:Class) rdfs:range(rdfs:range rdfs:Class) rdfs:range(rdfs:subPropertyOf rdf:Property) rdfs:range(rdfs:subClassOf rdfs:Class) rdfs:range(rdf:subject rdfs:Resource) rdfs:range(rdf:predicate rdfs:Resource) rdfs:range(rdf:object rdfs:Resource) rdfs:range(rdf:member rdfs:Resource) rdfs:range(rdf:first rdfs:Resource) rdfs:range(rdf:rest rdf:List) rdfs:range(rdfs:seeAlso rdfs:Resource) rdfs:range(rdfs:isDefinedBy rdfs:Resource) rdfs:range(rdfs:comment rdfs:Literal) rdfs:range(rdfs:label rdfs:Literal) rdfs:range(rdfs:value rdfs:Resource) rdfs:subClassOf(rdf:Alt rdfs:Container) rdfs:subClassOf(rdf:Bag rdfs:Container) rdfs:subClassOf(rdf:Seq rdfs:Container) rdfs:subClassOf(rdfs:ContainerMembershipProperty rdf:Property) rdfs:subPropertyOf(rdfs:isDefinedBy rdfs:seeAlso) rdfs:Datatype(rdf:XMLLiteral) rdfs:subClassOf(rdfs:Datatype rdfs:Class) RDF Datatyped Literal axioms rdfs:Literal(LiteralValueOf(?x iff rdfs:Datatype(?y) rdfs:Class(?y) rdfs:Datatype(?y) addition, datatype named ddd needs datatype theory consisting axioms following form, equivalent: rdfs:Datatype(ddd) ddd(LiteralValueOf('aaa' ddd)) legal lexical form datatype not ddd(LiteralValueOf('aaa' ddd)) string not legal lexical form datatype. there notational framework added Lbase write terms denoting members value space datatype, then database theory also contain true axioms form LiteralValueOf('aaa' ddd) = square brackets indicate presence appropriate term value. example, using decimal numerals denote integers, be equations form LiteralValueOf('345' xsd:integer) = Such axioms, equivalents, be needed order connect translation other theories used more conventional notations. cases, datatype theory be summarized finite number axioms. example, datatype theory xsd:string be stated single axiom: iff xsd:string(?x) LiteralValueOf(?x xsd:string) = Relation kinds semantics Given SWEL Li, provide semantics providing model mapping Lbase utilizing model theory associated Lbase. Given set expressions G Li axiomatic equivalent Lbase Lbase interpretation Li interpetation G. natural Li interpretation own model theory general be simpler Lbase interpretation: example, interpretations RDF not make use universal quantification, negation disjunction rules, underlying structures need have functional relations. general, therefore, most semantics Li be obtained simply ignoring aspects Lbase interpretation category-theoretic terms, be result applying appropriate forgetful functor Lbase structure.) Nevertheless, extra structure harmless, not affect entailment Li considered isolation; be useful, natural way define consistency several SWELs same time, define entailment KBs express content different, even mixed, SWELs simultaneously. reasons propose adopt convention appropriate notion satisfaction SWEL expression G fact defined relative Lbase interpretation following diagram relation Li, Lbase, G interpretations G according different model theories. important point note diagram Li Lbase mapping model theory Li are done consistently, then G satisfying interpretation be equivalent. Li axioms included Lbase equivalent G be sufficient guarantee satisfying interpretation Lbase model theory Lbase equivalent G contain substructure satisfying interpretation G according Li model theory, vice versa. utility framework combining assertions several different SWELs illustrated following diagram, copies previous diagram. Note G1+G2 equivalent case axioms languages, ensuring done properly) Lbase interpretation contain appropriate substructures sentences. translations Lbase are appropriately defined sufficient level detail, then even tighter semantic integration be achieved, expressions vocabulary several SWELs be given coherent interpretation satisfies semantic conditions languages. be possible only SWELS have particularly close relationship, however. particular case SWEL used G2) layered top used G1), interpretations G2 be subset G1 Inadequacies Lbase Lbase described several deficiencies base system Semantic Web. particular, not capture social meaning URIs. merely opaque symbols. future web logic go further capturing intention. moment, Lbase not provide facilities related representation time change. However, many existing techniques temporal representation use languages similar Lbase expressive power, are optimistic Lbase provide useful framework experiment temporal ontologies Web use. turn aspects want represent semantic web more be expressed using Lbase described document. particular, Lbase not provide mechanism expressing propositional attitudes true second order constructs. future version Lbase, Lbase proper subset, have include such facilities. Acknowledgements thank members RDF Core working group, Tim Berners-Lee, Richard Fikes, Sandro Hawke, Jim Hendler Peter Patel-Schneider comments various versions document. References Mathematical Introduction Logic, H.B.Enderton, 2nd edition, Harcourt/Academic Press. McGuinness] R. Fikes, D. L. McGuinness, Axiomatic Semantics RDF, RDF Schema, DAML+OIL, KSL Technical Report KSL-01-01, Menzel] P. Hayes, C. Menzel, Semantics Knowledge Interchange Format August Workshop IEEE Standard Upper Ontology) Web Ontology Language Reference Version Mike Dean, Dan Connolly, Frank van Harmelen, James Hendler, Ian Horrocks, Deborah L. McGuinness, Peter F. Patel-Schneider, Lynn Andrea Stein. W3C Working Draft November version http://www.w3.org/TR/2002/WD-owl-ref-20021112/ Latest version available http://www.w3.org/TR/owl-ref/. Saarela] M. Marchioi, J. Saarela, Query Metadata Logic = Metalog, Resource Description Framework Concepts Abstract Syntax, Klyne G., Carroll J. World Wide Web Consortium Working Draft, October progress). version http://www.w3.org/TR/2003/WD-rdf-concepts-20031010/. latest version http://www.w3.org/TR/rdf-concepts/ RDF/XML Syntax Specification Beckett D. World Wide Web Consortium Working Draft, October progress). version http://www.w3.org/TR/2003/WD-rdf-syntax-grammar-20031010/. latest version http://www.w3.org/TR/rdf-syntax-grammar/ RDF Semantics, Hayes P. World Wide Web Consortium Working Draft, October progress). version http://www.w3.org/TR/2003/WD-rdf-mt-20031010/. latest version http://www.w3.org/TR/rdf-mt/ RDF Test Cases, Grant J., Beckett D. World Wide Web Consortium Working Draft, September progress). version http://www.w3.org/TR/2003/WD-rdf-testcases-20031010/. latest version http://www.w3.org/TR/rdf-testcases/. Resource Description Framework Model Syntax, W3C Recommendation, February http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/ RDF Primer, Manola F., Miller E. World Wide Web Consortium Working Draft, September progress). version http://www.w3.org/TR/2003/WD-rdf-primer-20031010/. latest version http://www.w3.org/TR/rdf-primer/ RDF Vocabulary Description Language RDF Schema, Brickley D., Guha R.V. World Wide Web Consortium, November Consortium Working Draft, October progress). version http://www.w3.org/TR/2003/WD-rdf-schema-20031010/. latest version http://www.w3.org/TR/rdf-schema/ T. Berners-Lee, Fielding Masinter, RFC Uniform Resource Identifiers Generic Syntax, August Web Ontology Working Group T. Bray, J. Paoli, C.M. Sperberg.McQueen, E. Maler. Extensible Markup Language Edition), W3C Recommendation October Change Log version January, definition quoted strings been modified simplify character escaping; syntax allowing names be enclosed < > introduced; category special names deleted; was underspecifed not necessary. Several minor editorial changes have been made document numbers corrected, etc.) example translation RDF/RDFS been updated so conform description given RDF Semantics document, discussion axiomatic equivalents expanded. Thanks Peter Patel-Schneider critical comments earlier version. 