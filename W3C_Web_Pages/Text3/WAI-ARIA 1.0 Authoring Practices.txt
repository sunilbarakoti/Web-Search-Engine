WAI-ARIA Authoring Practices WAI-ARIA Authoring Practices author's guide understanding implementing Accessible Rich Internet Applications W3C Working Draft March version: http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/ Latest version: http://www.w3.org/TR/wai-aria-practices/ Previous version: http://www.w3.org/TR/2010/WD-wai-aria-practices-20100916/ Editors: Joseph Scheuhammer, Invited Expert Michael Cooper, W3C Previous Editors: Lisa Pappas, Society Technical Communication Richard Schwerdtfeger, IBM Copyright Â© W3CÂ® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract document readers understanding use WAI-ARIA create accessible rich internet applications. considerations not be evident most authors WAI-ARIA specification alone approaches make widgets, navigation, behaviors accessible using WAI-ARIA roles, states, properties. document directed primarily Web application developers, guidance also useful user agent assistive technology developers. document part WAI-ARIA suite described WAI-ARIA Overview. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index http://www.w3.org/TR/. Public Working Draft Protocols Formats Working Group Web Accessibility Initiative. supports Accessible Rich Internet Applications specification, providing detailed advice examples be appropriate technical specification are important understand specification. version changes made response public comments received previous version issues identified Working Group course general work WAI-ARIA. snapshot being published bring public Working Draft up date important improvements prior publication, not address issues known date. history changes WAI-ARIA Authoring Practices available. Refer summary actions made response comments previous draft issue disposition report previous draft. Feedback information provided here essential ultimate success Rich Internet Applications afford full access information operations. PFWG particular: clear create accessible Rich Internet Applications? usage roles, states, properties clear? Are various types rich Web content covered? Are considerations use WAI-ARIA sufficiently explained? relationship document WAI-ARIA specification clear? Are design patterns clear? Start instructions commenting page submit comments send email public-pfwg-comments@w3.org archive). Comments be made April In-progress updates document be viewed publicly visible editors' draft. Publication Working Draft not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document other work progress. document was produced group operating February W3C Patent Policy. group not expect document become W3C Recommendation. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. disclosure obligations Participants group are described charter. Table Contents Abstract Status Document Introduction General Steps Building Accessible Widget WAI-ARIA Keyboard Structural Navigation Providing Keyboard Navigation Widgets WAI-ARIA Keyboard Bindings Behaviors Keyboard Navigation Widgets Keyboard Navigation Widgets Keyboard Shortcuts Widgets Example Keyboard Operation: Radio Group/Radio Other Widget Authoring Practices Providing Keyboard Focus Using Tabindex Manage Focus Widgets Using activedescendant Manage Focus Widget Children Managing Visual Focus tabindex Alone Managing Focus Scroll Managing Perception Dual Focus Author-Defined Keyboard Short-Cuts Mnemonics Providing Navigable Structure Web Pages Making Dialog Modal Trapping Focus Relationships Labeling Describing Labeling Describing Owning Controlling Relationship Â Using Reusable Content Controls Relationship Changing Reading Flow Popups drop-downs Managing Dynamic Changes Managing Content Presentational Changes Implementing Live Regions 5.2.1. Live Region Properties Use Them Choosing Special Case Live Regions Presentation Role Rationale Inheritance Presentation Parent Element's Children Overriding Presentation Form Properties Math Drag-and-Drop Support States Properties, Assistive Technologies Design Patterns Reusable Component Libraries Appendices References Normative References Informative References Acknowledgments Participants active PFWG time publication Other previously active PFWG participants other contributors Accessible Rich Internet Applications specification Enabling funders Introduction section informative. WAI-ARIA Authoring Practices Guide intended provide readers understanding use WAI-ARIA create accessible Rich Internet Application. explained WAI-ARIA Primer, accessibility deficiencies today's markup render rich internet applications unusable people use assistive technologies rely keyboard navigation. W3C Web Accessibility Initiative's Protocols Formats working group plans address deficiencies several W3C standards efforts, focus WAI-ARIA specifications. introduction WAI-ARIA, see Accessible Rich Internet Applications Suite Overview. WAI-ARIA Authoring Practices Guide part set resources support WAI-ARIA specification. practices describe recommended usage patterns web content developers, WAI-ARIA Primer basic introduction concepts reason WAI-ARIA. WAI-ARIA suite gaps identified Roadmap Accessible Rich Internet Applications Roadmap) documents serve important places clarification topics appear be unclear. Note: Most JavaScript examples are written be understandable readers, including novice intermediate JavaScripters. example, most modern rich web applications use DOM Level event listener assignment now, source code examples document use DOM Level assignment el.onclick = foo; <el onclick="foo()">) easier readers understand. Expert JavaScripters are encouraged use modern JavaScript best practices developing accessible rich internet applications. conceptual basis provided WAI-ARIA Primer, have good understanding WAI-ARIA interoperability assistive technologies support more usable, accessible experience. guide providing general steps building accessible widget using WAI-ARIA, script, CSS. then knowledge WAI-ARIA detailed guidance make rich internet applications keyboard accessible. Next, scope include full application, addressing necessary layout structural semantics Web page. semantics are critical enable assistive technologies provide usable experience processing rich internet applications rich documents same page. guidance dynamic document management; use WAI-ARIA Form properties; WAI-ARIA Drag Drop; then creation WAI-ARIA-enabled dialogs. appendix substantial reference information including code samples developers user agents, assistive technologies, Web pages. WAI-ARIA markup currently not included W3C WAI PF working group be creating DTDs XHTML HTML wishing validate markup WAI-ARIA embedded host languages. General Steps Building Accessible Widget WAI-ARIA point have basic understanding WAI-ARIA used support interoperability assistive technologies. are not reusing WAI-ARIA-enabled widget library wish create own following steps guide thought process creating accessible widget using WAI-ARIA. Pick widget type WAI-ARIA taxonomy WAI-ARIA role taxonomy Section constituting most common UI component types. Choose role type provided table. desire was create toolbar set role toolbar: <div role="toolbar"> role, get list supported states properties Once have chosen role widget, consult WAI-ARIA specification in-depth definition role find supported states, properties, other attributes. example, toolbar role definition superclass role taxonomy widget selected inherits states properties role. case toolbar see toolbar subclass group. makes sense given toolbar collection commonly used functions. related concept really more informative state other concepts are similar role. exist different host languages WAI-ARIA. keyboard model control emulate related concept control. supported states properties are unique states properties widget supports were not inherited ancestors taxonomy. case toolbar there are such states properties. However, case listbox, choose set property aria-multiselectable true were have more item listitem selected time. assistive technology listbox collection selectable options. inherited states properties are states properties are inherited roles's ancestors use. global states properties are states properties apply host language components regardless role set not. use well. Once have chosen states properties apply widget set properties use set initial values. Note: do not need use states properties available role. case use: <div role="toolbar" id="customToolbar" tabindex="0" aria-activedescendant="button1" onkeydown="return optionKeyEvent(event);" onkeypress="return optionKeyEvent(event);" onblur="hideFocus();" onfocus="showFocus();" > <img src="img/btn1.gif" title="Home" alt="Home" role="button" id="button1" onclick="updateText('Home was invoked');"> <img src="img/btn2.gif" title="Refresh" alt="Refresh" role="button" id="button2" onclick="updateText('Refresh was invoked');"> <img src="img/btn3.gif" title="Help" alt="Help" role="button" id="button3" onclick="updateText('Help was invoked');"> </div> setting tabindex=0 toolbar, toolbar receive focus document order. necessary then use script aria-activedescendant property manage virtual focus buttons. details are given step Important: embedding WAI-ARIA markup HTML, WAI-ARIA states properties be preceded characters aria- exception role tabindex attributes. Otherwise, user agent not map WAI-ARIA information, resulting not being recognized assistive technologies. embedding WAI-ARIA other host languages, tabindex not carry WAI-ARIA tabindex extensions are specific repair deficiencies keyboard support. Establish widget structure markup Assistive technologies are very dependent structure widgets well general document structure. Structure context user. toolbar collection common functions made available user. Therefore, functions toolbar be contained be determined using Document Object Model tree structure created browser parsing host language. using parent child relationship DOM, assistive technology determine related toolbar widgets associated toolbar. toolbar widgets be DOM children container. purposes define image buttons cut, copy, paste. <div role="toolbar" tabindex="0" aria-activedescendant="button1"> <img src="buttoncut.png" alt="cut" id="button1"> <img src="buttoncopy.png" alt="copy" id="button2"> <img src="buttonpaste.png" alt="paste" id="button3"></div> Repeat steps children parent now need assign roles states children. However, detailed navigation step <div role="toolbar" tabindex="0" aria-activedescendant="button1"> <img src="buttoncut.png" alt="cut" role="button" id="button1"> <img src="buttoncopy.png" alt="copy" role="button" id="button2"> <img src="buttonpaste.png" alt="paste" role="button" id="button3"></div> process setting roles states be recursive procedure children have children, such case expandable/collapsible tree widget. Establish keyboard navigation widget plan be navigated document very important widget be keyboard accessible. fact, there be keyboard equivalent mouse operation. possible refer WAI-ARIA examples guide tips implement keyboard navigation widget. find example not provided, follow standard keyboard bindings UI components such used Java Foundation Classes Windows 95/NT. toolbar, have chosen have toolbar manage focus children use aria-activedescendant property. have also chosen have toolbar receive focus based tab order using tabindex. order use aria-activedescendant, focusable descendant have assigned ID. <head> <script> â¦ function optionKeyEvent(event) var tb = event.target; var buttonid; DOM_VK_ENTER = Partial sample code processing arrow keys == return true; Browser use menu view need alt-modified keys XXX Implement circular keyboard navigation toolbar buttons == DOM_VK_ENTER) ExecuteButtonAction(getCurrentButtonID()); author defined function else == event.DOM_VK_RIGHT) Change active toolbar button right var buttonid = getNextButtonID(); author defined function tb.setAttribute("aria-activedescendant", buttonid); else == event.DOM_VK_LEFT) Change active toolbar button left var buttonid = getPrevButtonID(); author defined function tb.setAttribute("aria-activedescendant", buttonid); else return true; return false; else == â¦ </script><div role="toolbar" tabindex="0" aria-activedescendant="button1" id="tb1" onkeydown="return optionKeyEvent(event);" onkeypress="return optionKeyEvent(event);"> <img src="buttoncut.png" alt="cut" role="button" id="button1"> <img src="buttoncopy.png" alt="copy" role="button" id="button2"> <img src="buttonpaste.png" alt="paste" role="button" id="button3"></div> details implementing keyboard navigation are described Keyboard Structural Navigation section document. Note: also show visual focus element focus. Apply manage needed WAI-ARIA states response user input events Similar processing aria-activedescendant Step author set additional WAI-ARIA states properties document elements. Synchronize visual UI accessibility states properties supporting user agents consider binding user interface changes directly changes WAI-ARIA states properties, such use CSS attribute selectors. example, setting aria-selected state change background selected treeitem tree. also be done JavaScript. white; background-color: white; background-color: beige;} Authors be aware CSS attribute selectors are not supported browsers, such Internet Explorer consistent way apply styling reflect WAI-ARIA semantics be assign element class name based WAI-ARIA attribute being set using script shown here: function setSelectedOption(menuItem) return; var menu = getMenu(menuItem); var oldMenuItem = getSelectedOption(menu); Set class so show selection appearance oldMenuItem.className="unselected"; menu.setAttribute("aria-activedescendant", menuItem.id); menuItem.className= Showing Hiding Sections Widget proper synchronization showing hiding sections widget WAI-ARIA display state also critical. platform accessibility APIs provide events applications notify assistive technology pop-ups such menus, dialogs come view go away. Rich Internet applications assist browsers support conventions Creating entire section then insert Document Object Model subtree parent element activated show pop-up, then removing section inserted area pop-up away. OR Using following style sheet properties show hide document sections being used represent pop-up items, menus dialogs: display:block display:none visibility:visible visibility:hidden monitoring behaviors user agent use information notify assistive technology pop-up occurred generating appropriate accessibility API event. assistive technologies use DOM directly determine pop-up case, first mechanism writing section DOM work using DOM events demonstrated here. create new table row table cell div	 var newTr = document.createElement('TR');	 var newTd = document.createElement('TD');	 var newDiv = document.createElement('DIV');	 newTr.appendChild(newTd);	 newTd.appendChild(newDiv);	 new table row Node selected	 var container = theNode.parentNode;	 container.insertBefore(newTr, theNode);	 selected	 container.removeChild(theNode);" However, are using CSS show hide sections DOM essential set corresponding WAI-ARIA aria-hidden property indicate section visible hidden synchronize CSS styling shown here: hidden;}â¦<div role="button" aria-haspopup="true" aria-owns="mypopupmenu"><div role="menu" aria-hidden="true" id="mypopupmenu">â¦</div> Support basic accessibility, such alternative text images image used represent information component, such image buttons, need set alternative text images. then mapped user agent accessible name platform accessibility API. Using example: <div role="toolbar" tabindex="0" aria-activedescendant="button1" id="tb1" onkeydown="return optionKeyEvent(event);" onkeypress="return optionKeyEvent(event);"> <img src="buttoncut" role="button" id="button1" alt="cut"> <img src="buttoncopy" role="button" id="button2" alt="copy"> <img src="buttonpaste" role="button" id="button3" alt="paste"> </div> Establish WAI-ARIA relationships widget others Once have made basic widget accessible then need establish relationship other widgets. Examples are aria-labelledby, aria-controls, aria-describedby aria-flowto. details using relationships are described Relationships section document. Other relationships be considered are more declarative provide context widget set. aria-level, aria-posinset, aria-setsize are provided. structure Document Object Model appropriately so user agent determine information using DOM hierarchy directly, do not need set properties. are, however, situations rich internet applications elements container are not DOM time, such only render items subtree. case user agent determine number tree items position set potentially tree depth DOM. situations need provide WAI-ARIA properties. Review widget ensure have not hard coded sizes ability applications respond system font settings requirement. Most user agents are designed meet requirement. also means Web application running browser impacted user agent changes font sizes meet need. have hard coded font size pixels increase system fonts not be reflected Web application. also not hard code size widgets pixels either. fonts are scalable, widget are encapsulated not, then text flow widget. Follow rules allow application respond system font settings: Establish base set font sizes used widgets based percentage container element font size. Use CSS width, borders, margin, padding, background, positioning properties specify graphical rendering widgets sub-components, use percentage units em units specify widths widget components em font unit measure top bottom upper case letter M.). Border widths, padding, margins use PX units. Use scripting run time CSS positioning widget sub-components relation other sub components. Make sure widgets use consistent height width units measure. Percentages are most reliable way consistently specify proportional text sizes widgets. use percentages em be used specifying widths widget widget sub components. use percentages text size percentages em units widths support browser zoom capabilities make widgets larger smaller.Pixels be used specifying line widths, padding margins. Important: Most browsers today have zoom feature allow user magnify entire Web page. Most legislation today application respond system font color settings therefore want consider fact system settings adversely affect Web page decide hard code pixel sizes. Compensate Background Images High Contrast Mode Authors use background images styling widgets, including situations background image not merely decorative, informative. example horizontal progress bar filled gradually revealing more background image. accomplished initially setting width element then incrementing width accordance degree progress. High contrast mode operating system display modification makes screen easier see low vision users. operating systems Windows), do not display background images high contrast mode. Consequently, progress bar described empty regardless progress. recommended authors not use background images sole method convey important information, compensate alternative additional style rules. case progress bar example, technique works high contrast mode style element border. width element updated progress increases, border gradually expands horizontally forming ever wider unfilled rectangle. alternative visual feedback extent progress. technique replace background image text. Consider dialog uses background image close box. compensate missing close box high contrast mode, lower case used instead. compensation technique used context, particularly purpose background image. are general approaches respect detecting high contrast mode. are executing script determine system high contrast mode, providing preference use alternative styles. advantage automatic detection operating systems simply apply different color palette high contrast mode do not turn background images. case, authors need not compensate missing background images. However, detection high contrast mode script relatively expensive compared preference users set, presumably, users see background images are displayed high contrast mode system. up individual authors decide method find acceptable particular situation. following code fragment detect high contrast mode. Define styles high contrast test element border: 1px solid; border-color:red green; position: absolute; height: 5px; top: background-image: url('resources/blank.gif');}â¦// onload event handler inserts high contrast test element then tests computed styles.function detectHiContrast() var div = document.createElement('div'); div.setAttribute â¦ <div#hiContrastTestEl> <body> element â¦ var cs = window.getComputedStyle(div); var bki = cs.backgroundImage; var hiContrast = false; CSS sets top right borders test element red green, respectively. high contrast mode borders are same colour, there legitimate url background image. hiContrast = == cs.borderRightColor) null == bki == apply contrast styles compensate missing background images. â¦ remove test element document â¦} Test User agent, Assistive Technology, People disabilities ensure have set WAI-ARIA semantics correctly, test application user agent, assistive technology, person disability. Example assistive technologies are screen readers screen magnifiers. Ensure user agent designed support WAI-ARIA assistive technology designed support WAI-ARIA selected user agent. Finding people disabilities do testing be difficult many companies employ people disabilities, including customers, reach ask help. Other places look are advocacy groups National Federation Blind local schools blind, reading learning centers, so people reach someday need use produce. Keyboard Structural Navigation Providing effective navigation experience user critical usability. section starts guidance provide effective keyboard navigation widgets Rich Internet Application environment. discussion manage keyboard focus specifics providing keyboard navigation tooltips. followed broader discussion convey structural semantics entire Web page. semantics help assistive technology provide additional navigation, increase user productivity, render page alternative formats. rendering be different forms, including not limited speech, page restructuring, alternative input solutions. Providing Keyboard Navigation Widgets WAI-ARIA Keyboard Bindings Behaviors Essential accessible Web widgets keyboard support provide full operation functionality widget keyboard-only events. traditional HTML form controls, Web widgets, typically, have inherent keyboard support. developer enable keyboard support widgets create use widget libraries keyboard support. model keyboard support Web widgets are graphical user interface operating systems Microsoft Windows, Mac OS X; other desktop operating systems GNOME GTK. Basic accessibility requirements keyboard focus include: Support users use pointing devices due physical visual impairment access full functionality Web application. major software Web accessibility guidelines people disabilities require keyboard-only operation interface accessibility. Communicate accessibility information assistive technologies type widget associated state properties. example, screen reader user tree announced, know pressing right arrow key expand node. Similarly, hear grid announced, know use screen reader's table reading commands. Keyboard Navigation Widgets tabindex attribute focus be moved keyboard HTML elements. standard HTML tabindex was limited form anchor elements. WAI-ARIA, tabindex attribute now applicable renderable HTML elements additional functionality designed help author produce keyboard accessible Web widgets. Tab Shift+Tab key move focus widgets standard HTML controls. Widgets tabindex=0 be added tab sequence based document order Widgets tabindex>0 be added tab sequence based TABINDEX value Widgets tabindex<0 not be added tab sequence are enabled receive keyboard focus. Once widget keyboard focus, arrow keys, Space, Enter key, other keyboard commands be used navigate options widget, change state, trigger application function associated widget. Keyboard Navigation Widgets element keyboard focus needs have tabindex attribute set current active descendant element active descendant not exist. element keyboard focus essential information widget assistive technologies screen readers magnifiers operating specific accessibility APIs Microsoft Active Accessibility Apple AX APIs, ATK Accessibility Toolkit. TAB key moves keyboard focus widget, other keys operate features widget, typically cursor keys, Enter key Space. actual keys are up developer, best practices recommend using same key bindings are used control similar widgets common GUI operating systems Microsoft Windows, Mac OS X other desktop operating systems GNOME GTK. JavaScript use focus() method move focus appropriate element widget, use WAI-ARIA property called aria-activedescendant actual widget container indicate element widget have focus. following procedure be followed focus completely dependent use tabindex provide focus widget: Set tabindex="0" current active descendant widget setting tabindex="-1" other child elements widget user arrows) away item, old item tabindex="-1" new item tabindex="0". Use javascript method set focus, using JavaScript focus() method, item tabindex="-1" procedure roving tabindex. tab away tab back widget, same last active descendant active again. author having compute set focus last activedescendant. Conversely, use WAI-ARI aria-activedescendant property things get lot easier: Set tabindex="0" element composite widget, set activedescendant property id child wish be active, user arrows) away item widget, refresh activedescendant property containing widget id new active descendant child. browser then be responsible managing focus changes greater detail, see Using Tabindex Manage Focus Widgets. scenarios author indicate styling markup element widget focus Keyboard Shortcuts Widgets useful provide keyboard access widgets, focus widget directly activate features widget. be use letter label control, well other special keys perform familiar operations system. providing non-standard key commands, document so user use localizing user interface, be necessary localize keyboard mnemonics well order keep apparent. Be sure not introduce key conflicts doing ensure correct key commands remain apparent user. Example Keyboard Operation: Radio Group/Radio See working Radio button examples University Illinois. Key Bindings Radio Group Behavior Example Key Description Radio Group Behavior Tab Key radio button checked, focus moves first radio button group, radio button remains unchecked. radio button checked, focus moves checked radio button. SHIFT+TAB pressed, focus moves last radio button group, radio button remains unchecked. Space Bar Checks radio button keyboard focus special case using tab radio buttons have been marked checked). Down Arrow button checked, check first radio button. last radio button checked, check first radio button. Otherwise, move check current radio button radio button. Arrow button checked, check last radio button. first radio button checked, check last radio button. Otherwise, move check current radio button previous radio button. Radio Group example, tabindex first last radio button elements tabindex="0" none radio buttons checked), remaining radio elements have tabindex="-1". soon first last radio button focus changes tabindex value other radio button none radio buttons selected keyboard focus leaves group first last radio buttons have tabindex values set Other Widget Authoring Practices Common Widget Design Patterns section document best practices, such keyboard navigation, creating common widgets found Web. section miscellaneous authoring practices also consider. Maintain valid format aria-valuenow essential application vendors maintain valid format foraria-valuenow, aria-valuenow shouldaccurately represent value widget.The value be range aria-valuemin aria-valuemin, value aria-valuemin less equal value aria-valuemax, life cycle widget. aria-valuemin not less equal value aria-valuemax, aria-valuemax indeterminate, error condition be handled assistive technology, resulting undesirable results. alternative text equivalent be needed properly represent aria-valuenow, such day week, then accompany aria-valuenow appropriate aria-valuetext equivalent such example: <div role="slider" aria-valuenow="1" 	aria-valuemin="1" aria-valuemax="7"	aria-valuetext="Sunday"> Here values represent days week aria-valuenow equivalent first day week Sunday. aria-valuetext made available aria-valuenow also be treated index based. Providing Keyboard Focus way provide keyboard support form list elements accept keyboard focus default. Tab key, user navigate types elements. However, building sophisticated widgets, necessary be able control keyboard navigation exactly. Authors require prefer use host language elements do not have built-in keyboard navigation features. example, author wish provide keyboard navigation altering tab order. Navigating large composite widgets such tree views, menubars, spreadsheets be very tedious inconsistent users are familiar desktop counterparts. solution provide full keyboard support using arrow keys provide more intuitive navigation widget, allowing Tab Shift+Tab move focus widget place tab order. tenet keyboard accessibility reliable, persistent indication focus. author responsible, scripts, maintaining visual programmatic focus observing accessible behavior rules. Screen readers keyboard-only users rely focus operate rich internet applications keyboard. Using Tabindex Manage Focus Widgets requirement supporting keyboard allow focus be set element. tabindex attribute be used include additional elements tab order set programmatic focus Originally implemented Internet Explorer feature been extended Opera, Gecko-based user agents such Firefox, WebKit-based user agents such Safari. following table use tabindex attribute: Use Tabindex Attribute Tabindex Attribute Focusable mouse JavaScript element.focus() Tab Navigation not present Follows default behavior element form controls anchors receive focus.) Follows default behavior element tabindex="0" yes tab order relative element's position document Positive tabindex="X" X positive integer yes Tabindex value directly element positioned tab order. Negative tabindex="-1" yes author focus element.focus() result arrow other key press Setting tabindex value element element receive focus JavaScript using element.focus() method. method used enable arrow key navigation elements. element be navigated arrow keys have tabindex enable receive focus. Here are just few additional tips help managing keyboard focus: Use focus blur events event delegation) monitor changes current focus focus blur events now be used element. Modern browsers now support activeElement property document object get focused element. Don't assume focus changes come key mouse events, assistive technologies such screen readers set focus focusable element, needs be handled elegantly JavaScript widget. Techniques such delegation" example, intercepting events list rather listitem) greatly increase web application performance code maintainability, authors are encouraged use JavaScript best practices possible. Note: activeElement property now standard HTML Follow keydowns move focus keydown event handler determine object receive focus call element's focus() method. Use onkeydown trap key events, not onkeypress Key press events do not fire keys vary browsers. Dynamically change focusability using tabIndex property want update tabindex values custom control disabled enabled. Disabled controls not be tab order. However, typically arrow part grouped navigation widget. element focus, change tabindex value make element default element widget. important user leaves widget returns widget again so focus last element widget user was other elements widget receive keyboard focus, only element widget have tabindex value Use element.focus() set focus Do not use createEvent(), initEvent() dispatchEvent() send focus element, functions do not change focus. DOM focus events are informational only, generated user agent element acquired focus, not used set focus. use pseudo-class selectors style keyboard focus not supported many versions Internet Explorer. Authors use pseudo-class older versions IE treat conjunction pseudo-class. Example: text-decoration: underline; related CSS pseudo-classes are not appropriate not supported browsers, authors use JavaScript techniques indicate appropriate focus alternative, such using focus blur events toggle classname element. Always draw focus tabindex="-1" items elements receive focus programmatically supporting versions Internet Explorer older Choose changing background color something = add dotted border = dotted invert". dotted border case, need make sure elements have invisible 1px border start so element grow border style applied take up space, IE implement CSS Prevent used key events performing browser functions key such arrow key used, prevent browser using key do something scrolling) using code following: <span tabindex="-1" onkeypress="return handleKeyPress();"> handleKeyDown() returns false, event be consumed, preventing browser performing action based keystroke. addition return value browser call event methods prevent default action, IE setting event property other browsers supporting W3C event model means calling method event object. <span tabindex="-1" onkeydown="return handleKeyDown();"> handleKeyDown() returns false, event be consumed, preventing browser performing action based keystroke. Use key event handlers enable activation element mouse event handler, keyboard event handler required. example, have onclick="doSomething()" also need onkeydown="return event.keyCodeÂ doSomething();" order allow Enter key activate element. Note: are user agent-specific considerations key event handling. Consider using tabindex complex widgets are not using aria-activedescendant property. Using activedescendant Manage Focus Widget Children addition tabindex, WAI-ARIA aria-activedescendant property managing focus child elements widget. Widgets grid tree typically manage children. root element widget have tabindex value greater equal ensure widget document tabbing order. Rather setting key event handler element larger component, event handler be set parent element such tree. then job parent element manage focus children. parent use aria-activedescendant property indicate active child. example, container element role tree provide onkeydown event handler so individual tree item tree not need be focusable listen keydown event. container object, case tree, needs maintain point regard manage individual child item be perceived active. Important: given container widget activedescendant cause focus events be fired ATs, actual focus be container widget HTML done putting tabindex="0" container widget. key handler parent captures keystrokes item active updates aria-activedescendant property ID appropriate, active child element. browser ID information focus event assistive technology. individual element not have be made focusable tabindex value be styled using CSS indicate active status. active status moved descendant, ensure scrolled view using scrollIntoView(). See section Managing Focus Scroll more information. Managing Visual Focus tabindex Alone alternative using activedescendant have parent element, response same keyboard input, move focus children first removing tabindex children do not have focus, tab order. be followed setting tabindex element receive focus then using script set focus element receive focus. aria-activedescendant, managed children tabbing order. browsers do not yet support aria-activedescendant maintain keyboard navigation, notification many assistive technologies screen magnifiers move visual focus relying other WAI-ARIA properties. Today, technique work most user agents, long run aria-activedescendant require less work developer. not always ideal based widget are creating, benefit using tabindex manage focus element user agent scroll element view focus set not case aria-activedescendant. setting updating aria-activedescendant property, e.g. aria-activedescendant="cell23", authors ensure element id="cell23" view. case, consider positioning widget visible area browser maximize usability. be achieved using available JavaScript scrolling functions. Managing Focus Scroll browsers, JavaScript call scrollIntoView() element suffice, browsers unreliable, authors explicitly set scrollTop scrollLeft properties element ancestors scroll element view. scrollTop scrollLeft adjust node positions amounts(pixels) needed scroll node view. Â Scrolling values are adjusted amounts(pixels) needed scroll node view. done comparing sizes nodes using available measurements such scroll+offset+clientWidth/Height/Left/Top. important note have adjust node so viewable context parent node. Â Then have move up DOM tree make parent node visible. example, create custom scrollIntoView() method called various times, including coincidence setting aria-activedescendant property. method DOM node argument, say Here high level algorithm: n already view, stop; otherwise, continue. adjust n.scrollTop n.scrollLeft such view. adjust scrollTop scrollLeft ancestor nodes n such region ancestors n visible. minimum-position-change algorithm. Understanding DOM scrollIntoView works browsers important. Browsers Firefox3) force node top bottom screen defined single Boolean parameter) even already view. problematic only need scroll horizontally see element. also problematic node partially bottom screen parameter forces node way top, vice versa top going bottom IE forces node left client area right right-to-left mode) even horizontally view already. scrollTop scrollLeft functions create challenges. scrollTop always accurate misleading respect inner scrollbars. scrollLeft be relied right-to-left languages sometimes negative sometimes positive especially respect inner scrollbars. Different browsers handle right-to-left completely differently. Managing Perception Dual Focus Often applications give perception having dual focus. examples are multi-selection list boxes selected tabs, tablist, focus tabpanel. case muti-selection list box developer gray selected items move focus list box items toggle selected state. case tabpanel user tab then focused item corresponding tabpanel tab also have focus. reality, only element have focus application. scenarios authors ensure keyboard focus set current element visibly keyboard user input ensuring other elements have aria-selected state de-selected. de-selection such multi-select item de-selected user moves new tab de-select old tab, author ensure visible selection de-selected item removed. Author-Defined Keyboard Short-Cuts Mnemonics Author-defined keyboard short-cuts mnemonics present high risk assistive technology users. are device-, browser-, AT-dependent, conflicts key bindings are highly probable. Therefore, needed use accesskey, be aware behave differently different browsers. also not work small devices so still advisable ensure features are accessible basic keys Tab/Shift+Tab, arrow, Enter, Space Escape. XHTML Working Group currently developing new Access Module address issue hope have feature future versions Refer Section Implementation Guidance. Supporting Tooltips Keyboard tooltip popup messages typically triggered moving mouse control widget causing small popup window appear additional information control. provide simple text tooltips, HTML title attribute more suffice user agent render tooltips. creating tooltip, essential user be able activate using keyboard. form control widget keyboard focus, tooltip display. form control widget focus, tooltip disappear. Browsers do not currently support functionality. following code snippet iCITA site shows use onfocus="tooltipShow();" function display tooltip focus placed element. <html lang="en-us""> <head> <title>inline: Tooltip Example <link rel="stylesheet" href="css/tooltip1_inline.css" type="text/css"> <script type="text/javascript" src="js/tooltip1_inline.js"></script> <script type="text/javascript" src="../js/widgets_inline.js"></script> <script type="text/javascript" src="../js/globals.js"></script> <link rel="icon" href="http://www.cites.uiuc.edu/favicon.ico" type="image/x-icon"> <link rel="shortcut icon" href="http://www.cites.uiuc.edu/favicon.ico" type="image/x-icon"> </head> â¦ <body onload="initApp()"> <div id="container"> <h1>Tooltip Example <h2>Create Account</h2> <div class="text"> <label Name:</label> <input type="text" id="first" name="first" size="20" onmouseover="tooltipShow(event, onfocus="tooltipShow(event, aria-describedby="tp1" aria-required="false"/> <div id="tp1" role="tooltip" aria-hidden="true">Your first name optional. </div> </div> â¦ Keyboard Handlers Shortcuts Steal Keys Similar tip specified Using Tabindex Manage Focus Widgets, web application cancel swallow) keyboard event keyboard handler prevent key being used web application. example user presses Control+PageDown tab panel web application, keyboard event not also go user agent, cycle active browser tab, confusing user. Providing Navigable Structure Web Pages section broader look Web page. intended assist conveying logical, usable, accessible layout assistive technology adaptive system designed modify visual layout meet users needs. deficiencies disabled users been usability keyboard navigation. Users dependent keyboard navigation have been forced tab everywhere document, only keyboard accessible document elements are form anchor elements. forced developers make most everything link make keyboard accessible, get link have tab advent portals other content aggregation means Web pages are divided visible regions there been vehicle get other perhaps do things such Create skip link top page main content Make head perceivable region bar, stock quote, TV Listing, etc.) <H1> tag are number problems approach: force user interface change support accessibility case using <H1> mark regions, not consistent Web sites semantics are limited main content section convey need rich internet application developer control keyboard navigation assistive technology remainder section author playbook using WAI-ARIA add semantically rich navigation structure Web page so assistive technology provide effective user experience avoid shortcomings. Steps Defining Logical Navigational Structure Due complexity today's web content, imperative content reside navigation landmark. Sight mobility impaired users be able quickly access list landmarks web page, be used table contents. user quickly navigate important sections page TAB navigation. not done, then content be orphaned missed user. fact many today's accessibility test tools have built-in rules flag issue compliance error. section create navigable regions page: Identify logical structure page Break up page perceivable block areas contain semantically associated information called further break down region logical regions needed. common process undertaken portal developers break page perceivable regions called portlets. Think user wanting navigate logical block areas Web page. Write down description believe region be. Depending Web application then need break sub regions depending complexity Web application. recursive process. user look perceivable areas pealing onion. have outermost collection perceivable regions block areas entering region have collection regions Implement logical structure markup Implementing block structure markup often wrapping elements contained such <div> <iframe> visible borders so region block perceivable user. Label region Once have broken up region need label start region have perceivable header be used label region. details do see section Header Levels nesting level create header label region. finding difficult come up label region, make sure least use standard roles defined following step. drawback not providing label users not know purpose region. definition, regions be included summary page. assistive technology were summarize be unable provide information section label. Assign landmark roles region Now labeled regions, need assign semantic navigation landmarks. Landmarks are vast improvement rudimentary main content" technique employed prior WAI-ARIA. possible best use landmarks. Skip main content links impact placement web application elements. be consideration developers want try keep web application specific visible area. Consequently, layout adjustments need be made support skip main content links. Also, skip main content links are limited only address only main content area. WAI-ARIA collection landmarks are applied regions identified step presence common, semantic, navigation landmarks site support same standard assistive technology provide consistent navigation experience important feature screen readers alternate input solutions. users cognitive learning disabilities landmark information be used expand collapse regions page aid simplifying user experience allowing user manage amount information processed time. WAI-ARIA landmark roles are applied elements having strong native semantics are not mapped consistently platform accessibility API. example TABLE element. reason, recommended authors apply landmarks DIV SPAN containers. are also mainstream benefits providing navigation landmarks. browser assign key sequences move focus sections be set site. Navigation landmarks device independent. personal digital assistant assign device key get document. common landmarks WAI-ARIA include: application region page representing unique software unit executing set tasks users. area assistive technologies also return browse navigation keys back web application region. entire web page role application then not be treated navigational landmark assistive technology. banner region prime heading internal title page. complementary section document supports separable main content, meaningful own even separated contentinfo Meta information first immediate ancestor role not presentation. form region document collection form-associated elements, represent editable values be submitted server processing. main Main content document. navigation collection links suitable use navigating document related documents. search search tool Web document. set landmark page: <div role="navigation" title="Table Contents"> â¦ </div> <div role="main" title="Game Statistics"> â¦ </div> application landmarks static prose have regional landmark type application static descriptive text available, then application landmark, include aria-describedby reference associate application static text shown here: <div role="applicaton" aria-labelledby="calendar" aria-describedby="info"><h1 id="calendar">Calendar<h1><p id="info">This calendar shows game schedule Boston Red Sox.</p><div role="grid">â¦</div> landmarks unsuited specialized region WAI-ARIA roles create custom regional landmarks using generic region. not essential label specialized regions header, provide title ensure region name accessible users, just standard regional landmarks. See Header levels Nesting levels directions label region. <div role="main"> â¦ <div role="region" title="weather"> Note: region role generic only be used more specific role not applicable. Indicate assistive technology controls keyboard navigation Today's screen readers blind have been designed give user experience meaning screen reader number keys aid browsing experience. example, arrow keys are used read previous line text Web page. Accessible rich internet applications use keys application navigate Tree View. Assistive technologies be able identify widgets implement WAI-ARIA allow use keyboard. However, have used numerous widgets form application set role encompassing region application. have regions be browsed documents application region mark regions document role needed. See section Structural Roles used facilitate assistive technology navigation. Structural Roles Facilitate Navigation Assistive Technologies WAI-ARIA designed address many disabilities, section best described terms screen reader use. desktop applications, screen readers typically treat widgets discrete entities, reading interacting widget time. user moves point focus widget widget using tab/shift tab, mnemonics, accelerators, keyboard commands are usually provided application operating system. refer mode interaction mode." viewing Web content however, screen readers often gather information widgets area present document-like view user using keyboard commands provided controlled screen reader. Think mode virtual environment presents Web content way makes convenient adaptive technology users navigate read. sometimes called browse mode, virtual mode. refer browse mode." many screen readers provide document mode navigation support using single key mnemonics alpha-numeric keyboard, provide third mode, called mode," used interact form controls are encountered document mode. Behavior forms mode similar application mode. key feature forms mode be toggled document mode make easy interact specific widget, read virtualized content widget part. described above, screen reader's perception area document application greatly influences user WAI-ARIA content authors way indicate pages be viewed applications documents assistive technologies. set document application mode follow steps: Set Application Role have divided Web page regions use role landmarks custom regions, make decision: Web page application not? majority content application-like default interaction mode be set application, document regions embedded application applicable. Otherwise default interaction mode document-like therefore not be overridden use global role application. case application role be placed discrete regions document applicable. set role application body tag <body role="application"> using application, static text be associated widgets, groups panes using aria-labelledby aria-describedby properties, otherwise not be read screen reader user related widget group. Special Considerations: have selected have role application body tag, recommended widget have focus page first loaded. be instance application needs receive focus, such application consisting solely scrollable editable text area. page loads have focus widget strong indicator Web page have role application. page only few isolated widgets, pop-up calendars located Web page, not necessary expressly set role application body. Screen readers, based widget roles, be able provide access widgets recognizing entire page application. Also, browsers make use feature called contenteditable attribute, be incorporated HTML Contenteditable author turn browser section rich text editor, similar word processor. section contenteditable set considered widget. body element been given role application, please follow step Otherwise, Web page considered document, further action required regard. Dialogs alert dialogs special case application roles WAI-ARIA dialog alertdialog roles are be treated special case application roles. application, screen readers leave main job keyboard navigation up dialog. using dialog, static text be associated widgets, groups panes using aria-labelledby aria-describedby properties, otherwise not be read screen reader user related widget group. application, Web page unlikely start roles rather author most likely dynamically create dialogs alertdialog sections Web page. dialog, descriptive text alert not need be associated relationship, contents alert dialogs be read automatically screen reader dialog Set document role default mode screen reader be processing HTML Web page document browse mode. equivalent having role document HTML <body> tag. have already specified role application body tag there be times tell screen reader switch browse mode" start stealing necessary keys browse document section Web page. keys are typical keys used WAI-ARIA widgets provide level navigation keys be stolen browser. mark areas page tell assistive technology switch document browse mode, look regions/landmarks have defined determine ones be browsed document navigated application. region be browsed document browse mode, embed div element role document <div role="document"> Now, screen reader encounters region, change interaction model document browsing mode. Implicit Nesting Headings section use heading role nesting levels. Header Levels Versus Nesting Levels heading role value heading section document instance. Use heading role specific object header. region document heading pertains be marked aria-labelledby property containing value id header. have heading there element containing content heads, wrap content <div> bearing aria-labelledby attribute. headings are organized logical outline, aria-level property be used indicate nesting level. Here example ARIA. Note preferred way using native semantics ARIA, approach ARIA shown first demonstrate use heading role: Using ARIA:<div role="main" aria-labelledby="page_title"> <p id="page_title" role="heading" aria-level="1">Top News Stories</p> â¦ main page contents here â¦</div>Using native markup:<div role="main" aria-labelledby="page_title"> <h1 id="page_title">Top News Stories</h1> â¦ main page contents here â¦</div> Repairs Nesting Assistive technology briefs users context are. arrive new page, page summary be given. move new context, labeling elements containing new focus reading location be rendered assistive technology, give context details be read next. syntactic structure page default nesting contexts. paragraph nested <div> table cell, assumed labels <div> headers table cell are pertinent paragraph. other hand, not possible always flow logical structure one-to-one parse structure. aria-owns relationship provided annotate logical nesting logical child not syntactic descendant logical parent. Rich Internet Application, updates be made document updating logical syntactic structure, yet elements appear be added document structure. DOM accessibility hierarchy perspective aria-owns fallback mechanism using tree hierarchy provided DOM. example aria-owns needed treeitem, children folder subtree are added visible subtree not reflected actual document subtree folder. aria-owns relationship be used associate folder new child. more details use aria-owns see section Owning Controlling. aria-owns relationship used indicate user agent menu adopting parent sub menu. use aria-owns hierarchical diagram child nodes diagram are not be adequately represented using DOM structure. Directories, Groups, Regions are several WAI-ARIA roles used indicate collection user interface objects, distinct purpose: directory static table contents group Small set related user interface objects not be included page summary table contents assistive technology region Section related user interface objects be included page summary table contents. use described Directories Applicability WAI-ARIA role, directory, authors mark static table content sections document. Prior WAI-ARIA, user need guess area document actually pertained table contents. Authors mark sections document role directory. <div role="directory"> <ul> <li>Global Warming Causes <ul> <li>CO2 Buildup</li> <li>Auto emissions<li> <li>Factory emissions</li> <li>Destruction rainforests</li> </ul> </li> <li>Tailoring CO2 buildup <ul> <li>Elimination incandescent light bulb</li> <li>Hydrogen fuel cells</li> <li>Solar energy</li> <li>Wind power</li> </ul> </li> </ul></div> Groups Applicability Authors use role group form logical collections items related functionality widget. group not be considered major perceivable section page. group heading Contents." group delineate set treeitems having same level tree be used group set related checkboxes form. Other examples include: row grid row specialized group representing row grid); group children tree widget forming collection siblings hierarchy; group items having same container directory Proper handling group assistive technologies, therefore, determined context provided. Group members are DOM subtree group need have explicit relationships assigned order participate group. Groups also be nested. author section significant enough terms entire document instance, then author assign section role region designated standard landmarks. designated landmark roles are listed section Regions XHTML Role landmarks. Regions Use defining region section document, authors consider using standard document landmark roles defined XHTML Vocabulary. makes possible user agents assistive technologies treat roles standard navigation landmarks. definition regions inadequate, authors use WAI-ARIA region role provide appropriate title text. more information use region see Regions XHTML Role landmarks. Â Remaining Structural Roles columnheader directory grid gridcell img list listitem row rowheader separator treegrid Tabular Structure-Related Roles Supporting Tabular Widgets number structural roles support tabular widgets, grid treegrid. structural roles indicate additional keyboard navigation well ability select rows columns. Typically, apply roles underlying table base markup shown here: <table role="grid">		 However, not work developer instances, such developer need <div> <span> additional semantics are needed. assist, following roles are provided support tabular widgets: columnheader grid gridcell row rowheader treegrid constructing gridor treegrid author use gridcells actual cells: <table role="grid"> <tr> <td role= role= </tr> <tr> <td role="gridcell">Macintosh</td><td role="gridcell">Valencia</td> </tr></table> table cells table, authors ensure grid's gridcells are focusable use tabindex HTML), aria-activedescendant grid.They also be editable, shown example. Treegrid's require expanding collapsing rows not be performed using <tr>. instances authors use HTML <div>. WAI-ARIA role row be assigned <div> convey assistive technology still row. decide not use native HTML <table> elements choose more flexible elements, such <div> <span>s, applied WAI-ARIA roles section, structurally lay elements line expect HTML. rowheaders be row gridcells be children subsequent row same format HTML <td>s <th>s <tr>s. Marking Descriptive Sections new feature WAI-ARIA ability associate descriptive text section, drawing, form element, picture, so using aria-describedby property. use case aria-describedby reference local id long description. most common use case longdesc author create separate file describe picture. prefereable have descriptive text prose well so readily available users. useful authors do not want create separate document description, cognitively impaired users be confused context changes having go page description. Yet, longdesc, descriptive text treated separately short name provided title alt attributes HTML. aria-describedby property text hidden elements be used accessible descriptions. screen reader vendors have used non-standard attributes provide hidden help text form elements. order standardize feature, hidden text exposed description property Accessibility API objects referenced aria-describedby. <img src="foo" alt="abbreviated name" aria-describedby="prose1"><div id="prose1"> prose div image foo detail.</div> preferred vehicle providing long descriptions elements document. author not desire entire descriptive text be located main page, aria-describedby also be used point link page. <div id="figuretitle">Figure Entity Relationship Diagram showing EMP DEPT</div> <img src="foo" aria-labelledby="figuretitle" aria-describedby="link1"> <a href="descriptionLocation.html" id="link1">Description Figure Entity Relationship Diagram showing EMP DEPT</a></div> not good practice use pattern describing elementâthe <a> tag @id='link1'âis hidden, there way user navigate activate link. Use technique only description not hidden. Miscellaneous XHTML Section Roles order synchronize XHTML Role Attribute module, WAI-ARIA XHTML roles are landmarks widgets kind. roles were incorporated replace standard elements found host languages. roles are definition note. role corresponding element host language, recommended authors use corresponding element host language. definition role definition statement document. HTML developers implementing lists definitions, recommend using DL, DT, DD elements rather marking arbitrary element role definition. arbitrary element be appropriate inline definitions used conjunction DFN element. Example inline definition explicit labelledby relationship: <p>The doctor explained had been <dfn id="placebo">placebo</dfn>, <span role="definition" aria-labelledby="placebo"> inert preparation prescribed more mental relief patient actual effect disorder.</span></p> Example inline definition implicit labelledby relationship determined nesting: <p>The doctor explained had been <span role="definition"><dfn>placebo</dfn>, inert preparation prescribed more mental relief patient actual effect disorder.</span></p> Note: case host language semantics do not allow implicit nesting definitions terms definition roles, authors explicitly use aria-labelledby attribute, even definition term nested definition shown here: <p>The doctor explained had been <span role="definition" aria-labelledby="placebo"><dfn id="placebo">placebo</dfn>, inert preparation prescribed more mental relief patient actual effect disorder.</span></p> following example using definition list: <dl> <dt id="anathema">anthema</dt> <dd role="definition" aria-labelledby="anathema">a ban curse solemnly pronounced ecclesiastical authority accompanied excommunication</dd> <dd role="definition" aria-labelledby="anathema">a vigorous denunciation cursor</dd><dt id="homily">homily</dt><dd role="definition" aria-labelledby="homily">a usually short sermon</dd> <dd role="definition" aria-labelledby="homily">a lecture discourse moral theme</dd></dl> note role parenthetic ancillary remark main content resource. also assistive technologies skip section document more information requested main content. <div role="main" aria-labelledby="foo"> <h1 id="foo">Wild fires spread San Diego Hills</h1> Strong winds expand fires ignited high temperatures â¦</div><div role="note"> article was last updated July </div> Making Dialog Modal WAI-ARIA dialog roles dialog alertdialog. authors simulate dialogs web page often limit interaction considerations mouse. Graphical User Interface dialog boxes desktop computer, user keyboard navigation accidentally navigate dialog box become disoriented. happen user tabbing dialog. modal dialog user setting focus dialog dialog closed. Mouse clicks dialog be ignored user not be able tab dialog WAI-ARIA enabled dialog boxes be modal. section Mouse clicks dialog be prevented creating CSS positioned element size viewport child body element. Set CSS z-index element so other elements page dialog element. Set tabindex underlay element tabindex="-1" prevent receiving focus keyboard event mouse click. lower opacity underlay element order emphasize dialog modal focus. Depending action be performed dialog, object focus dialog box opened be saved. allow restoring focus element dialog box closed. dialog box opened, focus be set first tab focusable element dialog. there tab focusable element dialog box contents, set focus item used cancel close dialog. be element dialog accept focus order screen reader speak dialog title information opened. order prevent keyboard focus leaving dialog, determine first last tab focusable elements dialog trap keyboard events document. Search contents dialog container find first last tab focusable elements. be implemented walking DOM tree dialog container find visible enabled anchor elements, input elements, elements have tabindex value greater equal Remember elements tabindex > appear tab order other focusable elements ascending order tabindex. Store first last tab focusable items variables scope dialog box code. dialog shown, create display dialog underlay. Connect onkeypress event handler DOM document.documentElement. catch keystrokes document allow trapping keyboard focus dialog. Size position dialog box viewport underlay, make visible set focus first tab focusable item dialog box. Trapping Focus onkeypress handler catch key presses document. onkeypress event handler be scope dialog box code so access first last tab focusable elements dialog. onkeypress handler determine target keypress event. addition, determine there only single focusable item dialog box. instance first tab navigable object equal last tab navigable object. key presses dialog box create, destroy, enable, disable, change visibility tab focusable elements, then determine first last tab-focusable items time keypress received. Based event target key pressed take following actions: keypress Shift+Tab key target == first tab navigable object, then set focus last tab-navigable object stop key press event. there only single tab focusable item, then focus not have be set, key press event be stopped. keypress Tab key target == last tab navigable object, then set focus first tab-navigable object stop keypress event. there only single tab-focusable item, then focus not have be set keypress event be stopped. keypress Escape key target node container node dialog box, then close dialog box hide destroy dialog underlay. Determine target node keypress dialog box container. be done using loop walk parent chain target node container node dialog box found. Other outlined above, key presses dialog box be allowed execute so user interact controls dialog box. target node not dialog box, keypress documentElement keypress event be stopped Tab key press. Allowing Tab key press document element enable tabbing back dialog box reason, focus dialog box lost. happen due timing issues dialog box first loaded focus not properly get set first tab-focusable item dialog. dialog box contain buttons other mechanisms cancel dialog box execute dialog box functions close dialog box. Here pseudo code onkeypress handler modal dialog box. Pseudo code used focus actions handler rather differences browser event handling. Assume event object, evt, been normalized browsers helper object library functions handle browser differences. keys object set key definition variables. Dialog dialog box object, function cancel dialog. function(/*Normalized Event*/ evt){// summary:// keyboard events accessibility reasonsif(evt.charOrCode){var node = evt.target; get target node keypress eventif keys.TAB){// find first last tab focusable items hierarchy dialog container node// do time items be added removed dialog change visibility statevar focusItemsArray = helper.getFocusItems(dialogContainerNode); dialog.firstFocusItem = focusItemsArray[0];dialog.lastFocusItem = focusItemsArray[focusItemsArray.length-1];}// firstFocusItem lastFocusItem maintained dialog objectvar singleFocusItem = == dialog.lastFocusItem);// see are shift-tabbing first focusable item dialogif(node == dialog.firstFocusItem evt.shiftKey evt.charOrCode keys.TAB){if(!singleFocusItem){dialog.lastFocusItem.focus(); send focus last item dialog}helper.stopEvent(evt); tab keypress event}// see are tabbing last focusable itemelse == dialog.lastFocusItem evt.charOrCode keys.TAB send focus first item dialog}helper.stopEvent(evt); tab keypress event}else{// see key dialogwhile(node){if(node == dialogContainerNode){ container node dialogif(evt.charOrCode == keys.ESCAPE){ escape key was presseddialog.cancel(); cancel dialog}else{return; just let go}}node = node.parentNode;}// key document windowif(evt.charOrCode keys.TAB){ allow tabbing dialog helper.stopEvent(evt); event not tab keypress end evt.charOrCode} end function Relationships Labeling Describing Marked up content widgets often need additional context make clear meaning purpose also reasonable content media types need additional descriptions format give clarity are unable consume origin format. additional meta-content sections are linked together tagging labels descriptions. WAI-ARIA aria-labelledby aria-describedby attributes signal browser feed relationships accessibility layer. layer then used screen readers other accessibility technology gain awareness disparate regions are actually contextually connected other. awareness then present meaningful navigation model discovery presentation additional content sections. user agent also choose present insights meaningful way. Generally always add attributes widgets site are often merely construct HTML JavaScript obvious insight widget's behavior interactivity Labeling using element label use aria-labelledby attribute. label provide user essence object example, have dialog box erected HTML <div> need assocate label dialog. WAI-ARIA role dialog, indicate widget type define label using HTML header then associate label dialog using aria-labelledby relationship. 	<div role="dialog" aria-labelledby="dialogheader">	<h2 id="dialogheader">Choose File</h2>	â¦ Dialog contents	</div>	 section doing labeling be referenced multiple widgets objects need only reference same id, so contextual description not always be viable. labelledby attribute have multiple ids specified space separated list much applying multiple classes single DOM object. aria-labelledby property be used label visual objects, however be noted @for attribute label element used label form controls. Use attribute possible valid. aria-labelledby attribute multiple IDREFs, recommended authors use aria-labelledby labeling elements require more label string. elements receive label embedded text content, exception. Often user agents operate images turned network performance reasons. situations, alt text provided place image. host language alternative text capability recommended authors use alternative text support situations not use separate labeling replacement. Describing Using aria-describedby element use aria-describedby attribute. aria-describedby section further information given object widget, not be intuitively obvious context, content other attributes. example, fake window common widget used Web applications often constructed using div absolute positioned layer other content. simulate common window behavior look feel there often X box corner activated, window widget. common way make X box simply make link content X. give non-visual user much go belies real purpose X link. help add more descriptive text stored elsewhere page <button aria-label="Close" aria-describedby="descriptionClose" onclick="myDialog.close();">X</button> then elsewhere HTML <div id="descriptionClose">Closing window discard information entered return back main page</div> labelledby, describedby accept multiple ids point other regions page using space separated list. also limited ids defining sets. contrived example also want good labelledby section fully explain window closing effect task being worked object widget describedby user agent try extract information label tags, present. label tags have limited use only be applied forms tables, respectively. Using tooltip description WAI-ARIA also tooltip role aria-describedby reference author defined tooltip. assistive technology tell type object describing document element purpose element example, screen reader announce tooltip user having wave mouse element following describedby relationship document area tooltip role. aria-describedby property also useful describing groups. Here code snippet showing set tooltip: â¦ <div class="text"> <label Name:</label> <input type="text" id="first" name="first" size="20" onfocus="tooltipShow(tooltip1);" onblur="tooltipHide(tooltip1);" onmouseover="tooltipShow(tooltip1);" onmouseout="tooltipHide(tooltip1);" aria-describedby="tp1" <div id="tp1" class="tooltip" role="tooltip">Your first name optional</div> </div> â¦ Descriptions external pages aria-describedby property not designed reference descriptions external resourceâsince IDREF, reference element same DOM document. different HTML longdesc attribute, URI. general, preferred pattern WAI-ARIA applications include relevant resources same DOM, wish reference external resource aria-describedby, reference link turn references external resource. user follow steps, first following aria-describedby arc, then following link, address use case. following example <p> <img src="images/histogram.png" alt="Histogram Blackberry tree heights" width="40%" aria-describedby="longdesc1" <a id="longdesc1" href="blackberry-description.html" target="_description">Data Blackberry Histogram</a></p> not good practice use pattern describing elementâthe <a> tag @id='longdesc1'âis hidden, there way user navigate activate link. Use technique only description not hidden. Owning Controlling relationships expand logical structure WAI-ARIA Web application. are aria-owns aria-controls Â TheÂ aria-owns relationship parent/child relationship be completely determined DOM created parsing markup. TheÂ aria-controls relationship cause-and-effect relationship so assistive technologies navigate content effected changes content user operating. Relationship addition WAI-ARIA role state information, document element,an assistive technology needs convey context. Inthe case treeitem, important know parent provide folder depth number siblings folder. containment hierarchy often be determined bythe DOM tree, parent, siblings, children givendocument element. said, DOM hierarchy rigid acyclical inthat node only have parent. situations, childis reused multiple parents child separated itssibilings parent DOM tree. example radio buttonappears table not DOM child radiogroup, due theauthors use table formatting placement radio buttonsplacing radiogroup container. solve problemWAI-ARIA aria-owns property. aria-owns property set document element, values are theunique IDs adopted children. elements appear anywherein DOM, yet are treated siblings owning parent. Thisexample radiogroup first uses DOM hierarchy toconvey context then aria-owns: First, consider preferred method using W3C DOM describe relationship radiogroup radio roles HTML: <div id="radio_label">My radio label</div><ul role="radiogroup" aria-labelledby="radio_label"><li role="radio">Item role="radio">Item role="radio">Item example, elements role="radio" are child nodes parent role="radiogroup" element node. Now, consider alternative method using aria-owns property describe parent-childrole relationship radiogroup radio roles HTML: <table><tr><td role="radiogroup" aria-owns="myradio1 myradio2 myradio3" rowspan="3" >My Radio Label</td><td id="myradio1" role="radio">Item id="myradio2" role="radio">Item id="myradio3" role="radio">Item aria-owns property be used sparingly, itincreases computational load assistive technology providealternative renderings. Also, accessing DOM enumeratingchildren DOM node, then enumerate adopted childrenusing aria-owns property. instance walking DOM, theparent adopted children adopted parent not DOMparent. avoid recursion problems. child, adopted natural, have appropriate aria-posinset aria-setsize properties set consistent theirrendering, be determined DOM direct parsing ofthe host language. Places direct parsing not allow useragent determine aria-posinset aria-setsize are long lists onlythe currently visible items are loaded Ajax). children arere-sorted then aria-posinset aria-setsize values be updatedconsistent visual rendering. Rather setting size only container, content authors specify aria-setsize member set avoid performance issues. Â property not set, user agent compute set property supporting roles. Platform accessibility API mappings invert relationship assistive technologies, so determine owning parent child couple aria-posinset aria-setsize information provide context information user. Â Using Reusable Content are re-using content different, transient sections content restyling render association different object, need maintain aria-owns property well match current use apparent ancestry reused sub-section. good example context help menu end document. user wishes launch context help menu association different visual elements, styling used render menu context object. Prior rendering visual submenu ensure object have requested help aria-owns property value submenu ID. menu closes remove aria-owns property. Controls Relationship rich internet applications document elements control behavior part Web page TheÂ aria-controls attribute cause-and-effect relationships document elements. example be group radio buttons contents listbox part page. Here, want radio group assign aria-controls relationship listbox be updating page reload. user, assistive technology, then navigate listbox following aria-controls relationship different radio selected, see contents changed listbox. ability update parts page page reload common practice applications making use Ajax. aria-controls attribute, user be unable effectively use types Web pages assistive technologies often not make user aware happening context element user currently operating. aria-controls attribute user use assistive technology follow relationship object controlling. extremely important assistive technology present changes document response user input. Therefore, assistive technology immediately presents changes live region controlling widget user keyboard focus. example, tree view controls help document pane, time tree item changes new tree item then new help contents also be read. case screen reader, amount information read target live region dependent live region configured. aria-controls attribute more ids refer document element. relationship not implied host language semantics, then controlling element be given controls attribute IDs other elements changes show up listed attribute value. Changing Reading Flow number disadvantages keyboard navigation today. such example restriction navigation tabbing order. common problem presentations office suites logical, perceivable, navigation order slide not match tabbing order. Sighted users see logical navigation process visual steps process assembling lawn mower). not conveyed tab order. user tab step land step problem construction model-based authoring tools Web page. model-based authoring tool, visual object provide number paths user take, such multiplexor, have output logically flows number optional electronic components drawing. Web developers are actually creating drawings perform tasks such visually model work flow. scenario, user want decide object navigate screen reader alternate input device next. recommended Tab order follow reading flow, there be instances not possible. reasons, WAI-ARIA relationship property, called aria-flowto. author provide assistive technology alternative navigation flows document best author's intent more logical people disabilities. aria-flowto recommended reading order content, so assistive overriding default reading document order user. aria-flowto not change keyboard navigation order browser. Consider first case changing basic reading flow circumvent tabbing. good example logical reading flow portal landmarks. future, user wish change reading flow based order priority navigate personalized Web application. following example, navigation follow order News Stories", listings", quotes", friends" following document reading order. However, author end user determine main content most important, followed quotes", friends", then listings." end user change order web page assistive technology interface such personalization. <html> â¦ <div role="main" title="Top News Stories" id="main" aria-flowto="stock"></div> <div role="complementary" title="television listings" id="tv"></div><div role="complementary" title="stock quotes" id="stock" aria-flowto="messages"></div><div role="complementary" title="messages friends" id="messages" aria-flowto="tv"></div> second use case such Web developer wish circumvent flow branching multiple paths Web page, requiring assistive technology present collection options user go next. important work flows business process management applications. More applications are becoming Web based, vehicle required tell user get work flow. flowto property multiple idrefs, allowing author define object user flow implement technique do following. Make object work flow accessible require assigning title WAI-ARIA label object unique HTML id. Also, html element repurposed assign WAI-ARIA role. <html>â¦ <img src="foo.jpg" id="331" title="What Invoice Value?"> <img src="foo.jpg" id="333" title="Finance Manager Approval"> <img src="foo.jpg" id="334" title="Sales Manager Approval"> â¦ Assign flowto properties visual object flow more other objects assign flowto property list IDs flows. <html> â¦ <img src="foo.jpg" id="331" title="What Invoice Value?" aria-flowto="333 <img src="foo.jpg" id="333" title="Finance Manager Approval"> <img src="foo.jpg" id="334" title="Sales Manager Approval"> â¦ element referenced flowto have have unique id. combination unique id name allow assistive technology adequately assist user retracing steps backward flow reference moving forward author sets only target user agent responsible mapping backward reference relationship. Therefore, user agent user get lost. host user agent not provide alternative navigation order; assistive technology function. Make sure visual objects are keyboard accessible Use tabindex enable objects receive focus. Actually setting focus be performed assistive technology, such alternative input device. example places drawing object document order respect tab sequence. <img src="foo.jpg" id="331" title="What Invoice Value?" aria-flowto="333 tabindex="0"><img src="foo.jpg" id="333" title="Finance Manager Approval" tabindex="0"><img src="foo.jpg" id="334" title="Sales Manager Approval" tabindex="0">â¦ assistive technology encounters Invoice Value?," know tell user choose navigate Manager Approval" Manager Approval" object. options be provided menu Invoice Value object assistive technology. choice made, then move focus target object; case screen reader, just move user location screen reader's virtual buffer. Note: WAI-ARIA not specify backward flowto properties same reason do not have reverse relationships labelledby. author incorrectly do reversal, creating whole set new problems. Rather, task reversal relationships be handled user agent accessibility API mapping assistive technology Popups drop-downs order menus, menubars, menuitems indicate menu, set aria-haspopup property type menu being launched context help, etc.) not explicitly indicated WAI-ARIA based operational characteristics mouse commands). Combo boxes, drop down lists, work differently. Controls role combobox contain list items be opened, usually drop-down. intrinsic functionality combo box, not need be explicitly indicated aria-haspopup. following html fragment shows use aria-haspopup menubar, menus, submenus. menuitems associated menubar have aria-haspopup set Also, menuitem menu aria-haspopup property leads submenu. <div role="menubar"> <!-- File menu: File menuitem aria-haspopup attribute set popup div immediately <div role="menuitem" aria-haspopup="true" id="fileMenu">File</div> <div role="menu" aria-labelledby="fileMenu"> <div role="menuitem">Open</div> <div role="menuitem">Save</div> <div role="menuitem">Save â¦</div> â¦ </div> <!-- View menu: <div role="menuitem" aria-haspopup="true" id="viewMenu">View</div> <div role="menu" aria-labelledby="viewMenu"> <div role="menuitem">Normal</div> <div role="menuitem">Outline</div> <!-- View's Zoom menuitem aria-haspopup='true' leads submenu. <div role="menuitem" aria-haspopup="true" id="zoomSubMenu">Zoom</div> <div role="menu" aria-labelledby="zoomSubMenu"> <div role="menuitem">50%</div> <div role="menuitem">75%</div> <div role="menuitem">100%</div> <div role="menuitem">150%</div> <div role="menuitem">200%</div> </div> </div></div> Managing Dynamic Changes Managing Content Presentational Changes General rules managing content displaying information Do not change element's role once been set. need change role object, first remove element DOM tree then add new element tree new role set. supporting browsers, tie CSS attribute selectors WAI-ARIA properties reduce script issue refresh). Tie CSS display property WAI-ARIA hidden state. important assistive technologies communicate directly user agent's DOM platform accessibility API supported user agent. also tie CSS visibility:hidden visibility:collapse WAI-ARIA hidden state use visibility:hidden affect layout content continue flow hidden area even content be hidden invisible. are refreshing areas asynchronously, then need designate live regions. following sections explain implement live regions use roles are considered sections default, including alert, status, log. Implementing Live Regions Live regions are parts Web page author change. Examples live regions include tables dynamically updated content stats, stock information), logs new information being added transcript logs), notification areas etc. Live regions enable assistive technologies, such screen readers, be informed updates losing users' place content. Live region settings provide hints assistive technologies process updates. Note assistive technology responsible handling updates enabling users override hints. section Live Region Properties use details apply live region properties. process help rich internet application developers set live region settings provide good user experience most assistive technology users little configuration part. applying live region properties, recommended conduct user testing. supports scripting response live regions wish customize response, such screen reader script Web page. Identify live regions Live regions are region page dynamic updates client-side scripting. Note regions page be live. See special case live regions meet needs WAI-ARIA number special case live region roles live region properties are pre-defined use. live region roles meet needs just apply specific role region Web page. Decide priority live region live region changes, user be notified change? Notifications include sound screen reader user. simplicity, use case audio notification discussion.) shorter interval changes less important information, less likely user needs hear change. simple example changes not be heard are changes time; sound second be very annoying. user hear change, change be announced immediately, soon possible, only user idle? Announcing change immediately be disorienting users, so be done sparingly. Most updates probably only be announced user idle. have decided priority live region, then decide live property value: Never spoken, then aria-live="off" Spoken user idle, then aria-live="polite" Spoken soon possible, then aria-live="assertive" more specifics, see Live Region Properties. Decide much context needed update part live region changes, much context needed understand change. Does user need hear entire live region just change user needs hear entire live region, then mark entire live region aria-atomic="true". Decide types changes are relevant live region possible types changes are: additions, removals, text. Additions means new nodes are added DOM; removals means nodes are removed DOM; text means changes are solely textual content. user hear types changes only certain types? default, user hear additions text type changes. wish explicitly define types changes, need set relevant="THE_TYPES_OF_CHANGES". more type change relevant, types are separated space. example, define additions removals relevant not text, set relevant="additions removals". 5.2.1. Live Region Properties Use Them most important concepts live regions politeness. Politeness much priority live region following politeness values are available aria-live: off, polite, assertive. aria-live="off" default. updates made region not be announced user. live="off" be sensible setting things update very frequently such GPS moving vehicle. aria-live="polite" updates made region only be announced user not currently doing anything. live="polite" be used most situations involving live regions present new information users, such updating news headlines. aria-live="assertive" updates made region are important enough be announced user soon possible, not necessary immediately interrupt user. live="assertive" be used there information user know right away, example, warning messages form validation fly. are times suppress presentation changes region updating. use aria-busy property. aria-busy suppress presentation changes region finished updating number rapid-fire changes are finished, set aria-busy then clear attribute region finished. busy, track collate changes. finally speak changes once region longer busy. live region updated, update often be announced own still make sense. example, news headline added, make sense simply announce headline. However, sometimes entire live region be read order give user enough context make sense update. example, not make sense only give current value stock saying name stock. atomic setting assistive technologies hint cases update aria-atomic="false" default. means there change region, change be presented own; not present entire region. atomic="false" generally good idea presents users only changes not cause hear repetitive information not changed. However, Web developers take care changed information, presented still be understood contextualized user. aria-atomic="true" atomic set means region be presented whole; there change, present entire region, not just change. atomic="true" make harder users understand changes changed areas are not presented independently. atomic="true" also be annoying force users listen repetitive information not changed. However, atomic="true" necessary cases change, presented be understood contextualized user. Note aria-atomic="true", attempt speak atomic region only once multiple changes occur same region been spoken yet. Not updates live region are relevant. example, oldest headline list headlines removed new headline added, removal oldest headline probably not important enough announce user. However, chat application, user leaves chat username removed list users, removal be important enough announce. relevant setting hint types changes are relevant be announced. change not relevant be treated region had live="off" not be announced. Multiple types changes be listed relevant; types are separated space. default relevant="additions text" most common use case. default applicable application, do not need provide relevant property explicitly. aria-relevant="additions" Insertion nodes live region be considered relevant. aria-relevant="removals" Removal nodes live region be considered relevant. Often, removals are not relevant nodes are removed make space new information e.g. log implemented table items are taken top. However, case something buddy list, relevant buddy removed. require screen reader speak removal, screen reader be useful do so. Use aria-relevant="removals" aria-relevant="all" be used sparingly. Notification assistive technology content removed cause unwarranted number changes be notified user. aria-relevant="text" Changes textual content nodes already exist live region be considered relevant. Textual content text equivalents, such alt attribute images. example shows live regions. regions update simultaneously, liveRegionA be spoken first message higher priority liveRegionB. <div id="liveRegionA" aria-live="assertive"> </div> <div id="liveRegionB" aria-live="polite> </div> Choosing Special Case Live Regions wish use special live region role instead applying live region properties. WAI-ARIA number standard roles are default considered sections Web page. important know use create custom live region known. Here are rules thumb: alert use alert role one-time notification shows period time away intended alert user something happened. assistive technology be notified user agent alert occurred, operating system supports type event notification. choosing use alert use alertdialog role instead something alert receive focus. alert alertdialog appear pop-up user get attention. status use status role want mark area updated periodically general status Web application. Changes status are not typically announced automatically assistive technology. However, possible configure assistive technologies, such scriptable screen reader, watch changes status bar announce Using status role also important user always check status section changes status different Web pages. Many applications provide status widgets are often found, visibly, bottom application contain variety widgets convey status. use status not guarantee respond changes status. author still put live="off" live="assertive" influence ATs treatment status. timer use timer role want mark area amount elapsed time start point, time remaining end point. text encapsulated timer current time measurement, are updated amount changes. However, timer value not necessarily machine parsable. text contents MUST be updated fixed intervals, timer paused reaches end-point. marquee- use marquee role need mark area scrolling text such stock ticker. latest text scrolled area be available DOM. marquee live region, assumed default aria-live property value log use log have live area new information added, scrolling chat log text. other regions, implied semantics indicate arrival new items reading order. log meaningful sequence new information added only end log, not arbitrary points. have chat text entry area indicate also controls aria log aria so: <div contenteditable="true" role="log" id="chatlog"></div><label id="gettext">Send Text</label><div aria-controls="chatlog" role="textbox" contenteditable="true" aria-labelledby="gettext"></div live region have other live area use case, WAI-ARIA mark area using aria-live attribute. accompanied collection attributes support live property allow create own custom live area Web page. more details regarding live regions refer live region section guide. Live region roles are applied elements having strong native semantics are not mapped consistently platform accessibility API. example TABLE element. recommended authors apply live regions DIV SPAN containers. example: <!-- Live region role used TABLE element: role not consistently mapped platform AAPI. Do not use. role="log" â¦ > â¦</table><!-- Wrap TABLE element DIV role instead: role="log" â¦ > <table â¦ > â¦ </table></div> Presentation Role section presentation role, including conditions inherited element's children. Rationale Authors devote good deal effort appearance web pages, especially true case scripted web applications. end authors employ various elements purely visual presentation. example, <img> elements are used spacing decoration; <table>s are used create column based layout. Elements used strictly presentation are semantically neutral irrelevant terms accessibility. necessary mark such elements presentational so do not appear accessible tree created user agent. example, current technique used spacer images provide blank alt text indicate image not meaningful. User agents not publish information images blank alt text platform accessibility API. are elements other <img> <table> are used solely visual presentation. element potential candidate presentation, so used, elements also need be marked semantically neutral. Note: important separate content presentation. CSS introduced new table layout functionality allow user agent layout content using CSS. are many advantages using feature CSS such browser style sheet caching improved adaptability mobile devices limited screen real estate. are, however, cases presentational markup be avoided. such instances, authors are counseled consult WCAG more detailed guidance. WAI-ARIA presentation role general device marking elements presentational. presentation role overrides element's native implicit role, informs user agent not publish element accessiblity API. fact, preferred way mark <img> elements decorative use role="presentation" attribute instead addition empty alt attribute. Here code fragment sample: <!-- informs user agent spacer images are layout only. Histories Architecture</h1><p> <a href="www.somewhere.com">Ancient Roman Architecture</a> <img src="spacer.png" role="presentation"> <a href="somewhere.else.com">19th Century Italian Architecture</a> <img src="spacer.png" role="presentation"> <a href="www.elsewhere.com">Modern Buildings more Years Old</a></p><h2>Modern Building Design</h1>â¦ resulting accessible tree shown Note none spacer <img> elements are present: root â¦ h2 Other Histories Architecture p Ancient Roman Architecture 19th Century Italian Architecture Modern Buildings more Years Old h2 Modern Building Design â¦ Inheritance Presentation Parent Element's Children general, presentation role not inherited element's children. exceptions are elements role element required owned children. Examples include <table> element list role, exceptions are discussed further other elements, only element marked presentational eliminated accessible tree. Note, however, contents are published; particular, element's textual content published, attributes element form text-equivalent are not. example, header element presentation role not appear accessible tree, text image role presentation not exposed accessible tree, contents alt attribute. shown following code fragment: <!-- implicit role semantics not affect contents. <h1 role="presentation">Presentation role overrides Header role</h1><h1>Another header</h1> <!-- hides image accessibility API not publish alt attribute contents. <img role="presentation" alt="This text not appear Accessibility API" src="â¦"> first header element absent accessible tree example, text second header element present heading. img element not exposed root â¦ Presentation role overrides Header role h1 header â¦ Be aware markup <img role="presentation" alt="non-empty alt text"â¦> fact contradictory: Declaring role presentation image layout, decorative meaningless, non-empty alt text image meaningful. recommended authors instead use empty alt text use role="presentation". Earlier was noted presentation role not generally inherited element's children. exception are roles have required owned elements. Examples include <table> element, list tree roles. list required have listitem children; tree, treeitem children. <table> element's child components are <tbody>, <thead>, <tfoot>, <th>, <tr>, <td>, <caption>. component elements not appear markup enclosing <table> root element. Thus, table used layout, component elements are present markup layout well. annotating required child elements role="presentation" error prone difficult maintain, sufficient mark table root element presentational. presentation role table component elements. However, before, contents table elements do appear accessible tree. Here example: <!-- Layout table marked role="presentation"> <tbody> <tr> <td>Some text</td> <td><p>Paragraph</p></td> </tr> <tr> <td><a href="www.somewhere.com">Link text</a></td> <td><img src="meaningful.jpg" alt="meaningful image"></td> </tr> </tbody></table> table specific elements tr, td, etc.) are eliminated tree inheriting presentation role, other elements textual content table cells are exposed: root â¦ text p Paragraph Link text img meaningful image â¦ same logic other roles have required owned children, such list. list's root element declared presentational using role="presentation", listitem elements inherit presentation role, none list item elements appear accessible tree. However, contents list item, other elements textual content, are included tree. Overriding Presentation presentation role overridden circumstances. Recall presentation role informs user agents certain elements are semantically neutral, are irrelevant accessibility. however, there aspect element makes meaningful, longer neutral, simultaneously be presentational. User Agent Implementation Guide cases element focusable. element global WAI-ARIA attribute, other aria-hidden. element referenced element's aria-controls, aria-describedby, aria-flowto, aria-labelledby, aria-owns property. element normally inherits presentation parent, element explicitly role other presentation. E.g., table cell, <td>, <table role="presentation">, cell marked button role: <td role="button" â¦> cell role button, not presentation. situations entail given element semantically relevant appear accessible tree. Marking element role="presentation" error, user agents ignore presentation role cases. Authors are advised not mark element role presentation properties; rather, use role element's purpose. Form Properties section authoring practices elements used form elements. Use aria-invalid aria-required Improve Access Forms introduction WAI-ARIA's aria-invalid state aria-required property, only presentational strategies have been available Web content authors indicate certain form fields controls are required invalid. applications, states are only available styling varying markup, inconsistent, therefore inconclusive. Web-based forms, fields required be marked asterisk. Forms submitted required data missing improperly specified be redisplayed unacceptable elements highlighted red. assistive technology user poorly served such imprecise methods, users confront inconsistent indicators consistent situations. WAI-ARIA invalid state required property provide: programmatic aria-required property be applied form element indicate required complete form. programmatic aria-invalid state be used indicate data fields have incorrect data so user have entered invalid data. Invalid data often rendered red HTML form developers. Alert User Maximum Length Value Reached text input field maximum length value host markup language's equivalent) focus, value defined length" be communicated user. text entry reaches maximum length markup language's equivalent), alert accordance user preferences capabilities) inform user maximum length given field been reached. Such alert be expressed programmatically using aural icon, using WAI-ARIA alert; user agent alert user system beep triggering operating systems' sounds" facility. maximum length markup language's equivalent) reached, user then be able move form field manner consistent tab-navigation document. Automatic Focus Changes Having user agent automatically change focus form response user input be advantageous situations change user keystrokes on-screen keyboard interaction order manually move focus field However, form auto-completion, type text input event be firmly user control not have been user's intention users disabilities become disoriented such sight impairments. Consider cases: text input field automatically moves focus new field value defined length" markup language's equivalent) reached, user have ability suppress change focus. Otherwise, user's assistivetechnology not be able make user aware error. textarea field scripted counter display number characters entered number characters available input; case, dynamic content character count) be owned textarea live region, so user keep running account many characters are left input obtain such information user query. Form Auto-submit Use caution using automatic submission form explicit user command response user-defined setting permits such behavior, expressed Priority UAAG Checkpoints user specifically chosen set user agent allow auto-submission, authors are advised not set onChange onFocus events trigger submission form provide auto-submission event completion required fields form input field. Math Editors' note: section was added part disposition comment very incomplete. section needs be reordered, so instructions use math role properly appear considerations legacy content negative examples use generic HTML approximate visual representation mathmatical expression). needs more introductory text use math. examples need better introductions, positive examples preceded negative examples, need be explained more fully. significant amounts legacy content uses images textual approximations represent mathematical expressions. Examples include use ASCII art misuse HTML tags particular, SUB SUP achieve visual approximation mathematical expression, void structure needed render mathematical expressions inherently meaningful. Use generic HTML approximate visual rendering mathematical expression: <i>a</i><i>x</i><sup>2</sup> <i>b</i><i>x</i> <i>c</i> = Accessible example same function, using math role, appropriate label, MathML rendering: <div role="math" aria-label="a times squared b times c <math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mrow> <mrow> <mi>a</mi> <mo>&#x2062; <!-- invisible times <msup> <mi>x</mi> <mn>2</mn> </msup> </mrow> <mo>+</mo> <mrow> <mi>b</mi> <mo>&#x2062; <!-- invisible times <mi>x</mi> </mrow> <mo>+</mo> <mi>c</mi> </mrow> <mo>=</mo> <mn>0</mn> </mrow> </math></div> Similarly: <i>f</i>(<i>x</i>) = <i>x</i><sup>2</sup> <i>x</i> Accessible example same function, using math role, appropriate label, MathML rendering: <div role="math"> <math xmlns='http://www.w3.org/1998/Math/MathML'> <mrow> <mrow> <mi>f</mi> <mo>&#x2061;</mo> <mrow> <mo>(</mo> <mrow> <mi>x</mi> </mrow> <mo>)</mo> </mrow> </mrow> <mo>=</mo> <mrow> <msup> <mi>x</mi> <mn>2</mn> </msup> <mo>+</mo> <mi>x</mi> <mo>&#x2212;</mo> <mn>2</mn> </mrow> </mrow> </math></div> Drag-and-Drop Support Drag-and-drop operations are common feature Rich Internet Applications Drag-and-drop features have traditionally challenged people functional disabilities. problems arise difficulty manipulating mouse, finding targets capable receiving object being dragged, actually moving object drop target. Screen readers alternate input systems assist user degree allowing user simulate click, drag, release operation. then up user find target hopefully, receive object(s) being dragged. Additionally, user not be aware desired drop operation supported source objects be selected dragging. end result be very unproductive frustrating experience. WAI-ARIA new Drag Drop properties aide Web application authors drag drop process, called aria-grabbed aria-dropeffect. property aria-grabbed applied source(s) being dragged, aria-dropeffect applied target(s). Use properties--combined best practices enabling user select appropriate drag operations assigning appropriate keyboard operations dragging dropping--will vastly improve accessibility drag drop functionality. following steps guide process. Identify draggable objects Set initial aria-grabbed state draggable interface objects. Roles typically support drag drop operations are listitem treeitem. default state objects assumed be undefined, meaning are not draggable. objects be dragged, set aria-grabbed state allow assistive technologies indicate objects are draggable potentially facilitate choosing objects grab. Objects be dragged need have determinable role. HTML tags such <div> <span> provide semantics, <select>, require set WAI-ARIA role attribute. step clearly marks elements be drag-and-drop operation. Assistive technologies, such screen readers alternate input devices, help user move focus directly grab-supporting objects having navigate elements guess be ready initiate drag operation. not necessary, authors intermediaries use CSS highlight elements be grabbed. point, qualified drop targets be determined are determined based objects being dragged--which have not yet been selected. grabbable objects be navigable using keyboard. Allow user initiate appropriate drag operation using keyboard author provide keyboard accessible way selecting more elements drag. recommended space bar be used selection. further recommended Shift+Space be used select multiple objects define contiguous set; control+space be used define noncontiguous set. object selected, aria-grabbed property be set giving ATs references been grabbed. recommended Control+M be supported indicate objects have been selected drag. Note: Selection objects be dragged differ depending type. example, list emails be selected time many time contiguous non-contiguous manner using Space key indicated However, text document better be selected positioning cursor beginning word holding down Control key using right left arrow keys mark letters wish move. Mark drop targets user completed selecting source objects drag, indicate targets receive setting aria-dropeffect properties targets. indicate assistive technology objects have been grabbed well targets are capable receiving drop. using mouse, users click, hold mouse button, drag mouse moving selected objects, implication, are longer selecting respect keyboard users, previous section, Item user initiate appropriate drag operation using keyboard", using Control+M indicate end selection phase. copy: duplicate source object be dropped target. move: source object be removed original location dropped target. link: reference short cut dragged object be created target object. execute: function supported drop target executed, using drag source input. popup: author provide popup menu dialog allow user choose drag operations move, reference) other drag functionality, such drag cancel. none: drop operation supported. default objects. Example: <div role="treeitem" aria-dropeffect="copy move popup"> CSS also be used highlight targets show sighted users objects receive drop grabbed source(s). object aria-dropeffect property set have assumed aria-dropeffect value object aria-dropeffect value ignored ATs drop operation. Implement keyboard functionality assist user executing drop. objects have been grabbed, author provide standard keyboard accessible navigation tabbing) enable user navigate desired drop target. achieve optionally support Shift+F10 invoke single select list possible drop targets user choose single drop target selected, move focus drop target.Otherwise, provide keyboard accessible way tabbing arrowing) allow user navigate drop target. user's point regard be clearly visible navigation. user drop target author provide keyboard accessible way drop selected object(s) target. Control+M be used provide most intuitive type drop, copy, move, shortcut. case only drop operation available, Control+M be used drop selected object(s) target. drop target supports additional drop operations, then author provide WAI-ARIA-enabled pop-up menu user choose supported operations list. recommended way invoke menu use Shift+Control+M key sequence focus drop target. Furthermore, aria-dropeffect property include list values indicate keyboard accessible menu provided. user selected action pop-up menu, menu close, focus returning drop target. user not choose action instead presses Escape key, application dismiss menu, returning focus drop target. Cancelling drag operation Users cancel entire drag operation time, exception, pressing Escape key. exception drop operations pop-up menu displayed previous step case, Escape simply pop-up, second Escape keystroke needed cancel drag operation. drag operation so cancelled, aria-dropeffect properties are set grabbable objects' aria-grabbed properties are set keyboard focus returns last grabbed source object. Clean-up drag/drop Once drop occurred, clean up DOM do drag-and-drop operation. include setting: aria-dropeffect properties remove altogether. aria-grabbed draggable objects objects are not grabbable omit aria-grabbed property have aria-grabbed property set Focus appropriate DOM element, role also be determinable. Other methods performing same operation drag-and-drop be best way meet accessibility requirements. example, moving mail message inbox folder, list folders be presented select list alternative drag-and-drop. Document non-recommended keyboard navigation author use alternatives keyboard navigation recommended here, be documented page. States Properties, Assistive Technologies Assistive Technologies access WAI-ARIA state properties platform accessibility API. example such API Linux's AT-SPI. user agent responsible publishing WAI-ARIA roles, states, properties relevant changes accessibility API. more information, see User Agent Implementation Guide. respect desktop applications, interaction platform accessibility API bidirectional. application information using accessibility API, request change accessible state application same accessibility API. However, respect ARIA flow information way only WAI-ARIA accessibility API. provision, currently, go other way. use accessibility API alter WAI-ARIA information DOM. reason there consistent cross-browser implementation mutation event web applications rely detect WAI-ARIA state property changed. Web applications use WAI-ARIA information rendering components. example, web application DHTML checkbox part interface, then web app visual appearance checkbox based aria-checked state. agent were change state checkbox web app receiving notification, then checked state checkbox longer agreement visual appearance. likely behaviour web app suffer. W3C investigating device-independent interfaces allow web applications receive notification changes WAI-ARIA states properties. available, WAI-ARIA be bidirectional respect platform accessibility API, allowing Assistive Technologies alter WAI-ARIA states properties. Even so, set states properties Assistive Technology likely change limited following: aria-activedescendant aria-expanded aria-grabbed aria-selected aria-sort aria-valuenow following States Properties are unlikely be manipulated assistive technology: need have greater understanding application results be adverse. aria-atomic aria-autocomplete aria-busy aria-checked aria-controls aria-describedby aria-disabled aria-dropeffect aria-flowto aria-haspopup aria-hidden aria-invalid aria-labelledby aria-level aria-live aria-multiline aria-multiselectable aria-owns aria-posinset aria-pressed aria-readonly aria-relevant aria-setsize aria-valuemax aria-valuemin aria-valuetext Design Patterns widgets structures, document keyboard interaction relevant WAI-ARIA roles, states, properties. host language not define key mappings, such hot keys, author key mappings other described here Drag-and-Drop Support, then author provide documentation key mappings. mappings be provided contents web page, case more complex application, help file documentation training materials. Note: users Mac OS X are familiar using Command key instead Control key, Command key typically reserved desktop applications OS-level integration. device platform independence be addressed WAI-ARIA primary Control modifier key WAI-ARIA widget interaction specified Control platforms, including Mac OS X. accordion alert alertdialog autocomplete button checkbox combobox datepicker dialog_modal dialog_nonmodal dialog_tooltip draganddrop grid sortablegrid landmarks link Listbox mediaplayer menu menubutton popupmenu popuphelp radiobutton richtext Site_Navigator_General Site_Navigator_Tree Site_Navigator_Tabbed_Style slider slidertwothumb spinbutton tabpanel toolbar tooltip treegrid TreeView windowsplitter wizard Global Recommendations following apply widgets. Control+Z Optionally developer choose implement undo functionality needed. recommended Control Z be used. Control+Y Optionally developer choose implement redo functionality needed. recommended Control Y be used. Control+C Copies clipboard Control+V Pastes clipboard Control+X Copies clipboard cuts Shift+F10 used bring up associated Popup Menu Widgets Widgets general navigation model user tab widget, interact controls widget then tab move focus widget tab order. extension, construct widget widget, tab move focus contained widget item tab order. down layers widgets last widget reached. example: have widgets B page. Widget Widget C Widget C Widget D. tabbing, focus land Widget then tab focus C then tab focus widget D. D last widget C C last widget more tab move focus B. Accordion Characteristics: Description: accordion component collection expandable panels associated common outer container. Panels consist header associated content region panel. primary use Accordion present multiple sections content single page scrolling, sections are peers application object hierarchy. general look similar tree root tree node expandable accordion header. user makes contents panel visible not) interacting Accordion Header. Terms understanding accordions include: accordion component: Collection panels common outer pane. accordion header: Label area accordion panel. find control expand collapse panels. accordion panel: Contents area associated accordion header. Keyboard Interaction: Tab focus accordion header, pressing Tab key moves focus following manner: interactive glyphs menus are present accordion header, focus moves order. corresponding panel expanded aria-expanded state then focus moves first focusable element panel. panel collapsed aria-expanded state missing), OR, last interactive element panel reached, Tab key press moves focus subsequent accordion panel already expanded, focus moves first focusable element subsequent panel. subsequent accordion panel expanded, focus moves first focusable element accordion component. Left arrow focus accordion header, press up/left arrow keys moves focus previous logical accordion header. focus reaches first header, further up/left arrow key presses optionally wrap first header. Right arrow focus accordion header, press down/right moves focus logical accordion header. focus reaches last header, further down/right arrow key presses optionally wrap first header arrow same left arrow Down arrow same right arrow Control+Up arrow Moves focus anywhere accordion content associated accordion header tab respectively. Control+PageUp focus accordion pane, pressing Control+PageUp moves focus accordion header previous accordion pane. focus first accordion header content, pressing Control+PageUp optionally moves focus last accordion header. Focus simply move header require Enter/Space expand/collapse accordion pane. Control+PageDown focus accordion pane, pressing Control+PageDown moves focus header accordion pane. focus last accordion header content, pressing Control+PageDown optionally moves focus first accordion header. case accordion, focus simply moves header Enter/Space expand/collapse accordion pane. End focus accordion header, End key press moves focus last accordion header. Home focus accordion header, Home key press moves focus first accordion header. Enter/Space focus accordion header, pressing Enter/Space toggles expansion corresponding panel. collapsed, panel expanded, aria-expanded state set expanded, panel collapsed aria-expanded state set Shift+Tab Generally reverse Tab. Alt+Delete deletion allowed, focus anywhere tab panel tab, pressing Alt+Delete delete current tab tab panel tabbed interface control. additional tabs remain tabbed interface, focus tab tab list. additional tabs remain, then focus moves last place held focus previous tab panel. alternative providing keystroke close tab provide context menu associated tab title. focus tab, pressing Shift-F10 pressing right mouse button open context menu close choice. warning be given user allowing delete occur. Firefox, pressing Control+PageUp Control+PageDown moves browser tabs. Firefox also supports Control+Tab Control+Shift+Tab move tabs. Internet Explorer also uses Control+Tab Control+Shift+Tab. be advantages using Control+PageUp/PageDown keys change tabs recognizable keystroke least Firefox users also supported Windows operating system move panels tabbed dialog. be aware issues using Control+PageUp/PageDown: first user tabbed interface control Web page. Here not easily switch browser tabs first moving focus tabbed interface control. be acceptable. second entire web page tabbed interface control. case user not switch browser tabs control web page ignored Control+PageUp/PageDown keypress thus letting browser access first last tab was reached. WAI-ARIA Roles, States, Properties: accordion component have role have aria-multiselectable="true" enable assistive technology, such screen reader, convey accordion multiselectable tablist. also tell user keyboard navigation matches accordion not tablist. Contained set tab/tabpanel pairs. header tab role tab. accordion panel uses role tabpanel have aria-labelledby relationship referencing correponding header having role tab tabpanel considered grouping content consisting tabpanel. accordion manage expanded/collapsed state tab maintain aria-expanded state. accordion manage selected state tab maintaining aria-selected state. accordion convey visibility tabpanel maintaining aria-hidden state. Example: Open Ajax Alliance Accordion Alert Characteristics: Description: message important information Keyboard Interaction: alert live region) not require keyboard shortcuts WAI-ARIA Roles, States, Properties: widget role alert. child role region. have child role alertdialog. Example: Open Ajax Alliance Alert Message Dialog Characteristics: Description: dialog primary purpose communicating message acquiring user response message. Examples include action confirmation warning messages, help invalid form entry. dialog be modal. Keyboard focus set element dialog. element initial focus depend nature information conveyed dialog. Simple message dialogs, described have initial focus set confirmation button button). Detail message dialogs have initial focus set element containing message. detail message dialog message following attributes: more sentence length; information punctuation essential part message, such syntax required date format; detail information user need re-use, e.g., phone number, e-mail address, error number, etc.; interactive element, such link help resource. dialog not detail message dialog, consider simple message dialog. Keyboard Interaction: See Dialog Content authors make alert dialogs modal ensuring alertdialog shown, keyboard mouse interactions only operate dialog. message area detail message dialog focusable document role so screen reader users have complete access message content, e.g., screen reader read character, word, line. message area dialog focusable focus, visual focus indicator message recommended. WAI-ARIA Roles, States, Properties: node containing elements dialog, including alert message dialog buttons, alertdialog role. Message areas have role document tabindex="0". Alert dialog aria-labelledby references title dialog. there not visible title, use appropriate aria-label instead. element role alertdialog aria-describedby referring message element role document. Example: Open Ajax Alliance Auto Complete Characteristics: Description: textbox associated drop-down list choices choices offered are filtered based information typed box. Typically, icon associated textbox triggers display drop-down list choices. editable auto-complete text entry choices are not list. example editable auto-complete URL field browsers. Keyboard Interaction: focus empty textbox, press Down Arrow, Arrow, Alt+Down Arrow, Alt+Up Arrow display entire list choices. Focus remains textbox choice highlighted. Press Down Arrow highlight first choice list. Press Down Arrow Arrow keys highlight desired choice list. Note arrows wrap textbox top bottom list reached. example, pressing down arrow last choice highlighted move focus back textbox, pressing down again move focus first item list. Likewise, focus textbox list displayed, pressing up arrow move focus last item list. choice highlighted using arrow keys, highlighted choice displayed textbox. Press Enter select highlighted choice close drop-down list. mimics behavior HTML select element. drop-down list choices displayed, move mouse pointer item list highlight textbox value not modified mouse used highlight choice. Clicking highlighted choice close drop-down update textbox selected choice. mimics behavior HTML select element. focus empty textbox, type letter. available choices begin letter typed, choices are displayed drop down. letter typed not match available choices drop-down list not displayed. focus textbox existing value type additional letters. user types letters list choices filtered so only begin typed letters are displayed. user presses arrow keys highlight particular choice, only typed letters are displayed textbox. editable auto-complete, choices match letter(s) typed, drop down list closes. non-editable auto-complete, letters do not result match list are ignored, drop down list choices remains static user presses Escape clear text field, Backspace remove letters previously typed, types additional letter results valid list choices. Navigation list choices display highlighted choice textbox works described Optional: choice highlighted arrow key navigation, input cursor left end typed entry highlighted choice displayed textbox characters input cursor selected. Typing additional character remove auto-completed portion newly typed character end previously typed characters. list be filtered based additional character(s) typed. focus textbox, press Escape there text textbox, pressing Escape closes drop-down displayed. editable autocomplete text textbox was typed user auto-completed highlighting choice using keyboard, auto-completed portion text cleared user typed characters remain textbox. drop-down list closed. completely clear textbox contents user use backspace key remove typed characters. Google search box Firefox UI works. Recommend pressing Escape key again completely textbox rather relying only backspace key. non-editable auto-complete text textbox was typed user auto-completed highlighting choice using keyboard, pressing Escape closes drop-down list leaves current choice textbox. editable non-editable auto complete text textbox was typed user mouse highlighting choice drop down navigation was NOT used), pressing Escape closes drop down leaves typed text displayed text box. Need consider pressing Escape again clear typed text. user press Down arrow Alt+Down arrow click associated icon invoke drop-down list choices again. Moving focus empty auto complete field value required invoke error default value was initially assigned, reset value default value. Moving focus auto complete field not contain valid entry invoke error default value was initially assigned, reset value default value. good practice limit number matching items drop down reasonable number. reasonable number determined task hand. list US States probably reasonable, list containing office numbers building probably not appropriate. WAI-ARIA Roles, States, Properties: widget role combobox, parent role input. child role textbox. property aria-autocomplete user input completion suggestions are provided. Example: Dojo autocomplete Button Characteristics: Description: button widgets allow user-triggered actions, are most often used discrete, atomic actions. Buttons support optional state aria-pressed Buttons state are toggle buttons. aria-pressed true button depressed, pressed false not depressed. Sometimes button launch dialog box. indicated using end button label. example â¦". Keyboard Interaction: focus button, pressing Space Enter keys action button. button activation closes containing entity launches entity, then focus moves newly opened entity. button activation not close dismiss containing entity, then focus remains button. example be Apply Recalculate button. WAI-ARIA Roles, States, Properties: button role button. button description given aria-describedby property. action associated button unavailable, button displays aria-disabled state. button toggle button, aria-pressed state. button toggled, value state true, not toggled, state false. Example: Open Ajax Alliance button text label Open Ajax Alliance button using image label Check Box Characteristics: Description: widget possible values: true, false, mixed. Many checkboxes do not use mixed value, thus are effectively dual state checkboxes. However, aria-checked state supports mixed value handle cases, such installers, option been partially installed. tristate checkbox frequently associated set dual state checkboxes. relationships tristate dual state checkboxes are: tristate unchecked none dual state checkboxes are checked. tristate checked dual state checkboxes are checked. tristate mixed dual state checkboxes are checked. tristate checkbox currently unchecked clicked mouse, then changes checked dual state checkboxes are also set checked. tristate checkbox checked clicked, then changes unchecked dual state checkboxes are switched unchecked. behavior same using keyboard: tristate checkbox focus, then Space switches checked unchecked states. tristate checkbox changes mixed state interacting dual state checkboxes associated such only are checked state. effect achieved using mouse keyboard navigating dual state checkboxes, switching checked state such only are checked rest are unchecked. effort, sometimes more user friendly track dual state checkboxes are checked. information stored, then tristate checkbox, repeated clicking pressing Space cycles checked, unchecked, mixed states. associated dual state checkboxes correspondingly switch checked, unchecked, checked subset subset tristate's mixed state Keyboard Interaction: Dual State Check Box Space key toggles selection, checking unchecking box. Tristate Check Box not checked, Space: Mixed state unknown: checks check box. Mixed state known: mixed state. checked, Space unchecks check box. mixed, Space checks check box. WAI-ARIA Roles, States, Properties: checkbox have role checkbox. checked have state aria-checked="true". not checked have state aria-checked="false". partially checked, have state aria-checked="mixed". use image render state checkbox, not appear accessibility API mapping. be accomplished using CSS render setting role presentation image. Put checkbox tab order, such setting tabindex="0". Checkboxes having logical grouping be children DOM element role group. group assign label visible referenced aria-labelledby property set ID label. Use aria-describedby property add additional help information checkbox grouping. Examples: Examples use images depict state checkbox. images have role="presentation" remove accessibility tree. Open Ajax Alliance Two-State checkbox Open Ajax Alliance Tri-State checkbox use group role) Examples use background images CSS selectors depict state checkbox. Open Ajax Alliance Tri-State checkbox images) Open Ajax Alliance Tri-State checkbox selectors) Combo Box Characteristics: Description: combo box user type field same time chose predefined value list. using keyboard user select item list. selection be able type further characters field. Keyboard Interaction: Left Arrow Right Arrow move caret edit field. Alt+Up/Down Arrow closes list. Arrow Down Arrow moves focus up down list. focus moves dropdown list, edit field updated. Page Up/Page Down next/previous pages item depending lists size. Escape closes dropdown list, returns focus edit field, not change current selection. Enter current item list, updates edit field, selected item dropdown list, closes dropdown list, returns focus input field. Typing letter character) key moves focus instance visible node title printable letter. combo boxes implement aria-autocomplete, see autocomplete design pattern. WAI-ARIA Roles, States, Properties: combobox be implemented using design patterns: combination text field, be editable, displayable list items, drop button toggle display list; wrapped form single widget role combobox. combobox, textfield be editable, displayable list items, drop button toggle display list; text fields combobox be labeled convey purpose widget. Keyboard focus widget be managed widget. Comboboxes are used extensively graphical user interfaces design pattern widget be semantically correct. first combobox design pattern: container element combobox role combobox. first element combobox input text field responsible managing keyboard focus text field list well displaying list. text field tab order. create text field using standard HTML text field form control then ensure tab order. text field not editable have have aria-readonly = true. combobox have aria-expanded = true list displayed aria-expanded = false not. element html <button>, element role button. element used toggle display combobox's drop down list. element listbox role drop down list. keyboard navigation list items navigating back text field necessary. item listbox option. Options are not tab order. Provide label combobox referencing text field combobox. use aria-label associate label combobox use HTML <label> element attribute reference text field. second combobox design pattern: first element combobox role combobox behavies input text field responsible managing keyboard focus combobox list well displaying list. text field tab order. create text field using standard HTML text field form control then ensure tab order. combobox not editable have have aria-readonly = true combobox have aria-expanded = true list displayed aria-expanded = false not. element html <button>, element role button. element used toggle display combobox's drop down list. element listbox role drop down list. keyboard navigation list items navigating back text field necessary. item listbox option. Options are not tab order. Provide label combobox referencing text field combobox. use aria-label associate label combobox use HTML <label> element attribute reference text field. combobox pattern button need not be tab order there appropriate keystroke associated input element such focus input, keystroke triggers display associated drop down list. case, Tab focus button unnecessary. same behavior select element. Example: First design pattern container element role combobox Open Ajax Combobox autocomplete='inline' Open Ajax Combobox autocomplete='list' Dojo/dijit nightly build combobox Dojo nightly build combobox autocomplete Second pattern text field role combobox Open Ajax Combobox autocomplete Open Ajax Combobox autocomplete='inline' Open Ajax Combobox autocomplete='list' Date Picker Characteristics: Description: DatePicker widget user select date date ranges. DatePicker shows month least. navigation described application. range selection possible, relevant keystroke interaction be ignored. Also navigation be optional. week be labeled corresponding calendar week number. general rule actual calendar portion date picker table structure days week calendar day numbers are layed table cells. context so assistive technology render day week; corresponding numeric calendar day, week number necessary. Consequently, best start HTML table apply WAI-ARIA semantics grid. However, author wish uses div span represent cells then DOM structure table duplicated rows marked role="row." calendar portion be displayed numbers ways, including popup associated widget, static region page. Keyboard Interaction: Keyboard navigation days are not included currently displayed month move month automatically lead day previous month. Tab other widgets, date picker widget focus tabbing Once focus received, focus repositioned today's date grid days weeks. second tab take user date picker widget. Focus initially placed today's date. Shift+Tab direction tab order. Once widget, Shift+Tab take user previous focusable element tab order. Arrow Down Arrow same day week previous week respectively. user advances end month continue previous month appropriate. Left Arrow Right Arrow advances day next, also continuum. Visually focus moved day day row row grid days weeks. Control+Page Moves same date previous year. Control+Page Down Moves same date year. Space Singleton Mode: acts toggle selecting deselecting date. Contiguous Mode: Similar selecting range text. Space first date. Shift+Arrows add selection. Pressing Space again deselects previous selections current focused date. Home Moves first day current month. End Moves last day current month. Page Moves same date previous month. Page Down Moves same date month. Enter calendar popup attached other widget text field), then Enter popup, selected date(s) are shown associated widget. calendar static region page, then Enter selected date(s). Escape case popup date picker, closes widget action. Navigation optional Do not implement keyboard navigation schemes place more calendar day tab order time impacts usability keyboard navigation. example, using HTML anchors gridcells places tab order impacting usability keyboard navigation. WAI-ARIA Roles, States, Properties: current month label representing month year. advisable use role heading not essential. have unique ID. author ensure label announced screen reader, label changes, include live region properties label element: aria-live="assertive" aria-atomic="true". container day week headers numeric days week role grid. grid aria-labelledby property value equivalent id label grid. name day week role columnheader not navigable keyboard. numeric day week role gridcell. day selected aria-selected set true, otherwise set false removed. Changes aria states, identified here, well focus, are clearly styled show user point regard days are selected. datepicker active calender day week always focus. be achieved setting tabindex day appropriate then using script give focus. Alternatively, grid container set aria-activedescendant id currently focused gridcell. Keep mind older browsers not support aria-activedescendant. Example: Open Ajax Alliance Date picker Dojo/dijit Dialog Characteristics: Description: dialog small application window application designed interrupt current processing application order prompt user enter information require response modal dialog dialog focus dialog closed submitted. specific kind modal dialog alertdialog, used convey short message user. See Dialog" design pattern. Keyboard Interaction: Keyboard navigation modal dialog aspects: Enter purpose dialog gather information, dialog have mechanism submit data gathered usually keyboard accessible button. Enter key serve default submit action. Escape be method close dialog taking action. be implemented cancel button keyboard accessible. recommended dialog also be cancelled pressing Escape key focus item. Tab Focus be held dialog cancelled submitted. user presses tab move items dialog, pressing tab focus last focusable item dialog move focus back first focusable item dialog. Shift+Tab Likewise, user shift-tabbing elements dialog, pressing shift-tab focus first focusable item dialog move focus last item dialog. Notes: current focus item Escape key behavior, press Escape be handled current item user have press Escape additional time close dialog. Even user clicks dialog application invoked dialog, focus remains dialog. dialog modal user not interact invoking application dialog displayed, there requirement make dialog moveable mouse behavior recommended. dialog closed cancelled focus return element application had focus dialog invoked. usually control opened dialog. modal dialog focus first focusable item dialog. Determining first focusable item take account elements receive focus default fields links) well items have tabindex attribute positive value. there focusable item dialog, focus placed dialog container element. Authors take care using Enter trigger default actions Enter be connected trigger other user interface element, trigger focused element. Authors ensure Enter only widget intend. WAI-ARIA Roles, States, Properties: Generally, modal dialog role dialog. simple dialog message requests confirmation sure want quit?"), then authors are advised use alertdialog role. See Dialog" design pattern more information. dialog box title provided aria-label aria-labelledby property. Example: YUI dialogs use first dialog buttons Open Ajax Alliance Dojo nightly Dialog Characteristics: Description: dialog small application window application designed interrupt current processing application order prompt user enter information require response non-modal dialog displayed focusable same time application invoked Also modal dialog, focus tab shift-tab key be maintained dialog. However, non-modal dialog have keyboard mechanism return focus application leaving dialog open. Keyboard Interaction: Escape dialog taking action Enter data gathered dialog. F6 recommended key move focus application open non-model dialog. Notes: mouse user click application dialog change focus Web application non-modal dialog usually always displayed application page, rather separate browser window not requirement. dialog box dragable mouse user equivalent behavior Drop) be offered keyboard only user. Authors take care using Enter trigger default actions Enter be connected trigger other user interface element, trigger focused element. Authors ensure Enter only widget intend. WAI-ARIA Roles, States, Properties: See Dialog Example: Experimental dojo floating non-modal pane Dialog Characteristics: Description: tooltip dialog modal dialog rendered invoking element visually connected cartoon bubble-like protrusion. displayed mouse passes element. Keyboard Interaction: Escape tooltip dialog closed pressing escape key focus dialog, mouse clicking close icon, mouse clicking dialog application. Tab Focus be held dialog cancelled submitted. user presses tab move items dialog, pressing tab focus last focusable item dialog move focus back first focusable item dialog. Shift+Tab Likewise, user shift-tabbing elements dialog, pressing shift-tab focus first focusable item dialog move focus last item dialog. Note: modal focus trapped dialog user Tab Shift+Tab key. Note: true modal dialog, user click dialog, however case tooltip dialog immediately closed. Note: tooltip dialog not be moved/dragged. Note: Other close move behavior, other behaviors modal dialog are implemented tooltip dialog. WAI-ARIA Roles, States, Properties: See Dialog Example: Dojo nightly Drag Drop Characteristics: Description: drag drop operation occur contexts support selection objects, including single multiple selection models. example tree view. tree container objects are potentially draggable. Keyboard Interaction: See Drag Drop Support, WAI-ARIA Roles, States, Properties: Draggable objects are identified using aria-grabbed state. aria-grabbed state absent, value undefined, then object partake drag drop operation. aria-grabbed false, object draggable, currently not being dragged. aria-grabbed true, object draggable currently being dragged. Other objects are potential drop targets. Drop targets are identified using aria-dropeffect property. See Drag Drop Support more detail. Example: Tic tac toe Ajax) Slide show Ajax) Grid Data Tables) Characteristics: Description: HTML table, display only, grid presents tabular data rows columns are navigable keyboard, cells be selected grid. user moves focus data cell having role gridcell, use arrow keys. column associated element role columnheader. Data cells carry role gridcell. grid also contain hierarchical rows. case role grid container be treegrid rather grid. design pattern, corresponding examples, reflect basic two-dimensional grid grids embedded gridcell. WAI-ARIA grids are not meant replace full functionality table. Consequently, there be instances need have cells span multiple columns rows WAI-ARIA not provide semantics. be achieved overlaying grid gridcell semantics HTML table provide appropriate column row span semantics. Authors ensure headers are properly marked using native header tag WAI-ARIA columnheader rowheader semantics. connection gridcell header be achieved using standard HTML attribute header. HTML, multiple column row headers data cell be identified use space separated list header ids headers attribute. WAI-ARIA grid not overlayed table, authors mark rowheader, columnheader, gridcell roles appropriate elements. gridcells span multiple columns have multiple headers, author apply aria-labelledby property cell space delimited list corresponding row column header element IDs. Gridcells span multiple rows columns be reflected keyboard navigation. grid editable data, have editable mode navigation mode. Keyboard Interaction: are modes keyboard interaction, namely, navigation mode actionable mode. Navigation Mode default mode, quick intuitive navigation grid. first Tab grid moves focus first cell first row. second Tab leaves grid moves focus tabbable item page. Subsequent Tab: Once focus been moved grid, subsequent tab presses re-enter grid return focus cell last held focus. Right/Left arrow keys navigate columns. wrap end beginning columns. Up/Down arrow keys navigate rows. wrap first last rows. Home moves focus first cell current row. End moves focus last cell current row. Page moves focus first cell current column Page Down moves focus last cell current column Selecting Cells Control+Space current column. Shift+Space current row. Control+A entire grid. Shift+Arrow contiguous cells. Shift+F8 additional cells be added previous selection accomplish non-contiguous selection. See Global Recommendations information cut, copy paste. Enter F2 pressed focus cell containing actionable item Actionable Mode following). Optionally, alphanumeric keys pressed focus actionable item Actionable Mode. Focus remains actionable item focus. Actionable Mode interaction other objects be found grid cells such edit fields, links, menu buttons, so Tab moves actionable item grid stays grid wrapping bottom. mode tabbable object cell grid be reached Tab key. multiple tabbable items are located single grid cell, Tab stops last tabbable item cell reached Tab moves tabbable item grid, wrapping last tabbable item grid. Shift+Tab moves previous actionable item grid stays grid, wrapping top. Escape exits Actionable mode user enter text perform action complete operation) returns Navigation Mode user allowed move focus elements). widget current grid cell also uses Escape key, then cancel event propagation. subsequent press Escape key returns focus parent widget. Option: author choose enable action' cell order avoid having press Enter F2 second time activate default behavior object contained cell. example, cell single link author want have enter follow link rather just move focus auto action mode be configurable cell basis utility dependent cell's content. example, cell multiple links, auto action be disabled behavior be ambiguous. Option: author choose implement Enter F2 toggle such pressing keys multiple times enter exit actionable mode. Opinion was divided point. thought be confusing others found intuitive. recommended developer use different styling selection grid not focused non-active selection often shown lighter background color). WAI-ARIA Roles, States, Properties: DOM representation grid follow HTML DOM structure, be possible use aria-owns add row table cell. edge case not be supported assistive technologies. grid container have role grid. data cells have role gridcell. row be clearly marked using <TR> HTML using role row. Column row headers be represented <TH> are using HTML table explicitly use aria role columnheader rowheader respectively. Whenever gridcell selected, set aria-selected="true". Whenever row selected, set role row aria-selected="true" allowing quickly determine entire row selected. default grid considered be editable, meaning gridcells are editable. want make grid read-only, set aria-readonly="true" document element having role="grid". make grid cells read-only. override read-only status individual grid cell, set aria-readonly property false. Example: Travel form Ajax Alliance) EMail client Ajax Alliance) Actionable, Sortable Column Header Grid Characteristics: Description: example grid headers are sortable ascending descending order based name grid column headers. design pattern matches grid design pattern specifically, author included use arrow keys permit navigation row column headers contain button sorting rows table. Sorting based data cell contents column being sorted, name column header, contents column are sorted ascending descending order. order cells change column corresponding rows move position respect sort. Keyboard Interaction: Keyboard navigation identical grid exceptions arrow key navigation headers; are not required enter actionable mode toggle sort row column corresponding header; content selection not affect selected state row column headers. Simply pressing space bar focus row column header toggles ascending/descending sort corresponding row column. recommended developer use different styling selection grid not focused non-active selection often shown lighter background color). WAI-ARIA Roles, States, Properties: same grid design pattern exception row column header, signified role columnheader rowheader respectively, aria-sort value current state sort associated row column. row column header sort grid remaining row column header aria-sort values reflect sorting impact grid. Example: Grid Email Application sortable column headers Landmark Navigation Characteristics: Description: Â Keyboard Interaction: Â WAI-ARIA Roles, States, Properties: Â Example: Juicy Studio real world example Open Ajax Alliance real world example Link Characteristics: Description: Link widget interactive reference resource locally application external resource. Keyboard Interaction: Link tab chain defined tabindex attribute. Tab moves focus Link. second tab moves focus focusable item. Enter link. Shift+F10 used bring up associated Popup Menu. WAI-ARIA Roles, States, Properties: Set role link element containing text link. Example: Â Listbox Characteristics: Description: widget user select more items list choices. Keyboard Interaction: Tab: list tabbed select first item nothing else already selected. second tab take user widget tab stop page. Up/down arrows navigate up down list. Shift+Up Arrow Shift+Down Arrow move extend selection. Typing letter several letters navigate letter item starting different letters go first item starting entire string). Shift+F10: current item associated context menu, then key combination launch menu. Selection Checkbox Space toggles checkboxes, list items are checkable Selectable List Items Space acts toggle select deselect current item. previous items have been selected, also deselects current item. Shift+Space contiguous items last selected item current item. Control+Arrow moves selecting. Control+Space toggles selection non-contiguous items, adding removing current item set selected items. Control+A recommended checkbox, link other method be used select Control+A key be used provide shortcut key. recommended developer use different styling selection list not focused non-active selection often shown lighter background color). WAI-ARIA Roles, States, Properties: listbox container role listbox. entry listbox have role option be DOM children listbox. not DOM child listbox, then be referenced listbox aria-owns. items listbox are not DOM children listbox, then set aria-setsize aria-posinset accordingly; otherwise, information be computed context user agent. listbox not part widget, then have visible aria-label referenced listbox aria-labelledby. selected list item have aria-selected="true". Example: Media Player Characteristics: Description: Â Keyboard Interaction: Â WAI-ARIA Roles, States, Properties: Â Example: Â Menu Menu bar Characteristics: Description: menu type widget offers user list choices. often list links important sections document site. menu role appropriate list links presented manner similar menu desktop application. menubar also considered form menu. menu manage focus descendants. Sometimes menu item launch dialog box. indicated using end menu item label. example â¦". presenting menu, ensure completely visible screen. Keyboard Interaction: menu bar item focus menu not open, then: Enter, Space, up down arrow keys menu places focus first menu item opened menu child menu bar. Left right arrow keys move focus adjacent menu bar item. menu open focus menu item open menu, then Enter Space menu action be open submenu). Arrow Down Arrow keys cycle focus items menu. Escape closes open menu submenu returns focus parent menu item. menu item focus submenu, pressing Enter, Space, right arrow key submenu focus first submenu item. submenu open focus menu item submenu: Arrow Down Arrow keys cycle submenu items same open menu). Escape Left Arrow key closes submenu returns focus parent menu item. Typing letter character) key moves focus instance visible node title printable letter. First item menu bar be tab order Disabled menu items receive focus have action Enter Left Arrow/Right Arrow pressed. important state menu item be clearly communicated user. Tabbing menu component closes open menus. focus menu item sub menu opened mouse behavior, pressing down arrow moves focus first item sub menu. focus menu item sub menu opened mouse behavior, pressing up arrow moves focus last item sub menu. focus submenu item, user use arrows Escape key progressively close submenus move up parent menu item(s). top level, Escape key closes sub menus focus top level menu. WAI-ARIA Roles, States, Properties: menu container options. container have role menu menubar depending implementation. menubar usually rendered horizontally. menu elements roles: menuitem, menuitemcheckbox, menuitemradio depending implementation. activation menuitem popup menu, then menuitem aria-haspopup set so assistive technology menuitem sub menu. menuitemcheckbox menuitemradio set aria-checked checked. Menu focus managed menu using tabindex aria-activedescendant. menuitem menu menubar appear tab order only not popup menu. menuitem usually DOM child menu menubar DOM tree. menuitem not DOM child menu menubar referenced menu menubar using aria-owns appear order end list menuitems. Therefore, ensure navigation menuitem order. Grouping menuitems menu menubar performed introducing element role separator. separator groups menu items menu menubar. separator not placed navigation order way interactive. Authors provide aria-orientation consistent separator's orientation menu menubar. separator not navigable not support aria-expanded state. recommended grouping menu items type menuitemradio be grouped together preceding following separator. Example: Open Ajax Alliance Menu bar Open Ajax Alliance Menu bar using CSS selectors Menu Button Characteristics: Description: menu button push button used invoke menu. normal button typically downward pointing arrow triangle visual cue triggers display menu. Menu buttons are used situations authors want provide single menu having construct complete menu bar. presenting menu, ensure completely visible screen. Keyboard Interaction: Space Enter focus button pressing Space Enter toggle display drop-down menu. Focus remains button. Down Arrow focus button drop-down menu displayed, pressing Down Arrow open drop-down menu move focus menu first menu item. focus button drop-down menu open, pressing Down Arrow move focus menu first menu item. Down Arrow focus drop-down menu, Down Arrow keys move focus menu items, top bottom. Escape focus drop-down menu, pressing Escape closes menu returns focus button. Tab focus button pressing Tab key take user tab focusable item page. focus drop-down menu, pressing Tab key take user tab focusable item page. Note be difficult achieve web page. Typing letter character) key moves focus instance visible node title printable letter. WAI-ARIA Roles, States, Properties: menu button role button. menu button aria-haspopup property, set true. See Menu design pattern information WAI-ARIA roles, states, properties associated menu invoked menu button. Example: dojo/dijit menu button Popup Menu Characteristics: Description: popup menu otherwise known Context Menu. menu menubar menu button, popup menu visible trigger widget. popup menu typically invoked, using mouse, right-click empty space. items menu depend right-click occurred, context menu was invoked. example clicking white space web page. menu items applicable page, such Page", so Clicking right different context, such empty spot desktop, invoke different menu, appropriate desktop operations, such Folder". presenting popup, ensure completely visible screen. Keyboard Interaction: keyboard navigation widget was designed work popup menubar menu widgets. goal was present desktop paradigm posting dismissing menu widgets. Shift F10 Posts Popup Menu Widget used Context Menu. Place input focus first available menuitem Popup Menu. Browser's Context Menu up element input focus not have Popup Menu attached. Experiment indicated Javascript able re-purpose post widget's popup menu instead browser's. Shift F10 used IE shortcut menu link". IE7 IE8 event.cancelBubble=true; event.returnValue=false; allow re-purposing keys used browser. case IE6, not stop bubble up keys used browser, stop bubble up OS. case Firefox other standard compliant browsers, event.stopPropagation(); event.preventDefault(); re-purpose keys. ESC Causes menu action Popup Menu. Input focus returned element Popup Menu was called. Down Arrow Moves input focus vertically menuitem. Input focus last first menuitem Down key press vice-versa key pressed. Right Left Arrow applicable, causes sub-menu post un-post. Causes action there sub-menu. Enter Enter pressed state menu Posts Popup Menu input focus element, widget attached e.g., menubutton, link, etc.: Input focus placed first menuitem menu up. Dismisses menu input focus active menuitem. Nothing input focus menuitem marked disabled. Page Down Moves input focus first menuitem view menu. Moves input focus last menuitem menus display content view. Page Moves input focus last menuitem previous view menu. Moves input focus first menuitem menus display content view. Tab following Moves input focus elements Popup Menu's tabbing order. Input focus stays Popup Menu following ESC pressed. Enter pressed input focus interactive widget/element. Typing letter character) key moves focus instance visible node title printable letter. WAI-ARIA Roles, States, Properties: See Menu design pattern information WAI-ARIA roles, states, properties popup menu. cases there visual cue context popup menu supported unnecessary add aria-haspopup property. Example: Dojo nightly build: Mouse: right click page. Keyboard: Control+Space Shift+F10 Popup Help Bubble Help) Characteristics: Description: Popup Help more descriptive, actionable, help-like text elements. contain, was designed handle, interactive elements such button, link, text field. essentially Popup Menu un-necessary keystrokes turned off. key sequence posting Popup Help was take advantage F1's tie Help paradigm calls up application Help example). Keyboard Interaction: Control+F1 Posts Popup Help widget. Input focus placed first interactive element Popup Help. Control F1 used IE help dialog box". IE7 IE8 event.cancelBubble=true; event.returnValue=false; allow re-purposing keys used browser. case IE6, not stop bubble up keys used browser, stop bubble up OS. case Firefox other standard compliant browsers, event.stopPropagation(); event.preventDefault(); re-purpose keys. exception Control F1 bring up Popup Help widget very similar Dialog Dialog Dialog described elsewhere document. Esc Causes menu action Popup Help. Input focus returned element, widget Popup Help was invoked Pressing Enter input focus glyph acts same pressing Esc. Tab following Modal behavior Moves input focus elements Popup Help's tabbing order. Input focus stays Popup Help following Esc pressed. Enter pressed input focus interactive widget/element. Non-Modal behavior Moves input focus tab-able element tabbing order following Popup Help posted. tab navigable elements Shift+Tab other keyboard conventions described here, Shift+Tab effect moving focus up rather down same conventions described modal non-modal Tab key Enter element Popup Help input focus, applicable, then popup. Input focus be placed appropriate element user presses Enter key. appropriate place move input focus not always be parent element Popup Help was invoked Nothing input focus element associated action. F6 non-modal instance, F6 key be used move focus application open non-modal window. also behavior described Dialog WAI-ARIA Roles, States, Properties: See Dialog Dialog Dialog Example: Â Radio Button Characteristics: Description: option single-select list Keyboard Interaction: Tab key enter radio group. Tab Shift+Tab radio group, focus selected radio button. none selected, focus first radio button Tab was pressed, last radio bottom Shift+Tab was pressed. focus radio button, Tab Shift+Tab exit radio group. Arrow Left Arrow moves focus previous radio button group, button. focus first item, then focus last item. Down Arrow Right Arrow moves focus radio button group, button. focus last item, then focus first item. Control+Arrow moves options updating content selecting button. Space radio button focus de-selects other radio buttons group. WAI-ARIA Roles, States, Properties: individual option uses role list radio. member group radio controls, radiogroup. Example: Open Ajax Alliance Radio button group Open Ajax Alliance Radio group using aria-activedescendant Open Ajax Alliance Radio button group using background images Open Ajax Alliance Radio button group using ARIA CSS selectors Rich Text Editor Characteristics: Description: Input control free-form text value. Keyboard Interaction: edit control provided browser; keyboard support navigating, adding, removing selecting text, so behavior not defined rich internet application. browser also provide keyboard mechanism navigating edit control. most browsers edit control put tab order page be navigated using tab shift-tab keys standard form control. rich text editor widget needs provide user interface interacting browser provided edit control. Interaction user interface editor defined here assuming toolbar used. Tab Shift+Tab not provided browser, rich text editor widget keyboard mechanism move edit control. Tab shift-tab are recommended keystrokes. toolbar other user interface component associated editor placed tab order immediately editor. set attribute text edit control user sets focus edit control, moves insertion point, text presses shift-tab move focus editor back toolbar. user toolbar toolbar behavior) desired attribute attribute. attribute invoked, attribute applied selected text editor focus moves back editor previous insertion point selection intact. Options: Rather using Shift+Tab move focus editor toolbar, key combination be used arrow, Control+Shift+Letter, etc.). eliminate need put user interface control example toolbar) tab order immediately editor component. However, there are drawbacks using different keystroke navigate user interface: not relying standard Tab/Shift+Tab behavior; difficult find key combinations are not already captured browser assistive technology. Focus stay toolbar user attribute. user then have press additional key move focus back editor. allow multiple attributes be set current selection having return back user interface add extra key sequence setting just single attribute. Requiring keystroke move focus back editor also require modifying toolbar behavior intercept keystroke know set focus back component editor) toolbar associated Optionally, developer wishes provide ability insert tab document, recommended following methods be used. Provide indent outdent buttons menu. Keyboard shortcuts buttons be Control+M indent Control+Shift+M outdent. Provide button menu toggle use Tab modes. button used, then Control+M recommended keyboard shortcut toggle button. Â WAI-ARIA Roles, States, Properties: Authors are advised not use ARIA rich text editors, rely native HTML markup. Current rich text editors typically use iframe element editable content. result, editable content implicitly mapped document role accessibility APIs. using HTML5, recommended authors use designMode contentEditable attributes. Example: Dojo nightly. CKEdtor. YUI Rich Text Editor. Site Navigator General Characteristics: Description: collection links, buttons, tabs, usually presented region left top page, persistent most pages site. quick access primary sections functions site. also communicate structure hierarchy site, allowing user quickly drill down desired page. often orientation information similar bread crumbs indicating page currently displayed relationship other pages shown navigator. navigators are overloaded support other functions, e.g., reordering pages wiki. Multiple navigators be present page. example, there be top-level navigator presented tabs top second level navigator presented sub tabs top left. site navigator patterns described guide are interactive navigation widgets designed help standardize solutions accessibility requirements have often been ignored implemented other methods are more limitted usefulness. example, most site navigators implemented static HTML provide visual indicator page currently displayed few provide same information programatically. Also, static HTML navigators often provide information page relationships visual layout not represented HTML structure. Finally, static HTML navigators require user tab element navigator ARIA-enabled navigators implement arrow key navigation navigation widget. navigator then single tab stop, dramatically reducing length tab sequence improving usability. Keyboard Interaction: See Site Navigator Tree Site Navigator Tabbed Style sections more detail. WAI-ARIA Roles, States, Properties: ARIA-enabled site navigator made up container widget ineraction navigation items. widget wrapped navigation region. requirements navigation widget, items, region are Navigation container widget: navigation items need be contained appropriate widget, such tree, menubar, toolbar, listbox. See additional guidance implementation using specific widget containers. navigator hierarchical site application, hierarchy be represented ways: using tree container widget using separate widget level hierarchy. hierarchical site application uses tabbed navigation construct, need use patterns separate widget level hierarchy. container widget implementation address following considerations requirements. Label: widget be labelled using aria-label aria-labelledby. label briefly adequately describe scope navigation. example, navigator scope entire site application, label be set name site application. Labels normally be brief, e.g., words. multiple widgets are used provide navigation hierarchy, widget label levels root widget use aria-labelledby refer label item parent widget currently active navigation element. Focus management: widget focus, item widget currently active currently displayed) recieve focus. aria-controls: aria-controls be set value content region controlled navigator. multiple navigators are used provide navigation hierarchy, navigation widgets change elements child navigator have aria-controls set value controlled child navigation widget. aria-multiselectable: navigation widget overloaded non-navigation functions functions be performed multiple elements, then widget support aria-multiselectable have set true. Navigation items: page content container represented navigator be represented element, such option, treeitem, menuitemradio, button. navigator visually page currently displayed, navigation item be able programatically communicate currently displayed status using aria-selected, aria-checked, aria-pressed. reason, navigation item not be link link contained option treeitem. states properties navigation item communicate following. Name target page function: item have accessible name. Current display status: item representing page currently displayed have aria-selected button, aria-pressed set true. other items widget have same state set false. navigation widget overloaded non-navigation functions supports multi-selection, then aria-checked be used instead aria-selected indicate display status. Operational selection status: navigator overloaded non-navigation functions, selected item have aria-selected set true selectable item have aria-selected set false. Navigation region: navigation widget be wrapped container role navigation have label same label widget. multiple widgets are used support hierarchy widgets are sequential Tab order, then navigation regions child widgets be nested navigation region parent. following sections provide detailed descriptions meet implementation requirements site navigators using specific widgets. Site Navigator Tree section build hierarchical navigator using tree widget links. Site Navigator Tabbed Style section implement tabbed style site navigation using toolbar containing toggle buttons, menubar containing menuitemradio elements, listbox containing links. are provided examples are not necessarily only implementation options meet requirements described section. Example: See Site Navigator Tree Site Navigator Tabbed Style sections examples. Site Navigator Tree Characteristics: Description: site navigator implemented using tree widget navigation hierarchical set pages, content containers application functions. example, tree-based navigator appropriate typical left-hand web site navigator outline-like structure activating link displays target link main content area displays pages are children current page navigator. typical static left-hand navigator, dynamic tree widget also provide ability user explore hierarchy site having load parent page order see titles children. improve navigation efficiency users reducing number page loads. sites applications provide support hierarchical navigation using tabbed style navigation providing tab set level hierarchy. Keyboard Interaction: tree implement keyboard navigation consistent Tree View design pattern exception. enter pressed, default action be activated node containing link even not end node. Note user still use left right arrow expand collapse nodes. Note selection keys not be implemented aria-multiselectable true. aria-multi-selectable false, default action be display content associated item, possible, move focus beginning controlled region. aria-multiselectable true aria-haspopup true current node, then enter open pop-up menu options navigating target specified current node performing supported non-navigation operations currently selected items. Focus: tree focus, item tree marked currently displayed receive focus. WAI-ARIA Roles, States, Properties: build site navigator tree, build tree treeitem link. states properties tree tree items be set aria-label aria-labelledby: navigator visual label briefly adequately scope navigation, element role tree have aria-labelledby set value element containing label. Otherwise, aria-label be used provide appropriate label. See Site Navigator more details appropriate labelling navigation widget. aria-controls: element role tree have aria-controls set value content region controlled navigator. Typically, element role main. aria-multiselectable: aria-multiselectable be set false navigator also non-navigation functions require selection. example non-navigation function ability re-arrange pages wiki. aria-selected: aria-multiselectable false, treeitem containing link page content currently displayed be indicated setting aria-selected true, other tree items have aria-selected set false. aria-multiselectable true, then aria-selected be used indicate items are selectable selected non-navigation functions. aria-checked: aria-multiselectable false, aria-checked not be specified. aria-multiselectable true, then aria-checked be set true tree item containing link page content currently displayed, other tree items have aria-checked set false. aria-haspopup: aria-multiselectable false, aria-haspopup not be specified. aria-multiselectable true, method exposing non-navigation functions provide pop-up menu containing functions. done, nodes support non-navigation functions have aria-haspopup set true pop-up menu also provide first option default navigation function. way, user perform navigation function simply pressing enter twice. user easily access non-navigation functions pressing enter then navigating pop-up menu. Navigation region: tree be wrapped container role navigation, also same label tree. Example: Â Site Navigator Tabbed Style Characteristics: Description: site navigator navigation small set pages, content containers application functions. pages set are same logical level site navigation scheme, i.e., there are parent/child relationships. often have look feel similar tabpanel. sites applications provide support hierarchical navigation using tabbed style navigation providing tab set level hierarchy. Keyboard Interaction: Option Listbox containing links listbox implement keyboard navigation consistent Listbox design pattern. addition, Enter pressed, default action associated currently focused option be executed. Note selection keys not be implemented aria-multiselectable true. aria-multi-selectable false, default action be display content specified link contained option, possible, move focus beginning controlled region. aria-multiselectable true aria-haspopup true currently focused option, then Enter open pop-up menu items navigating target specified currently focused option performing supported non-navigation operations currently selected options. Focus: listbox focus, option listbox marked currently displayed receive focus. Option Tool bar containing toggle buttons tool bar implement keyboard navigation consistent Tool bar design pattern. addition, Enter Space pressed focus button not pressed, content controlled currently focussed button be displayed aria-pressed be set true. button was previously pressed have aria-pressed set false. focus button was already pressed, focus move beginning controlled region pressed button controlled toolbar. Focus: toolbar focus, button toolbar marked currently displayed receive focus. Option Menu bar containing menuitemradio elements menu bar implement keyboard navigation consistent Menu bar design pattern. addition, Enter Space checked focus menuitemradio element not checked, content controlled currently focussed menuitemradio element be displayed aria-checked be set true. menuitemradio element was previously checked have aria-checked set false. focus menuitemradio element was already checked, focus move beginning controlled region checked menuitemradio element controlled menubar. Focus: menubar focus, menuitemradio element menubar marked currently displayed receive focus. WAI-ARIA Roles, States, Properties: Option Listbox containing links build tabbed style navigator using listbox, implement Listbox design pattern option element link. listbox, options, links have following states, properties, behaviors. aria-label aria-labelledby: navigator visual label briefly adequately scope navigation, element role listbox have aria-labelledby set value element containing label. Otherwise, aria-label be used provide appropriate label. See Site Navigator more details appropriate labelling navigation widget. multiple navigators are used support hierarchy, then navigator containing elements are controlled parent navigator have aria-labelledby set value currently active navigation item parent navigator. aria-controls: element role listbox have aria-controls set value content region controlled navigator. Typically, element role main. multiple listboxes are used support hierarchy, then listboxes control listbox have aria-controls set value controlled listbox. aria-multiselectable: aria-multiselectable be set false navigator also non-navigation functions require selection. example non-navigation function ability re-arrange pages wiki. aria-selected: aria-multiselectable false, option containing link page content currently displayed be indicated setting aria-selected true, other options have aria-selected set false. aria-multiselectable true, then aria-selected be used indicate options are selectable selected non-navigation functions. aria-checked: aria-multiselectable false, aria-checked not be specified. aria-multiselectable true, then aria-checked be set true option containing link page content currently displayed, other options have aria-checked set false. aria-haspopup: aria-multiselectable false, aria-haspopup not be specified. aria-multiselectable true, method exposing non-navigation functions provide pop-up menu containing functions. done, options support non-navigation functions have aria-haspopup set true pop-up menu also provide first item default navigation function. way, user perform navigation function simply pressing enter twice. user easily access non-navigation functions pressing enter then navigating pop-up menu. Navigation region: listbox be wrapped container role navigation, also same label listbox. Option Tool bar containing toggle buttons build tabbed style navigator using toolbar, implement Tool bar design pattern button toolbar navigation item. Note pattern not be overloaded non-navigation functions. toolbar buttons have following states, properties, behaviors. aria-label aria-labelledby: navigator visual label briefly adequately scope navigation, element role toolbar have aria-labelledby set value element containing label. Otherwise, aria-label be used provide appropriate label. See Site Navigator more details appropriate labelling navigation widget. multiple navigators are used support hierarchy, then navigator containing elements are controlled parent navigator have aria-labelledby set value currently active navigation item parent navigator. aria-controls: element role toolbar have aria-controls set value content region controlled navigator. Typically, element role main. multiple toolbars are used support hierarchy, then toolbars control toolbar have aria-controls set value controlled toolbar. aria-pressed: button page content currently displayed be indicated setting aria-pressed true other buttons toolbar have aria-pressed set false. Navigation region: toolbar be wrapped container role navigation, also same label toolbar. Option Menu bar containing menuitemradio elements build tabbed style navigator using menubar, implement Menu bar design pattern group containing menuitemradio element menubar navigation item. Note pattern not be overloaded non-navigation functions. menubar menuitemradio elements have following states, properties, behaviors. aria-label aria-labelledby: navigator visual label briefly adequately scope navigation, element role menubar have aria-labelledby set value element containing label. Otherwise, aria-label be used provide appropriate label. See Site Navigator more details appropriate labelling navigation widget. multiple navigators are used support hierarchy, then navigator containing elements are controlled parent navigator have aria-labelledby set value currently active navigation item parent navigator. aria-controls: element role menubar have aria-controls set value content region controlled navigator. Typically, element role main. multiple menubars are used support hierarchy, then menubars control menubar have aria-controls set value controlled menubar. aria-checked: menuitemradio element page content currently displayed be indicated setting aria-checked true other menuitemradio elements menubar have aria-checked set false. Navigation region: menubar be wrapped container role navigation, also same label menubar. Example: Â Slider Characteristics: Description: slider user input user value given range. Sliders typically have button such moved change current value current range slider. button be keyboard accessible. typically possible add subtract current value using directional keys such arrow keys. Keyboard Interaction: Right Arrow Arrow increase value slider. Left Arrow Down Arrow decrease value slider. Home End move minimum maximum values slider. Tab slider. Page Page Down optionally increment decrement slider given amount. Focus placed slider. visual object mouse user move, also known thumb.) Localization right left languages wish reverse left right arrows. WAI-ARIA Roles, States, Properties: slider control uses role slider role well states properties be applied element focus. slider support aria-valuenow, aria-valuemax, aria-valuemin properties. valuenow property be provided more human readable form decimal, such day week, then slider provide information using aria-valuetext. Sliders be labelled reference label be provided using aria-labelledby. Example: Open Ajax Alliance Sliders MINDTROVE Rating Widget Paciello Group slider note not examples work browser version combinations. example, note compatibility statement. Slider Characteristics: Description: multi-thumb slider slider multiple user inputs designed change maximum minimum range object controls. Keyboard Interaction: range slider author modify maximum minimum range object applications. Moving thumb end author modify corresponding maximum minimum value controlling. Tab first slider thumb. Second Tab moves slider thumb.. Third Tab moves slider thumb there are more, moves tab stop page. Shift+Tab moves backwards tabs. focus thumb: Same Slider Right Arrow Arrow increase value slider constrained value other thumb. Left Arrow Down Arrow decrease value slider constrained value other thumb. Home End move minimum maximum values slider constrained value other thumb. Page Page Down optionally increment decrement slider given amount, constrained value other thumb. Focus placed thumbs slider. thumbs are tab order. Localization right left languages wish reverse left right arrows. current value slider crosses other sliders, tab order remains same. Example. high range slider moved so current value current value low range slider, thumb visually appear be low range slider. not change tab order slider. WAI-ARIA Roles, States, Properties: thumb uses role slider thumb support aria-valuenow, aria-valuemax, aria-valuemin properties. valuenow property be provided more human readable form decimal, such day week, then slider provide information using aria-valuetext. thumb define aria-controls relationship opposing slider thumb effect corresponding aria-valuenow, aria-valuemax, aria-valuemin properties. slider thumb define aria-controls relationship thumb object controlling maximum minimum value). Sliders be labelled reference label be provided using aria-labelledby. Finally, range slider also controls live area establish controls relationship slider button lower) live area controlling. Example: Open Ajax Alliance Sliders second example page) Paciello Group double slider Spinbutton Characteristics: Description: widget users select range values. spinbutton typically use up down button keyboard. Visibly, value incremented decremented maximum minimum value reached. spinbutton usually text field display current value allow users edit value directly. Keyboard Interaction: associated text field generally supports standard text entry operations such selection characters, deletions, insertions, caret movement using Right Arrow Left Arrow keys. exception spinbutton's value space restricted associated script limits characters. example, hour-and-minute spinner allow only digits colon characters user typed other character, not change contents text field value spinbutton. Arrow increases value. Down Arrow decreases value. Home End key move maximum minimum values. Optional: Page Page Down increase decrease value larger steps. Tab key moves widget. Focus remain edit field Localization right left languages wish reverse left right arrows. WAI-ARIA Roles, States, Properties: spinbutton child composite range. current, minimum, maximum values be set WAI-ARIA properties aria-valuenow, aria-valuemin, aria-valuemax. Example: Open Ajax Alliance Spinbutton dojo/dijit nightly build Tab Panel Characteristics: Description: tabbed interface component container resources associated tab. set layered pages only page displayed time. general look similar file folder title folder. tabs are arranged edges contents most commonly are found top page. user makes contents page visible interacting title page. Sometimes referred tab container tab panel. Terms understanding Tab Panels include: tabbed interface component set tabs associated tab panels tab panel contents area associated tab tab label/title area tab panel. click activate tab panel set tabs user tab, contents corresponding tab panel made visible. tab considered tab remains active tab activated. active tab placed tab order. Only active tab be tab order. default tab specified active tabbed interface component initialized. collection tabs associated tab panels complex widget, show/hide actions well moving user's point regard content. Keyboard Interaction: Tab only active tab tab order. user reaches tabbed panel component pressing tab key active tab title focus. Left Arrow focus tab, pressing left arrow move focus previous tab tab list activate tab. Pressing left arrow focus first tab tab list move focus activate last tab list. Right Arrow focus tab, pressing right arrow move focus tab tab list activate tab. Pressing right arrow focus last tab tab list move focus activate first tab list. arrow same left arrow order support vertical tabs Down arrow same right arrow order support vertical tabs Control+Up Arrow focus anywhere tab panel, pressing Control+Up Arrow move focus tab panel. not standard behavior something want implement? necessary provide mechanism change active tab? Similar Control+PageUp/Control+PageDown Firefox switch tabs? Alt+Delete deletion allowed, focus anywhere tab panel, pressing Alt+Delete delete current tab tab panel tabbed interface control. additional tabs remain tabbed interface, focus tab tab list. alternative providing keystroke close tab provide context menu associated tab title. focus tab, pressing Shift+F10 pressing right mouse button open context menu close choice Control+PageUp focus tab panel, pressing Control+PageUp moves focus tab previous tab tab list tab. focus first tab panel tab list, pressing Control+PageUp move focus last tab tab list activate tab. Control+PageDown focus tab panel, pressing Control+PageDown moves focus tab tab tab list tab. focus last tab panel tab list, pressing Control+PageUpwill move focus first tab tab list activate tab. Regarding Control+PageUp/Control+PageDown. currently implemented Firefox move browser tabs. Firefox also supports Control+Tab Control+Shift+Tab move tabs. Internet Explorer also uses Control+Tab Control+Shift+Tab. be advantages using Control+PageUp/Control+PageDown keys change tabs recognizable keystroke least Firefox users also supported Windows operating system move panels tabbed dialog. problem user tabbed interface control Web page, not easily switch browser tabs first moving focus tabbed interface control. be acceptable. other issue entire Web page tabbed interface control case user not ever switch browser tabs control Web page ignored Control+PageUp/Control+PageDown keypress thus letting browser access first last tab was reached. WAI-ARIA Roles, States, Properties: tabbed interface component tabs associated content panels. content panel uses role tabpanel. element role tab used grouping label, providing link selecting tabpanel be rendered user. Assign aria-controls relationship tab ID tabpanel. Authors manage selected state tab maintaining aria-selected state. container role set elements role attribute set tab. Example: Open Ajax Alliance simple tab panelÂ Open Ajax Alliance tab panel using ARIA CSS selectorsÂ Tool Bar Characteristics: Description: toolbar flat non-hierarchical collection controls quick access subset functions found menubar/menu hierarchy. purpose reduce effort using functions. be too few too many controls toolbar. creating toolbars try limit number items approximately forcing users navigate excessive number items usability concern. navigation toolbars accomplished using Tab keystroke, too few controls toolbar also usability issue numerous Tab keystrokes navigate toolbars. Authors supply aria-label property toolbar application more toolbar. label information purpose toolbar; example, toolbar cut, copy, paste, clear, undo, redo controls. application many toolbars, recommended be placed container element role group allow keyboard navigation entire collection toolbars. recommended authors provide documented key combination user move focus quickly tool bar elsewhere web application, placing keyboard focus tool tool bar. further recommended authors provide access functions menubar menus avoid cluttering user interface surplus toolbars. Keyboard Interaction: Tab moves focus first enabled toolbar button. subsequent Tab moves focus toolbar Left Arrow Right Arrow keys navigate enabled buttons toolbar Direction need be adjusted Right Left languages Recommended: provide documented keystroke users move focus quickly tool bar elsewhere web application, placing focus tool tool bar. debate concerning treatment disabled toolbar buttons be focusable not? Visually, disabled buttons are grayed-out, typicially not placed navigation order. issue screen reader user buttons are not keyboard navigable. Several ways handling include: software applications MicrosoftÂ® Word, toolbars are not reachable keyboard user, features are available drop-down menus. Users set preference indicating want disabled buttons focusable. Disabled buttons are not focusable are enabled. way tool bars currently work. Disabled buttons are focusable, read screen reader disabled. WAI-ARIA Roles, States, Properties: toolbar child group. Example: Open Ajax Alliance toolbar Toolbar not require mananged focus Tooltip Widget Characteristics: Description: Popup displays description element user passes element. Supplement normal tooltip processing user agent. popup automatically user input focus widget element associated. tooltip widget be dismissed pressing Escape key other methods noted tooltip widget Dialog not receive focus time. Keyboard Interaction: Escape: Dismisses Tooltip. Note: trigger element tooltip attached, e.g., link, never actually lose input focus. Note: tooltip invoked trigger element focus, then be dismissed longer focus tooltip invoked mouseIn, then be dismissed mouseOut. Note: more then widget uses same keys, e.g., Escape, then be handled Last First manner. example, editable grid gridcells contain date fields. user Actionable mode grid then Date Field invoke Date Picker. point first press Escape key close Date Picker, second press exit Actionable mode return Navigation mode. WAI-ARIA Roles, States, Properties: WAI-ARIA role tooltip Example: Open Ajax Alliance tooltip Open Ajax Alliance tooltip using ARIA CSS selectors Dojo nightly Tree Grid Characteristics: Description: grid rows be expanded collapsed same manner tree. Tree Grid combination Treeview Table rows are expandable Keyboard Interaction: are modes keyboard interaction: Navigation Mode default mode, quick intuitive navigation grid. Tab initial tab grid focus first cell first row, often header. Once grid second tab moves grid tab stop. Once focus established grid, Tab Shift+Tab grid return cell last had focus. Left Arrow Right Arrow keys navigate columns. cell row empty, focus not move. Arrow Down Arrow down arrow moves focus first column child row, expanded. Otherwise focus moved same column row. arrow same navigation reverse. Control+Left Control+Right Arrows expand collapse rows. cell editable field, Enter key starts edit mode Escape key exits edit mode. Selecting Cells Control+Space current column. Shift+Space current row. Control+A entire grid. Shift+Arrow contiguous cells. Shift+F8 additional cells be added previous selection accomplish non-contiguous selection. See Global Recommendations information cut, copy paste. Note: author choose indent child nodes visually. be done appropriate number spacer cells marked presentation order keep headers aligned. Note: cells are used padding layout hierarchy, navigation presentational cells be prevented. Actionable Mode interaction other objects be found grid cells such edit fields, links, etc. F2 pressed anywhere grid enter Actionable Mode. Focus not be moved. Enter pressed focus actionable item enter Actionable Mode. Focus remain actionable item focus. Optionally, alphanumeric keys pressed focus actionable item enter Actionable Mode. Focus remain actionable item focus. Tab move actionable item grid stay grid wrapping bottom. mode tabbable object cell grid be reached tab key. multiple tabbable items are located single grid cell, tab stop last tabbable item cell reached tab move tabbable item grid, wrapping last tabbable item grid. Shift+Tab moves previous actionable item grid stays grid, wrapping top. Escape exits Actionable mode user enter text perform action complete operation) returns Navigation Mode user allowed move focus elements). widget current grid cell also uses Escape key, then cancel event propagation. subsequent press Escape key return focus parent widget. WAI-ARIA Roles, States, Properties: WAI-ARIA role treegrid, child element row. default treegrid considered be editable, meaning gridcells are editable. make treegrid read-only, set aria-readonly="true" document element having role="treegrid." make gridcells read-only. override read-only status individual gridcell, set aria-readonly property false. Example: visual accessible) example padding cells have been implemented see: dojo's TreeGrid example. example padding cells have not been used not accessible): Oracle's Tree Grid. Tree View Characteristics: Description: tree view component navigate hierarchical lists. made up more top level nodes. node have children be end node. Nodes children be expanded collapsed expanded child nodes are visible. collapsed children are not visible. generally sort visual indication node children be expanded. number nodes be expanded time child nodes contain children. tree node commonly used navigate directories files file system. directory nodes be expanded collapsed reveal contained subdirectories files. Terms understanding tree views include: node item tree. parent node Node children. be opened expanded closed collapsed open node Expanded node children; first-level children are visible. closed node Closed node children; children are not visible. end node Node children General behavior tree views first load tree component, top level node tab order. only node tree component tab order page time. last visited node tree control retained tab order user away tree control. Nodes be focused selected. be visual distinction focused selected nodes. Arrowing item keyboard clicking item mouse focus select node. previous selections are cleared Keyboard Interaction: Arrow Down arrow keys move visible nodes. Left arrow key expanded node closes node. Left arrow key closed end node moves focus node's parent. Right arrow key expands closed node, moves first child open node, nothing end node. Enter key default action end nodes. Typing letter key moves focus instance visible node title letter. Home key moves top node tree view. End key moves last visible node tree view. Control+Arrow item keyboard item not select Previous selections are maintained, provided Control key not released other keyboard function not performed. Control+Space focus item toggles selection item. Shift+Up Arrow selection up node. Shift+Down Arrow selection down node. Shift+Home selection up top-most node. Shift+PageDown selection down last node. keypad expands nodes. WAI-ARIA Roles, States, Properties: tree view uses WAI-ARIA role tree, tree main container element. tree contain subtrees be collapsed expanded; have role treeitem. collection treeitems be expanded collapsed are enclosed group. See XHTML example WAI-ARIA specification. Example: Open Ajax Alliance treeview Open Ajax Alliance treeview using aria-owns Open Ajax Alliance treeview using ARIA CSS selectors Dojo nightly Window Splitter Characteristics: Description: Visible separator sections Window used modify size panes. Keyboard Interaction: Window Splitter take forms, namely, fixed size variable size. Tab other widgets, tab key used move focus splitter. appear normal tab order page. second tab move focus tabbable item page. Left Arrow Right Arrow case vertical splitter keys move splitter left right. Arrow Down Arrow case horizontal splitter keys move splitter up down. End Moves splitter maximum size region. Home Moves splitter minimum size region. Enter Restore splitter previous position Home End). F6 Optionally recommended rotate window panes. Control+F6 Optionally focus directly splitter. Pressing Control+F6 again rotate forward additional splitters located page. Shift+Control+F6 optionally direction rotating backwards additional splitters located page. Note: Fixed size splitter simply implementation arrow keys. Note: group unique naming window splitter avoid confusion be created multiple splitters located same window. Note: group splitter position restore" option be available context menu. Â WAI-ARIA Roles, States, Properties: WAI-ARIA role separator. Most window splitters are expandable collapsible. Ensure splitter's aria-expanded state updated accordingly. there be multiple splitters, use aria-label, aria-labelledby, title attribute, label text splitter order accessible name computed user agent. assistive technology then convey users window splitter are controlling. Authors set aria-controls attribute element having separator role. value be IDs panes sizes controls. assistive technology then provide navigation panes. Example: Window splitter ARIA Splitter Wizard Characteristics: Description: sequence dialogs panels guiding user performing task. Keyboard Interaction: Wizard be done several ways. valid. Method Tool Bar Method Controls Default Actions Escape wizard. Enter action; last page, Method Hot Keys Control+Alt+N next, finish Control+Alt+P previous Escape cancel, exit saving Control+Alt+R reset current page default settings Control+Alt+S exit Method Dialog Authors take care using Enter trigger default actions Enter be connected trigger other user interface element, trigger focused element. Authors ensure Enter only widget intend. WAI-ARIA Roles, States, Properties: Â Example: Dojo nightly Reusable Component Libraries Rich internet applications are complex author. time, often faster use existing widget libraries implement WAI-ARIA have already gone extensive assistive technology testing cross browser testing testing ensure widgets respond desktop settings testing ensure widgets match common keyboard style guide publicly available UI component libraries have already implemented WAI-ARIA. Authors reuse such libraries start developing accessible rich internet applications. Appendices References section normative. NormativeReferences Resources referenced normatively are considered part specification. Implementations specification MUST implement requirements resources. Accessible Rich Internet Applications J. Craig, M. Cooper, L. Pappas, R. Schwerdtfeger, L. Seeman, Editors, W3C Candidate Recommendation progress), January version WAI-ARIA available http://www.w3.org/TR/2011/CR-wai-aria-20110118/. Latest version WAI-ARIA available http://www.w3.org/TR/wai-aria/. WAI-ARIA User Agent Implementation Guide. A. Snow-Weaver, M. Cooper, A. Leventhal, Editors, W3C Working Draft progress), August version WAI-ARIA User Agent Implementation Guide available http://www.w3.org/TR/2012/WD-wai-aria-implementation-20120816/. Latest version WAI-ARIA User Agent Implementation available http://www.w3.org/TR/wai-aria-implementation/. Informative References Resources referenced informatively provide useful information relevant document, do not comprise part requirements. WAI-ARIA Authoring Practices. J. Scheuhammer, M. Cooper, L. Pappas, R. Schwerdtfeger, Editors, W3C Working Draft progress), March version WAI-ARIA Authoring Practices available http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/. Latest version WAI-ARIA Authoring Practices available http://www.w3.org/TR/wai-aria-practices/. WAI-ARIA Primer. L. Pappas, R. Schwerdtfeger, M. Cooper, Editors, W3C Working Draft progress), September version WAI-ARIA Primer available http://www.w3.org/TR/2010/WD-wai-aria-primer-20100916/. Latest version WAI-ARIA Primer available http://www.w3.org/TR/wai-aria-primer/. Roadmap Accessible Rich Internet Applications Roadmap), R. Schwerdtfeger, Editor, W3C Working Draft progress), February version WAI-ARIA Roadmap available http://www.w3.org/TR/2008/WD-wai-aria-roadmap-20080204/. Latest version WAI-ARIA Roadmap available http://www.w3.org/TR/wai-aria-roadmap/. Gnome Accessibility Toolkit. Available https://developer.gnome.org/atk/unstable/. Assistive Technology-Service Provider Interface. Available https://developer.gnome.org/libatspi/stable/. Mac OS X Accessibility Protocol. Available http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Accessibility/cocoaAXIntro/cocoaAXintro.html. Document Object Model Level Core Specification, L. Wood, G. Nicol, A. Le Hors, J. Robie, S. Byrne, P. Le HÃ©garet, M. Champion, Editors, W3C Recommendation, November http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/. Latest version DOM Core available http://www.w3.org/TR/DOM-Level-2-Core/. IAccessible2. Available http://www.linuxfoundation.org/collaborate/workgroups/accessibility/iaccessible2. Microsoft Active Accessibility Available http://msdn.microsoft.com/en-us/library/ms697707.aspx. UI Automation W3C Accessible Rich Internet Applications Specification. Available http://msdn.microsoft.com/en-us/library/ee684013%28VS.85%29.aspx. Web Content Accessibility Guidelines B. Caldwell, G. Vanderheiden, L. Guarino Reid, M. Cooper, Editors, W3C Recommendation, December http://www.w3.org/TR/2008/REC-WCAG20-20081211/. Latest version WCAG available http://www.w3.org/TR/WCAG20/. Acknowledgments following people contributed development document. Participants active PFWG time publication Christy Blew Expert, UIUC) David Bolter Alex Qiang Chen Manchester) Michael Cooper James Craig Inc.) Steve Faulkner Expert, Paciello Group) Jon Gunderson Expert, UIUC) Markus Gylling Consortium) Mona Heath Expert, UIUC) Matthew King Corporation) Dominic Mazzoni Inc.) Shane McCarron Expert, Aptest) Charles McCathieNevile Mary Jo Mueller Corporation) James Nurthen Corporation) Janina Sajka Expert, Linux Foundation) Joseph Scheuhammer Expert, Inclusive Design Research Centre, OCAD University) Stefan Schnabel AG) Richard Schwerdtfeger Corporation) Lisa Seeman Expert, Aqueous) Cynthia Shelly Corporation) Andi Snow-Weaver Corporation) LÃ©onie Watson Expert, Nomensa) Gottfried Zimmermann Expert, Access Technologies Group) Other previously active PFWG participants other contributors Accessible Rich Internet Applications specification Special thanks Aaron Leventhal effort insight implemented working prototype accessibility API bindings. Special thanks Al Gilman work chair PFWG bringing ARIA technology fruition. Jim Allan Simon Bates, Chris Blouch Judy Brewer Sally Cain National Institute Blind People), Ben Caldwell Charles Chen Inc.), Christian Cohrs, Dimitar Denev Gesellschaft), Donald Evans Geoff Freed Expert, NCAM), Kentarou Fukuda Corporation), Becky Gibson Alfred S. Gilman, Andres Gonzalez Systems Inc.), Scott GonzÃ¡lez Foundation), Georgios Grigoriadis AG), Jeff Grimes Barbara Hartel, James Hawkins Inc.), Sean Hayes Corporation), John Hrvatin Corporation), Kenny Johar Australia), Shilpi Kapoor Technologies), Masahiko Kaneko Corporation), Earl Johnson Jael Kurz, Diego La Monica Webmasters Association HTML Writers Guild Rajesh Lal Corporation), Aaron Leventhal Corporation), Gez Lemon Webmasters Association HTML Writers Guild Alex Li Thomas Logan Inc.), William Loughborough Expert), Linda Mao Anders Markussen Software), Matthew May Systems Inc.), Joshue O'Connor Expert, CFIT), Artur Ortega Inc.), Lisa Pappas Technical Communication Dave Pawson Steven Pemberton Amsterdam), David Poehlman, Simon Pieters Software), Sarah Pulis Access Australia), T.V. Raman Inc.), Gregory Rosmaita Expert), Tony Ross Corporation), Martin Schaus AG), Marc Silbey Corporation), Henri Sivonen Henny Swan Software), Vitaly Sourikov, Mike Squillace Gregg Vanderheiden Expert, Trace), Ryan Williams Tom Wlodkowski, Wei Wu Enabling funders publication been funded part Federal funds U.S. Department Education, National Institute Disability Rehabilitation Research contract number ED05CO0039. content publication not necessarily reflect views policies U.S. Department Education, mention trade names, commercial products, organizations imply endorsement U.S. Government. 