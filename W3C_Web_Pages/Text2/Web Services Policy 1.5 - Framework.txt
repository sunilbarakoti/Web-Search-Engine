Web Services Policy 1.5 - Framework Web Services Policy 1.5 -Framework W3C Recommendation04 September 2007 This version: http://www.w3.org/TR/2007/REC-ws-policy-20070904 Latest version: http://www.w3.org/TR/ws-policy Previous version: http://www.w3.org/TR/2007/PR-ws-policy-20070706/ Editors: Asir S Vedamuthu, Microsoft Corporation David Orchard, BEA Systems, Inc. Frederick Hirsch, Nokia Maryann Hondo, IBM Corporation Prasad Yendluri, webMethods (A subsidiary of Software AG) Toufic Boubez, Layer 7 Technologies Ümit Yalçinalp, SAP AG. Please refer to the erratafor this document, which may include some normativecorrections. See also translations. This document is also available in these non-normative formats:PDF, PostScript, XML, and plain text. Copyright © 2007 W3C®(MIT, ERCIM,Keio), All Rights Reserved.W3C liability,trademarkand documentuse rules apply. Abstract The Web Services Policy 1.5 - Framework provides a generalpurpose model and corresponding syntax to describe the policies ofentities in a Web services-based system. Web Services Policy Framework defines a base set of constructsthat can be used and extended by other Web services specificationsto describe a broad range of service requirements andcapabilities. Status of this Document This section describes the status of this document at thetime of its publication. Other documents may supersede thisdocument. A list of current W3C publications and the latestrevision of this technical report can be found in the W3C technical reports index athttp://www.w3.org/TR/. This is the W3CRecommendation of the Web Services Policy 1.5 - Frameworkspecification. It has been produced by the Web Services Policy WorkingGroup, which is part of the W3C Web ServicesActivity. This document has been reviewed by W3C Members, by softwaredevelopers, and by other W3C groups and interested parties, and isendorsed by the Director as a W3C Recommendation. It is a stabledocument and may be used as reference material or cited fromanother document. W3C's role in making the Recommendation is todraw attention to the specification and to promote its widespreaddeployment. This enhances the functionality and interoperability ofthe Web. The Working Group released a test suite along with an implementation report. A diff-marked version againstthe previous version of this document is available. The Working Group is tracking all comments via Bugzilla and highly prefers to receive comments via thissystem. If access to Bugzilla is not feasible, you may send yourcomments to the mailing list public-ws-policy-comments@w3.orgmailing list (publicarchive). Each Bugzilla entry and email message should containonly one comment. All comments on this specification should be madefollowing the Description forIssues of the Working Group. This document was produced by a group operating under the5February 2004 W3C Patent Policy. W3C maintains a public list of anypatent disclosures made in connection with the deliverables ofthe group; that page also includes instructions for disclosing apatent. An individual who has actual knowledge of a patent whichthe individual believes contains Essential Claim(s) must disclose the information in accordancewith section 6 of the W3C Patent Policy. Table of Contents 1. Introduction 1.1 Example 2. Notations andTerminology 2.1 Notational Conventions 2.2 Extensibility 2.3 XMLNamespaces 2.4 Terminology 3. Policy Model 3.1 PolicyAssertion 3.2 PolicyAlternative 3.3 Policy 3.4 Policies ofEntities in a Web Services Based System 4. Policy Expression 4.1 Normal Form PolicyExpression 4.2 PolicyIdentification 4.3 Compact Policy Expression 4.3.1 Optional Policy Assertions 4.3.2 Policy Assertion Nesting 4.3.3 Policy Operators 4.3.4 Policy References 4.3.5 Policy Inclusion 4.3.6 Normalization 4.4 Ignorable PolicyAssertions 4.5 PolicyIntersection 4.6 Useof IRIs in Policy Expressions 5. SecurityConsiderations 5.1 Information DisclosureThreats 5.2 Spoofing and TamperingThreats 5.3 DowngradeThreats 5.4 Repudiation Threats 5.5 Denial of Service Threats 5.6 General XML Considerations 6. Conformance Appendices A. Theapplication/wspolicy+xml Media Type A.1 Registration B. References B.1 Normative References B.2 OtherReferences C. Acknowledgements(Non-Normative) 1. Introduction Web Services Policy 1.5 - Framework defines a framework and amodel for expressing policies that refer to domain-specificcapabilities, requirements, and general characteristics of entitiesin a Web services-based system. A policy is a collection ofpolicy alternatives. A policy alternative is a collection ofpolicy assertions. A policy assertion represents a requirement,capability, or other property of a behavior. A policy expressionis an XML Infoset representation of its policy, either in a normalform or in its equivalent compact form. Some policy assertionsspecify traditional requirements and capabilities that willmanifest themselves in the messages exchanged(e.g., authenticationscheme, transport protocol selection). Other policy assertions haveno wire manifestation in the messages exchanged, yet are relevantto service selection and usage (e.g., privacy policy, QoScharacteristics). Web Services Policy 1.5 - Framework provides asingle policy language to allow both kinds of assertions to beexpressed and evaluated in a consistent manner. Web Services Policy 1.5 - Framework does not cover discovery ofpolicy, policy scopes and subjects, or their respective attachmentmechanisms. A policy attachment is a mechanism forassociating policy with one or more policy scopes. A policy scope is acollection of policy subjects to which a policy applies. Apolicy subjectis an entity (e.g., an endpoint, message, resource, interaction)with which a policy can be associated. Web Services Policy 1.5 -Attachment [Web ServicesPolicy Attachment] defines such policy attachmentmechanisms, especially for associating policy with arbitrary XMLelements [XML 1.0], WSDLartifacts [WSDL 1.1,WSDL 2.0 Core Language], andUDDI elements [UDDI API 2.0,UDDI Data Structure2.0, UDDI 3.0]. Otherspecifications are free to define either extensions to themechanisms defined in Web Services Policy 1.5 - Attachment[Web Services PolicyAttachment], or additional mechanisms not covered by WebServices Policy 1.5 - Attachment [Web Services Policy Attachment],for purposes of associating policy with policy scopes andsubjects. 1.1 Example Example 1-1illustrates a security policy expression using assertions definedin WS-SecurityPolicy [WS-SecurityPolicy]: Example 1-1.Use of Web Services Policy with security policy assertions.                 (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)        <sp:SignedParts>(05)           <sp:Body/>(06)        </sp:SignedParts>(07)     </wsp:All>(08)     <wsp:All>(09)        <sp:EncryptedParts>(10)           <sp:Body/>(11)        </sp:EncryptedParts>(12)     </wsp:All>(13)   </wsp:ExactlyOne>(14) </wsp:Policy> Lines (03-07) represent one policy alternative for signing amessage body. Lines (08-12) represent a second policy alternative forencrypting a message body. Lines (02-13) illustrate the ExactlyOne policyoperator. Policy operators group policy assertions into policyalternatives. A valid interpretation of the policy above would bethat an invocation of a Web service will either sign or encrypt themessage body. 2.Notations and Terminology This section specifies the notations, namespaces, andterminology used in this specification. 2.1 Notational Conventions This specification uses the following syntax within normativeoutlines: The syntax appears as an XML instance, but values initalics indicate data types instead of literal values. Characters are appended to elements and attributes to indicatecardinality: "?" (0 or 1) "*" (0 or more) "+" (1 or more) The character "|" is used to indicate an exclusive choicebetween alternatives. The characters "(" and ")" are used to indicate that containeditems are to be treated as a group with respect to cardinality orchoice. This document relies on the XML Information Set [XML Information Set]. Information itemproperties are indicated by the style [infosetproperty]. XML namespace prefixes (see Table 2-1)are used to indicate the namespace of the element or attributebeing defined. The ellipses characters "…" are used to indicate a point ofextensibility that allows other Element or Attribute InformationItems. Elements and Attributes defined by this specification arereferred to in the text of this document using XPath 1.0 [XPATH1.0] expressions. Extensibility points are referred to using anextended version of this syntax: An element extensibility point is referred to using {any} inplace of the element name. This indicates that any element name canbe used, from any namespace, unless specified otherwise such as inSection 4.3.3 PolicyOperators. An attribute extensibility point is referred to using @{any} inplace of the attribute name. This indicates that any attribute namecan be used, from any namespace. Normative text within this specification takes precedence overnormative outlines, which in turn take precedence over the XMLSchema [XML SchemaStructures] descriptions. 2.2Extensibility Within normative outlines, in this specification, ellipses(i.e., "…") indicate a point of extensibility that allows otherElement or Attribute Information Items. Information ItemsMAY be added at the indicatedextension points but MUST NOTcontradict the semantics of the element information item indicatedby the [parent] or [owner]property of the extension. In this context, if an AttributeInformation Item is not recognized, it SHOULD be ignored. If an Element Information Itemis not recognized, it MUST be treatedas a policy assertion, unless specified otherwise such as inSection 4.3.4 PolicyReferences. 2.3 XMLNamespaces This specification uses a number of namespace prefixesthroughout; they are listed in Table 2-1.Note that the choice of any namespace prefix is arbitrary and notsemantically significant (see [XMLNamespaces]). Table 2-1. Prefixes and Namespaces used in thisspecification Prefix Namespace Specification sp http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702 [WS-SecurityPolicy] wsam http://www.w3.org/2007/05/addressing/metadata [WS-Addressing Metadata] wsp http://www.w3.org/ns/ws-policy This specification wsu http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd [WS-Security 2004] xs http://www.w3.org/2001/XMLSchema [XMLSchema Structures] All information items defined by this specification areidentified by the XML namespace URI [XMLNamespaces] http://www.w3.org/ns/ws-policy.A normative XMLSchema [XML SchemaStructures, XML SchemaDatatypes] document can be obtained indirectly bydereferencing the namespace document at the WS-Policy 1.5 namespaceURI. It is the intent of the W3C Web Services Policy Working Groupthat the Web Services Policy 1.5 - Framework and Web ServicesPolicy 1.5 - Attachment XML namespace URI will not changearbitrarily with each subsequent revision of the corresponding XMLSchema documents as the specifications transition through CandidateRecommendation, Proposed Recommendation and Recommendation status.However, should the specifications revert to Working Draft status,and a subsequent revision, published as a WD, CR or PR draft,results in non-backwardly compatible changes from a previouslypublished WD, CR or PR draft of the specification, the namespaceURI will be changed accordingly. Under this policy, the following are examples of backwardscompatible changes that would not result in assignment of a new XMLnamespace URI: Addition of new global element, attribute, complexType andsimpleType definitions. Addition of new elements or attributes in locations covered by apreviously specified wildcard. Modifications to the pattern facet of a type definition forwhich the value-space of the previous definition remains valid orfor which the value-space of the vast majority of instances wouldremain valid. Modifications to the cardinality of elements (i.e. modificationsto minOccurs or maxOccurs attribute value of an elementdeclaration) for which the value-space of possible instancedocuments conformant to the previous revision of the schema wouldstill be valid with regards to the revised cardinality rule. 2.4 Terminology The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL","SHALL NOT", "SHOULD", "SHOULDNOT", "RECOMMENDED","MAY", and "OPTIONAL" in this document are to be interpretedas described in RFC 2119 [IETF RFC2119]. We introduce the following terms that are used throughout thisdocument: collection The items in a collection in this specification areunordered and may contain duplicates. ignorablepolicy assertion An ignorable policy assertion is an assertion that may beignored for purposes of determining the compatibility ofalternatives in policy intersection in a lax mode (as defined in4.5Policy Intersection). nested policyexpression A nested policy expression is a policy expressionthat is an Element Information Item in the[children] property of a policyassertion. policy A policy is a potentially empty collection of policyalternatives. policyalternative A policy alternative is a potentially empty collection of policyassertions. policyassertion A policy assertion represents a requirement, acapability, or other property of a behavior. policyassertion parameter A policy assertion parameter qualifies the behaviorindicated by a policy assertion. policy assertiontype A policy assertion type represents a class of policy assertionsand implies a schema for the assertion and assertion-specificsemantics. policyattachment A policy attachment is a mechanism for associatingpolicy with one or morepolicy scopes. policyexpression A policy expression is an XML Infoset representation of apolicy, either in a normalform or in an equivalent compact form. policy scope A policy scope is a collection of policy subjects towhich a policy may apply. policy subject A policy subject is an entity (e.g., an endpoint,message, resource, operation) with which a policy can be associated. 3. PolicyModel This section defines an abstract model for policies and foroperations upon policies. The descriptions below use XML Infoset terminology forconvenience of description. However, this abstract model itself isindependent of how it is represented as an XML Infoset. 3.1Policy Assertion [Definition: A policy assertionrepresents a requirement, a capability, or other property of abehavior.] A policy assertion identifies a behavior thatis a requirement or capability of a policy subject. [Definition: A policysubject is an entity (e.g., an endpoint, message, resource,operation) with which a policycan be associated. ] Assertions indicate domain-specific (e.g.,security, transactions) semantics and are expected to be defined inseparate, domain-specific specifications. An assertion MAY indicate that it is an ignorable policyassertion (see 4.4Ignorable Policy Assertions). [Definition: An ignorable policyassertion is an assertion that may be ignored for purposes ofdetermining the compatibility of alternatives in policyintersection in a lax mode (as defined in 4.5 PolicyIntersection).] By default, an assertion is not ignorable forpolicy intersection. Assertions are typed by the authors that define them. [Definition: A policy assertiontype represents a class of policy assertions and implies a schema forthe assertion and assertion-specific semantics.] The policyassertion type is identified only by the XML Infoset[namespace name] and [local name]properties (that is, the qualified name or QName) of the rootElement Information Item representing the assertion. Assertions ofa given type MUST be consistentlyinterpreted independent of their policy subjects. Authors MAY define that anassertion contains a policy expression (as defined in 4. Policy Expression) as one ofits [children]. Nestedpolicy expression(s) are used by authors to further qualify oneor more specific aspects of the parent policy assertion. Thequalification may indicate a relationship or context between theparent policy assertion and a nested policy expression. For examplewithin a security domain, security policy authors may define anassertion describing a set of security algorithms to qualify thespecific behavior of a security binding assertion. A parent policyassertion of one domain may also serve as a container for thenested policy expression from another domain. The XML Infoset of a policy assertion MAY contain a non-empty[attributes] property and/or a non-empty[children] property. Such properties, excludingthe Attribute and Element Information Items from the WS-Policylanguage XML namespace name are policy assertion parameters andMAY be used to parameterize thebehavior indicated by the assertion. [Definition: A policy assertionparameter qualifies the behavior indicated by a policy assertion.]For example, an assertion identifying support for a specificreliable messaging mechanism might include an attribute informationitem to indicate how long an endpoint will wait before sending anacknowledgement. Authors should be cognizant of the processing requirements whendefining complex assertions containing policy assertion parameters ornested policy expressions.Specifically, authors are encouraged to consider when the identityof the root Element Information Item alone is enough to convey therequirement or capability. 3.2Policy Alternative [Definition: A policy alternative isa potentially empty collection of policy assertions.] [Definition: The items in acollection in this specification are unordered and maycontain duplicates. ] An alternative with zero assertions indicatesno behaviors. An alternative with one or more assertions indicatesbehaviors implied by those, and only those assertions. Assertions within an alternative are not ordered, and thusaspects such as the order in which behaviors (indicated byassertions) are applied to a subject are beyond the scope of thisspecification. However, authors can write assertions that controlthe order in which behaviors are applied. A policy alternative MAY containmultiple assertions of the same type. Mechanisms for determiningthe aggregate behavior indicated by the assertions (and theirPost-Schema-Validation Infoset (PSVI) (See XML Schema Part 1[XML Schema Structures])content, if any) are specific to the assertion type and are outsidethe scope of this document. If policy assertion authors did notspecify the semantics of repetition of policy assertions of a type thatallows neither parameters nor nestedpolicy expressions within a policy alternative, then repetition issimply redundancy, and multiple assertions of the assertiontype within a policy alternative have the same meaningas a single assertion of the typewithin the policy alternative. Note: Depending on the semantics of the domain specific policyassertions regardless if they are qualified by nested policyexpressions, a combination of the policy assertions can be requiredto specify a particular behavior. For example, a combination of twoor three assertions from the WS-SecurityPolicy [WS-SecurityPolicy] specification isused to indicate message-level security for protecting messages -that is, the sp:AsymmetricBinding assertion is used toindicate message-level security, the sp:SignedPartsassertion is used to indicate the parts of a message to beprotected and the sp:EncryptedParts assertion is usedto indicate the parts of a message that requireconfidentiality. 3.3 Policy [Definition: Apolicy is a potentially empty collection of policyalternatives. ] A policy with zero alternatives contains nochoices; a policy with one or more alternatives indicates choice inrequirements or capabilities within the policy. Alternatives are not ordered, and thus aspects such aspreferences between alternatives in a given context are beyond thescope of this specification. Alternatives within a policy may differ significantly in termsof the behaviors they indicate. Conversely, alternatives within apolicy may be very similar. In either case, the value orsuitability of an alternative is generally a function of thesemantics of assertions within the alternative and is thereforebeyond the scope of this specification. 3.4 Policies ofEntities in a Web Services Based System Applied to a Web services based system, policy is used to convey conditions on an interactionbetween entities (requester application, provider service, Webinfrastructure component, etc). An interaction involves one or moremessage exchanges between two entities. It is the responsibility ofassertionauthors to define the interaction scope of an assertion includingany constraints on the policy subjects to which the assertion may beattached and a clear specification of the message (s) within thatinteraction scope to which the assertion applies. Any entity in a Web services based system may expose a policy toconvey conditions under which it functions. Satisfying assertionsin the policy usually results in behavior that reflects theseconditions. For example, if two entities - requester and provider -expose their policies, a requester might use the policy of theprovider to decide whether or not to use the service. A requesterMAY choose any alternative since eachis a valid configuration for interaction with the service, but arequester MUST choose only a singlealternative for an interaction with a service since each representsan alternative configuration. A policyassertion is supported by an entity in the web services basedsystem if and only if the entity satisfies the requirement (oraccommodates the capability) corresponding to the assertion. Apolicyalternative is supported by an entity if and only if the entitysupports all the assertions in the alternative. And, a policy is supported by an entity if andonly if the entity supports at least one of the alternatives in thepolicy. Note that although policy alternatives are meant to bemutually exclusive, it cannot be decided in general whether or notmore than one alternative can be supported at the same time. Note that an entity may be able to support a policy even if theentity does not understand the type of each assertion in thepolicy; the entity only has to understand the type of eachassertion in a policy alternative that the entity supports. Thischaracteristic is crucial to versioning and incremental deploymentof new assertions because this allows a provider's policy toinclude new assertions in new alternatives while allowing entitiesto continue to use old alternatives in a backward-compatiblemanner. 4.Policy Expression This section describes how to convey policy in an interoperable form, using the XMLInfoset representation of a policy. [Definition: Apolicy expression is an XML Infoset representation of apolicy, either in a normalform or in an equivalent compact form.] The normal form (see Section 4.1 Normal Form PolicyExpression) of a policy expression is the moststraightforward XML Infoset representation of the policy datamodel. Equivalent, alternative representations allow policy authorsto compactly express a policy (see Section 4.3 Compact PolicyExpression). Policy authors might be more interested in thecompact form (see Section 4.3 Compact PolicyExpression), where the outlines and definitions describewhat is valid with regards to the policy language XML Schema. While the policy language XML Schema is a representation of thecompact form, the normal form is more restrictive as outlined inSection 4.1 Normal FormPolicy Expression. 4.1 Normal Form PolicyExpression To facilitate interoperability, this specification defines anormal form for policy expressions that is astraightforward XML Infoset representation of a policy, enumeratingeach of its alternatives that in turn enumerate eachof their assertions. The schema outline for thenormal form of a policy expression is as follows: (01) <wsp:Policy … >(02)   <wsp:ExactlyOne>(03)     ( <wsp:All> ( <Assertion …> … </Assertion> )* </wsp:All> )*(04)   </wsp:ExactlyOne>(05) </wsp:Policy> The following describes the Element Information Items defined inthe schema outline above: /wsp:Policy A policy expression. /wsp:Policy/wsp:ExactlyOne A collection of policy alternatives. If there are no ElementInformation Items in the [children] property,there are no admissible policy alternatives, i.e., no behavior isadmissible. /wsp:Policy/wsp:ExactlyOne/wsp:All A policy alternative; a collection of policy assertions. Ifthere are no Element Information Items in the[children] property, this is an admissible policyalternative that is empty, i.e., no behavior is specified. /wsp:Policy/wsp:ExactlyOne/wsp:All/* XML Infoset representation of a policy assertion. /wsp:Policy/@{any} Additional attributes MAY bespecified but MUST NOT contradict thesemantics of the [owner element]; if an attributeis not recognized, it SHOULD beignored. If an assertion in the normal form of a policyexpression contains a nested policy expression, thenested policy expression MUST containat most one policy alternative (see 4.3.2 Policy AssertionNesting). To simplify processing and improve interoperability, the normalform of a policy expression SHOULD beused where practical. For example, the following is the normal form of a policyexpression. (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)        <sp:SignedParts>(05)           <sp:Body/>(06)        </sp:SignedParts>(07)     </wsp:All>(08)     <wsp:All>(09)        <sp:EncryptedParts>(10)           <sp:Body/>(11)        </sp:EncryptedParts>(12)     </wsp:All>(13)   </wsp:ExactlyOne>(14) </wsp:Policy> Lines (03-07) and Lines (08-12) express the two alternatives inthe policy. If the first alternative is selected, the message bodyneeds to be signed [WS-SecurityPolicy] is supported;conversely, if the second alternative is selected, the message bodyneeds to be encrypted. 4.2 Policy Identification A policyexpression MAY be associated withan IRI [IETF RFC 3987]. Theschema outline for attributes to associate an IRI is asfollows: (01) <wsp:Policy ( Name="xs:anyURI" )?(02)                 ( wsu:Id="xs:ID" | xml:id="xs:ID" )?(03)             … >(04)   …(05) </wsp:Policy> The following describes the Attribute Information Items listedand defined in the schema outline above: /wsp:Policy/@Name The identity of the policy expression as an absolute IRI[IETF RFC 3987]. If omitted,there is no implied value. This IRI MAY be used to refer to a policy from other XMLdocuments using a policy attachment mechanism such as thosedefined in WS-PolicyAttachment [Web Services Policy Attachment].[Definition: A policy attachment is amechanism for associating policy with one or more policy scopes.] [Definition: A policyscope is a collection of policy subjects to which a policy mayapply.] /wsp:Policy/(@wsu:Id | @xml:id) The identity of the policy expression as an IDwithin the enclosing XML document. If omitted, there is no impliedvalue. The constraints of the XML 1.0 [XML1.0] ID type MUST be met. To refer to this policyexpression, an IRI-reference MAY beformed using this value per Section 4.2 of WS-Security[WS-Security 2004] when@wsu:Id is used. Note: The use of xml:id attribute in conjunction withCanonical XML 1.0 is inappropriate as described in Appendix C ofxml:id Version 1.0 [XML ID] andthus this combination must be avoided (see [C14N 1.0 Note]). For example, a policyexpression identified using xml:id attribute shouldnot be signed using XML Digital Signature when Canonical XML 1.0 isbeing used as the canonicalization method. Note: Canonical XML 1.1 [C14N11] isintended to address the issues that occur with Canonical XML 1.0with regards to xml:id. The W3C XML SecuritySpecifications Maintenance WG has been chartered to address how tointegrate Canonical XML 1.1 with XML Security, including XMLSignature [SecSpecMaintWG] (Seehttp://www.w3.org/2007/xmlsec/.) The following example illustrates how to associate a policyexpression with the absolute IRI"http://www.example.com/policies/P1": (01) <wsp:Policy        Name="http://www.example.com/policies/P1"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <!-- Details omitted for readability -->(03) </wsp:Policy> The following example illustrates how to associate a policyexpression with the IRI-reference "#P1": (01) <wsp:Policy        wsu:Id="P1"        xmlns:wsp="http://www.w3.org/ns/ws-policy"        xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" >(02)   <!-- Details omitted for readability -->(03) </wsp:Policy> 4.3 Compact Policy Expression To express a policy in amore compact form while still using the XML Infoset, thisspecification defines three constructs: an attribute to decorate anassertion,semantics for recursively nested policy operators, and a policyreference/inclusion mechanism. Each sub section below describes aconstruct and its equivalent normal form. To interpret a compactexpression in an interoperable form, a policy expression in thecompact form can be converted (see Section 4.3.6 Normalization) to the normal form(see Section 4.1 NormalForm Policy Expression). A policyexpression consists of a wsp:Policy wrapperelement and zero or more child and descendent elements. 4.3.1 Optional PolicyAssertions To indicate that a policy assertion is optional, thisspecification defines an attribute that is a compact authoringstyle for expressing a pair of alternatives, one with and one withoutthat assertion. The schema outline for this attribute is asfollows: (01) <Assertion ( wsp:Optional="xs:boolean" )? …> … </Assertion> The following describes the Attribute Information Item definedin the schema outline above: /Assertion/@wsp:Optional If the actual value (See XML Schema Part 1 [XML Schema Structures]) is true, theexpression of the assertion is semantically equivalent to thefollowing: (01) <wsp:ExactlyOne>(02)   <wsp:All> <Assertion …> … </Assertion> </wsp:All>(03)   <wsp:All />(04) </wsp:ExactlyOne> If the actual value (See XML Schema Part 1 [XML Schema Structures]) is false, theexpression of the assertion is semantically equivalent to thefollowing: (01) <wsp:ExactlyOne>(02)   <wsp:All> <Assertion …> … </Assertion> </wsp:All>(03) </wsp:ExactlyOne> Omitting this attribute is semantically equivalent to includingit with a value of false. Policy expressions should not includethis attribute with a value of false, but policy parsers mustaccept this attribute with a value of false. For example, the following compact policy expression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <sp:IncludeTimestamp wsp:Optional="true" />(03) </wsp:Policy> is equivalent to the following normal form policyexpression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:IncludeTimestamp />(05)     </wsp:All>(06)     <wsp:All />(07)   </wsp:ExactlyOne>(08) </wsp:Policy> The @wsp:Optional attribute in Line (02) of thefirst policy expression indicates that the assertion in Line (02)is to be included in a policy alternative whilst excluded fromanother; it is included in Lines (03-05) and excluded in Line (06).Note that @wsp:Optional does not appear in the normalform of a policy expression. 4.3.2 Policy Assertion Nesting Any policyassertion MAY contain a policyexpression. [Definition: A nested policyexpression is a policy expression that is an ElementInformation Item in the [children] property of apolicyassertion.] The schema outline for a nestedpolicy expression is: (01) <Assertion …>(02)   …(03)   ( <wsp:Policy …> … </wsp:Policy> )?(04)   …(05) </Assertion> The following describes additional processing constraints on theoutline listed above: /Assertion/wsp:Policy This indicates that the assertion contains a nested policyexpression. If there is no wsp:Policy ElementInformation Item in the [children] property, theassertion has no nested policy expression. If the schema outline for an assertion type requires a nestedpolicy expression but the assertion does not further qualify one ormore aspects of the behavior indicated by the assertion type (i.e.,no assertions are needed in the nested policy expression), theassertion MUST include an empty<wsp:Policy/> Element Information Item in its[children] property. As explained in Section4.3.3 Policy Operators, thisis equivalent to a nested policy expression with a singlealternative that has zero assertions. Note: This specification does not define processing forarbitrary wsp:Policy Element Information Items in thedescendants of an assertion parameter, e.g., in the[children] property of one of the[children] as in: (01)<wsp:Policy>(02)   <Lorem>(03)       <Ipsum>(04)           <wsp:Policy> (05)           …(06)           </wsp:Policy>(07)       </Ipsum>(08)   </Lorem>(09)</wsp:Policy> Policy assertions containing a nested policy expression arenormalized recursively. The nesting of a policy expression (and awsp:Policy child) is retained in the normal form, butin the normal form, each nested policy expression contains at mostone policy alternative. If an assertion A contains a nested policyexpression E, and if E contains more than one policy alternative, Ais duplicated such that there are as many instances of A as choicesin E, and the nested policy expression of a duplicate A contains asingle choice. This process is applied recursively to theassertions within those choices and to their nested policyexpression, if any. Intuitively, if a compact policy is thought ofas a tree whose branches have branches etc, in the normal form, apolicy is a stump with straight vines. For example, consider the following policy expression withnested policy expressions in a compact form: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <sp:TransportBinding>(03)     <wsp:Policy>(04)       <sp:AlgorithmSuite>(05)         <wsp:Policy>(06)           <wsp:ExactlyOne>(07)             <sp:Basic256Rsa15 />(08)             <sp:TripleDesRsa15 />(09)           </wsp:ExactlyOne>(10)         </wsp:Policy>(11)       </sp:AlgorithmSuite>(12)       <sp:TransportToken>(13)         <wsp:Policy>               <sp:HttpsToken>                 <wsp:Policy/>               </sp:HttpsToken>(15)         </wsp:Policy>(16)       </sp:TransportToken>           <!-- Details omitted for readability -->(17)      </wsp:Policy>(18)    </sp:TransportBinding>(19) </wsp:Policy> Lines (02-18) in this policy expression contain a singletransport binding security policy assertion; within its nestedpolicy expression (Lines 03-17), is an algorithm suite assertion(Lines 04-11) whose nested policy expression (Lines 05-10) containstwo policy alternatives (Lines 07-08). Generally, a nested policyexpression implies recursive processing; in the example above, thebehavior indicated by the transport binding assertion requires thebehavior indicated by one of the assertions within the algorithmsuite assertion. The example above is equivalent to the following: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:TransportBinding>(05)         <wsp:Policy>(06)           <sp:AlgorithmSuite>(07)             <wsp:Policy>(08)               <sp:Basic256Rsa15 />(09)             </wsp:Policy>(10)           </sp:AlgorithmSuite>(11)           <sp:TransportToken>(12)             <wsp:Policy>                   <sp:HttpsToken>                     <wsp:Policy/>                   </sp:HttpsToken>(14)             </wsp:Policy>(15)           </sp:TransportToken>               <!-- Details omitted for readability -->(16)         </wsp:Policy>(17)       </sp:TransportBinding>(18)     </wsp:All>(19)     <wsp:All>(20)       <sp:TransportBinding>(21)         <wsp:Policy>(22)           <sp:AlgorithmSuite>(23)             <wsp:Policy>(24)               <sp:TripleDesRsa15 />(25)             </wsp:Policy>(26)           </sp:AlgorithmSuite>(27)           <sp:TransportToken>(28)             <wsp:Policy>                   <sp:HttpsToken>                     <wsp:Policy/>                   </sp:HttpsToken>(30)             </wsp:Policy>(31)           </sp:TransportToken>               <!-- Details omitted for readability -->(32)         </wsp:Policy>(33)       </sp:TransportBinding>(34)     </wsp:All>(35)   </wsp:ExactlyOne>(36) </wsp:Policy> In the listing above, the transport binding and its nestedpolicy expression have been duplicated once for each of the nestedalternatives in Lines (07-08) of the compact policy. The firstalternative (Lines 03-18) contains a single nested algorithm suitealternative (Line 08) as does the second alternative (Lines 19-34and 24). 4.3.3Policy Operators Policies are used to conveya set of capabilities, requirements, and general characteristics ofentities (see 1. Introduction).These are generally expressible as a set of policyalternatives. Policy operators (wsp:Policy,wsp:All and wsp:ExactlyOne elements) areused to group policy assertions into policyalternatives. To compactly express complex policies, policyoperators MAY be recursively nested;that is, one or more instances of wsp:Policy,wsp:All, and/or wsp:ExactlyOneMAY be nested withinwsp:Policy, wsp:All, and/orwsp:ExactlyOne. The schema outline for the wsp:Policy element inthe compact form is as follows: (01) <wsp:Policy … >(02)   ( <wsp:Policy …>…</wsp:Policy> |(03)     <wsp:ExactlyOne>…</wsp:ExactlyOne> |         (04)     <wsp:All>…</wsp:All> |(05)     <wsp:PolicyReference … >…</wsp:PolicyReference> |(06)     …(07)   )* (08) </wsp:Policy> The following describes the Attribute and Element InformationItems defined in the schema outline above: /wsp:Policy This element is the wsp:Policy operator. /wsp:Policy/wsp:Policy This element is a nested wsp:Policy operator. /wsp:Policy/wsp:ExactlyOne This element is a nested wsp:ExactlyOneoperator. /wsp:Policy/wsp:All This element is a nested wsp:All operator. /wsp:Policy/wsp:PolicyReference This element references a policy expression to be included perSection 4.3.5 PolicyInclusion. /wsp:Policy/@{any} Additional attributes MAY bespecified but MUST NOT contradict thesemantics of the [owner element]; if an attributeis not recognized, it SHOULD beignored. /wsp:Policy/{any} Additional elements MAY bespecified. Such elements MUST NOT usethe Web Services Policy language XML namespace name andMUST NOT contradict the semantics ofthe [parent element]. The schema outline for the wsp:ExactlyOne elementin the compact form is as follows: (01) <wsp:ExactlyOne>(02)   ( <wsp:Policy … >…</wsp:Policy> |(03)     <wsp:ExactlyOne>…</wsp:ExactlyOne> |(04)     <wsp:All>…</wsp:All> |(05)     <wsp:PolicyReference … >…</wsp:PolicyReference> |(06)     …(07)   )* (08) </wsp:ExactlyOne> The following describes the Attribute and Element InformationItems defined in the schema outline above: /wsp:ExactlyOne This element is the wsp:ExactlyOne operator. /wsp:ExactlyOne/wsp:Policy This element is a nested wsp:Policy operator. /wsp:ExactlyOne/wsp:ExactlyOne This element is a nested wsp:ExactlyOneoperator. /wsp:ExactlyOne/wsp:All This element is a nested wsp:All operator. /wsp:ExactlyOne/wsp:PolicyReference This element references a policy expression to be included perSection 4.3.5 PolicyInclusion. /wsp:ExactlyOne/{any} Additional elements MAY bespecified. Such elements MUST NOT usethe Web Services Policy language XML namespace name andMUST NOT contradict the semantics ofthe [parent element]. The schema outline for the wsp:All element in thecompact form is as follows: (01) <wsp:All>(02)   ( <wsp:Policy … >…</wsp:Policy> |(03)     <wsp:ExactlyOne>…</wsp:ExactlyOne> |(04)     <wsp:All>…</wsp:All> |(05)     <wsp:PolicyReference … >…</wsp:PolicyReference> |(06)     …(07)   )* (08) </wsp:All> The following describes the Attribute and Element InformationItems defined in the schema outline above: /wsp:All This element is the wsp:All operator. /wsp:All/wsp:Policy This element is a nested wsp:Policy operator. /wsp:All/wsp:ExactlyOne This element is a nested wsp:ExactlyOneoperator. /wsp:All/wsp:All This element is a nested wsp:All operator. /wsp:All/wsp:PolicyReference This element references a policy expression to be included perSection 4.3.5 PolicyInclusion. /wsp:All/{any} Additional elements MAY bespecified. Such elements MUST NOT usethe Web Services Policy language XML namespace name andMUST NOT contradict the semantics ofthe [parent element]. Note: The wsp:All and wsp:ExactlyOneelements do not allow attribute extensibility because suchattributes cannot be preserved through normalization. The following rules are used to transform a compact policyexpression into a normal form policy expression: Equivalence Use of wsp:Policy as an operator within a policyexpression is equivalent to wsp:All. A collection of assertions in an wsp:All operatoris equivalent to a policy alternative. For instance, (01) <wsp:All>(02)   <!-- assertion 1 -->(03)   <!-- assertion 2 -->(04) </wsp:All> is equivalent to: (01) <wsp:ExactlyOne>(02)   <wsp:All>(03)     <!-- assertion 1 -->(04)     <!-- assertion 2 -->(05)   </wsp:All>(06) </wsp:ExactlyOne> Empty <wsp:All /> expresses a policy alternativewith zero policy assertions. Note that sincewsp:Policy is equivalent to wsp:All,<wsp:Policy /> is therefore equivalent to<wsp:All />, i.e., a policy alternative withzero assertions. <wsp:ExactlyOne /> expresses a policy withzero policy alternatives. Commutative In line with the previous statements that policy assertionswithin a policy alternative and policy alternatives within a policyare not ordered (see 3.2 PolicyAlternative and 3.3 Policy,respectively), wsp:All and wsp:ExactlyOneare commutative. For example, (01) <wsp:All> <!-- assertion 1 --> <!-- assertion 2 --> </wsp:All> is equivalent to: (01) <wsp:All> <!-- assertion 2 --> <!-- assertion 1 --> </wsp:All> and: (01) <wsp:ExactlyOne>(02)   <!-- assertion 1 --> <!-- assertion 2 -->(03) </wsp:ExactlyOne> is equivalent to: (01) <wsp:ExactlyOne>(02)   <!-- assertion 2 --> <!-- assertion 1 -->(03) </wsp:ExactlyOne> Associative wsp:All and wsp:ExactlyOne areassociative. For example, (01) <wsp:All>(02)   <!-- assertion 1 -->(03)   <wsp:All> <!-- assertion 2 --> </wsp:All>(04) </wsp:All> is equivalent to: (01) <wsp:All> <!-- assertion 1 --> <!-- assertion 2 --> </wsp:All> and: (01) <wsp:ExactlyOne>(02)   <!-- assertion 1 -->(03)   <wsp:ExactlyOne> <!-- assertion 2 --> </wsp:ExactlyOne>(04) </wsp:ExactlyOne> is equivalent to: (01) <wsp:ExactlyOne>(02)   <!-- assertion 1 --> <!-- assertion 2 -->(03) </wsp:ExactlyOne> Idempotent wsp:All and wsp:ExactlyOne areidempotent. For example, (01) <wsp:All>(02)   <wsp:All> <!-- assertion 1 --> <!-- assertion 2 --> </wsp:All>(03) </wsp:All> is equivalent to: (01) <wsp:All> <!-- assertion 1 --> <!-- assertion 2 --> </wsp:All> and: (01) <wsp:ExactlyOne>(02)   <wsp:ExactlyOne>(03)     <!-- assertion 1 --> <!-- assertion 2 -->(04)   </wsp:ExactlyOne>(05) </wsp:ExactlyOne> is equivalent to: (01) <wsp:ExactlyOne>(02)   <!-- assertion 1 --> <!-- assertion 2 -->(03) </wsp:ExactlyOne> Distributive wsp:All is distributive overwsp:ExactlyOne. That is, a wsp:Allelement containing only wsp:ExactlyOne child elementsis equivalent to a wsp:ExactlyOne element containing,for each possible combination of one child element from each of thewsp:ExactlyOne element over which being distributed, awsp:All element containing that combination. Forexample, (01) <wsp:All>(02)   <wsp:ExactlyOne>(03)     <!-- assertion 1 -->(04)     <!-- assertion 2 -->(05)   </wsp:ExactlyOne>(06) </wsp:All> is equivalent to: (01) <wsp:ExactlyOne>(02)   <wsp:All>(03)     <!-- assertion 1 -->(04)   </wsp:All>(05)   <wsp:All>(06)     <!-- assertion 2 -->(07)   </wsp:All>(08) </wsp:ExactlyOne> Similarly by repeatedly distributing wsp:All overwsp:ExactlyOne, (01) <wsp:All>(02)   <wsp:ExactlyOne>(03)     <!-- assertion 1 -->(04)     <!-- assertion 2 -->(05)   </wsp:ExactlyOne>(06)   <wsp:ExactlyOne>(07)     <!-- assertion 3 -->(08)     <!-- assertion 4 -->(09)   </wsp:ExactlyOne>(10) </wsp:All> is equivalent to: (01) <wsp:ExactlyOne>(02)   <wsp:All><!-- assertion 1 --><!-- assertion 3 --></wsp:All>(03)   <wsp:All><!-- assertion 1 --><!-- assertion 4 --></wsp:All>(04)   <wsp:All><!-- assertion 2 --><!-- assertion 3 --></wsp:All>(05)   <wsp:All><!-- assertion 2 --><!-- assertion 4 --></wsp:All>(06) </wsp:ExactlyOne> Distributing wsp:All over an emptywsp:ExactlyOne is equivalent to no alternatives. Forexample, (01) <wsp:All>(02)   <wsp:ExactlyOne />(03) </wsp:All> is equivalent to: (01) <wsp:ExactlyOne /> and: (01) <wsp:All>(02)   <wsp:ExactlyOne>(03)     <!-- assertion 1 -->(04)     <!-- assertion 2 -->(05)   </wsp:ExactlyOne>(06)   <wsp:ExactlyOne />(07) </wsp:All> is equivalent to: (01) <wsp:ExactlyOne /> For example, given the following compact policy expression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <sp:RequireDerivedKeys wsp:Optional="true" />(03)   <wsp:ExactlyOne>(04)     <sp:WssUsernameToken10 />(05)     <sp:WssUsernameToken11 />(06)   </wsp:ExactlyOne>(07) </wsp:Policy> Applying Section 4.3.1Optional Policy Assertions to @wsp:Optional inLine (02), and distributing wsp:All overwsp:ExactlyOne per Section 4.3.3 Policy Operators for theassertions in Lines (04-05) yields: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All> <!-- @wsp:Optional alternative with assertion -->(04)       <sp:RequireDerivedKeys />(05)     </wsp:All>(06)     <wsp:All /> <!-- @wsp:Optional alternative without -->(07)   </wsp:ExactlyOne>(08)   <wsp:ExactlyOne>(09)     <wsp:All>(10)       <sp:WssUsernameToken10 />(11)     </wsp:All>(12)     <wsp:All>(13)       <sp:WssUsernameToken11 />(14)     </wsp:All>(15)   </wsp:ExactlyOne>(16) </wsp:Policy> Note that the assertion listed in Line (02) in the first listingexpands into the two alternatives in Lines (03-06) in the secondlisting. Finally, noting that wsp:Policy is equivalent towsp:All, and distributing wsp:All overwsp:ExactlyOne yields the following normal form policyexpression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:RequireDerivedKeys />(05)       <sp:WssUsernameToken10 />(06)     </wsp:All>(07)     <wsp:All>(08)       <sp:RequireDerivedKeys />(09)       <sp:WssUsernameToken11 />(10)     </wsp:All>(11)     <wsp:All>(12)       <sp:WssUsernameToken10 />(13)     </wsp:All>(14)     <wsp:All>(15)       <sp:WssUsernameToken11 />(16)     </wsp:All>(17)   </wsp:ExactlyOne>(18) </wsp:Policy> Note that the two alternatives listed in Lines (03-06) in thesecond listing are combined with the two alternatives listed inLines (09-14) in the second listing to create four alternatives inthe normalized policy, Lines (03-06), (07-10), (11-13), and(14-16). Consider another example, given the following compact policyexpression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <sp:RequireDerivedKeys />(03)   <wsp:ExactlyOne>(04)     <sp:WssUsernameToken10 />(05)     <sp:WssUsernameToken11 />(06)   </wsp:ExactlyOne>(07) </wsp:Policy> Applying Section 4.3.1Optional Policy Assertions to@wsp:Optional="false" in Line (02), and distributingwsp:All over wsp:ExactlyOne per Section 4.3.3 Policy Operators for theassertions in Lines (04-05) yields: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:RequireDerivedKeys />(05)     </wsp:All>(06)   </wsp:ExactlyOne>(07)   <wsp:ExactlyOne>(08)     <wsp:All>(09)       <sp:WssUsernameToken10 />(10)     </wsp:All>(11)     <wsp:All>(12)       <sp:WssUsernameToken11 />(13)     </wsp:All>(14)   </wsp:ExactlyOne>(15) </wsp:Policy> Note that the assertion listed in Line (02) in the first listingexpands into an alternative in Lines (03-05) in the secondlisting. Finally, noting that wsp:Policy is equivalent towsp:All, and distributing wsp:All overwsp:ExactlyOne yields the following normal form policyexpression: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:RequireDerivedKeys />(05)       <sp:WssUsernameToken10 />(06)     </wsp:All>(07)     <wsp:All>(08)       <sp:RequireDerivedKeys />(09)       <sp:WssUsernameToken11 />(10)     </wsp:All>(11)   </wsp:ExactlyOne>(12) </wsp:Policy> Note that the first alternative listed in Lines (03-05) in thesecond listing is combined with the two alternatives listed inLines (08-13) in the second listing to create two alternatives inthe normalized policy, Lines (03-06) and (07-10). 4.3.4Policy References The wsp:PolicyReference element is used toreference policy expressions. The semantics of thewsp:PolicyReference element are determined by thecontext in which it is used (for an example, see 4.3.5 Policy Inclusion). The schema outline for the wsp:PolicyReferenceelement is as follows: (01) <wsp:PolicyReference(02)     URI="xs:anyURI"(03)   ( Digest="xs:base64Binary" ( DigestAlgorithm="xs:anyURI" )? )?(04)     … >(05)    …(06) </wsp:PolicyReference> The following describes the Attribute and Element InformationItems defined in the schema outline above: /wsp:PolicyReference This element references a policy expression that is beingreferenced. /wsp:PolicyReference/@URI This attribute references a policy expression by an IRI. For apolicy expression within the same XML Document, the referenceSHOULD be an IRI-reference to a policyexpression identified by an ID. For an external policyexpression, there is no requirement that the IRI be resolvable;retrieval mechanisms are beyond the scope of this specification.After retrieval, there is no requirement to check that theretrieved policy expression is associated (Section 4.2 Policy Identification) withthis IRI. The IRI included in the retrieved policyexpression, if any, MAY be differentthan the IRI used to retrieve the policy expression. /wsp:PolicyReference/@Digest This attribute is of type xs:base64Binary andspecifies the digest of the referenced policy expression. This isused to ensure the included policy is the expected policy. Ifomitted, there is no implied value. /wsp:PolicyReference/@DigestAlgorithm This optional URI attribute specifies the digest algorithmsbeing used. This specification predefines the default algorithmbelow, although additional algorithms can be expressed. URI Description http://www.w3.org/ns/ws-policy/Sha1Exc (implied) The digest is a SHA1 hash over theoctet stream resulting from using the Exclusive XMLcanonicalization defined for XML Signature [XML-Signature]. /wsp:PolicyReference/@{any} Additional attributes MAY bespecified but MUST NOT contradict thesemantics of the [owner element]; if an attributeis not recognized, it SHOULD beignored. /wsp:PolicyReference/{any} Additional elements MAY bespecified but MUST NOT contradict thesemantics of the [parent element]; if an elementis not recognized, it SHOULD beignored. 4.3.5Policy Inclusion In order to share assertions across policyexpressions, the wsp:PolicyReference elementMAY be present anywhere a policyassertion is allowed inside a policy expression. This element isused to include the content of one policy expression in anotherpolicy expression. When a wsp:PolicyReference element references awsp:Policy element, then the semantics of inclusionare simply to replace the wsp:PolicyReference elementwith a wsp:All element whose[children] property is the same as the[children] property of the referencedwsp:Policy element. That is, the contents of thereferenced policy conceptually replace thewsp:PolicyReference element and are wrapped in awsp:All operator. Using thewsp:PolicyReference element, a policy expressionMUST NOT reference itself eitherdirectly or indirectly. (Note: References that have a@Digest attribute SHOULDbe validated before being included.) In the example below two policies include and extend a commonpolicy. In the first example there is a single policy documentcontaining two policy assertions. The expression is given anidentifier but not a fully qualified location. The second and thirdexpressions reference the first expression by URI indicating thereferenced expression is within the document. (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy"        xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"        wsu:Id="Protection" >(02)   <sp:EncryptSignature wsp:Optional="true" />(03)   <sp:ProtectTokens wsp:Optional="true" />(04) </wsp:Policy> (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <wsp:PolicyReference URI="#Protection" />(03)   <sp:OnlySignEntireHeadersAndBody />(04) </wsp:Policy> (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >(02)   <sp:IncludeTimestamp />(03)   <wsp:PolicyReference URI="#Protection" />(04)   <sp:OnlySignEntireHeadersAndBody />(05) </wsp:Policy> There are times when it is desirable to "re-use" a portion of apolicy expression. Generally, this can be accomplished by placingthe common assertions in a separate policy expression andreferencing it. 4.3.6Normalization To interpret a compact expression in an interoperable form, acompact expression may be converted to the corresponding normalform expression by the following procedure: Start with the Element Information Item E (as defined in the XMLInformation Set [XML InformationSet]) of the policy expression. The [namespacename] of E is always"http://www.w3.org/ns/ws-policy". In the base case,the [local name] property of E is"Policy"; in the recursive case, the [localname] property of E is "Policy","ExactlyOne", or "All". Expand Element Information Items (as defined in the XMLInformation Set [XML InformationSet]) in the [children] property of Ethat are policy references per Section 4.3.5 Policy Inclusion. Convert each Element Information Item C in the[children] property of E into normal form. If the [namespace name] property of C is"http://www.w3.org/ns/ws-policy" and the[local name] property of C is"Policy", "ExactlyOne", or"All", C is an expression of a policy operator;normalize C by recursively applying this procedure. Otherwise the Element Information Item C is an assertion;normalize C per Sections 4.3.1 Optional PolicyAssertions and 4.3.2Policy Assertion Nesting. Apply the policy operator indicated by E to the normalizedElement Information Items in its [children]property and construct a normal form per Section 4.3.3 Policy Operators and 4.1 Normal Form PolicyExpression. Note that an implementation may use a more efficient procedureand is not required to explicitly convert a compact expression intothe normal form as long as the processing results areindistinguishable from doing so. 4.4 Ignorable PolicyAssertions The wsp:Ignorable attribute indicates if a policyassertion is an ignorable policy assertion. Thebehavior implied by an ignorable assertion is expected to be abehavior that need not be engaged for successful interoperationwith the entity that includes such ignorable assertions in itspolicy. The schema outline for the wsp:Ignorable attributeis as follows: (01) <Assertion ( wsp:Ignorable="xs:boolean" )? … > … </Assertion> The following describes the Attribute Information Item definedin the schema outline above: /Assertion/@wsp:Ignorable This attribute is of type xs:boolean. If the actualvalue (See XML Schema Part 1 [XMLSchema Structures]) is true, the assertion is anignorable policy assertion. Ifthe actual value is false, the assertion is not an ignorable policy assertion.Omitting this attribute is semantically equivalent to including itwith a value of false. 4.5Policy Intersection Policy intersection is OPTIONAL but, a useful tool when two ormore parties express policyand want to limit the policy alternatives to those that aremutually compatible. For example, when a requester and a providerexpress requirements on a message exchange, intersection identifiescompatible policy alternatives (if any) included in both requesterand provider policies. Policy Intersection is a commutativeoperation performed on two policies that yields a policy thatcontains a collection of the compatible policy alternatives. (Note:while policy intersection at times is analogous with setintersection, it does not imply formal set intersection semantics).There are two modes for intersection: strict and lax. How the modeis selected or indicated for the policy intersection is outside thescope of this specification. As a first approximation, an intersection algorithm is definedbelow that approximates compatibility of policy assertionsin a domain-independent manner. Mechanisms for determiningassertion parameter compatibilityare not part of this domain-independent policy intersection.Determining whether two policy assertions of the same type arecompatible may involve domain-specific processing for purposes ofdetermining assertion parametercompatibility. Domain-independent policy intersection may beextended to include domain-specific processing. If adomain-specific intersection processing algorithm is required thiswill be known from the QName of the specific assertiontype involved in the policy alternative. However, regardlessof whether an assertion's QName indicates domain-specificprocessing, an implementation of the domain-independentintersection need not apply the domain-specific processing. The domain-independent policy intersection algorithm is: Two policyassertions are compatible if they have the same typeand If either assertion contains a nested policyexpression, the two assertions are compatible if they both havea nested policy expression and the alternative in the nested policyexpression of one is compatible with the alternative in the nestedpolicy expression of the other. Assertion parameters are not partof the domain-independent compatibility determination definedherein but this domain-independent policy intersection may beextended to include domain-specific processing for purposes ofdetermining Assertion parametercompatibility. If the mode is strict, two policy alternatives A and B arecompatible: if each assertion in A is compatible with an assertion in B,and if each assertion in B is compatible with an assertion in A. If the mode is lax, two policy alternatives A and B arecompatible: if each assertion in A that is not an ignorable policy assertion iscompatible with an assertion in B, and if each assertion in B that is not an ignorable policy assertion iscompatible with an assertion in A. If two alternatives are compatible, their intersection is analternative containing all of the occurrences of all of theassertions from both alternatives (i.e., the bag union of the two),regardless of whether or not they are marked with thewsp:Ignorable='true' attribute. Two policies are compatibleif an alternative in one is compatible with an alternative in theother. If two policies are compatible, their intersection is theset of the intersections between all pairs of compatiblealternatives, choosing one alternative from each policy. If twopolicies are not compatible, their intersection has no policyalternatives. The result of policy intersection can be zero or more alternatives.Each alternative may contain more than oneassertionof the same type which may come from differentinput policies. See Section3.2 Policy Alternativefor mechanisms for determining the aggregate behavior indicated bymultiple assertions of the same policyassertion type. If policy assertion authors did not specify thesemantics of multiple assertions of the same assertiontype within a policy alternative and the type andits descendant assertion types (within a nestedpolicy expression outline, if any) do not allow any parameters, then multipleassertionsof the type within a policyalternative in the intersection result have the same meaning asa single assertion of the typewithin the policy alternative. An entity applies all the behaviors implied by a policyalternative when that policy alternative is chosen from theintersection result (see 3.4 Policies ofEntities in a Web Services Based System). If an entityincludes a policy assertion type A in its policy, and this policyassertion type A does not occur in an intersected result, then thatentity SHOULD not apply the behavior implied by assertion type A.If a policy assertion type Z is not included in the input policiesbeing intersected then the intersection result is silent about thebehavior implied by the assertion type Z. As an example of intersection, consider two input policies innormal form: (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >       <!-- Policy P1 -->(02)   <wsp:ExactlyOne>(03)     <wsp:All> <!-- Alternative A1 -->(04)       <sp:SignedElements>(05)         <sp:XPath>/S:Envelope/S:Body</sp:XPath>(06)       </sp:SignedElements>(07)       <sp:EncryptedElements>(08)         <sp:XPath>/S:Envelope/S:Body</sp:XPath>(09)       </sp:EncryptedElements>(10)     </wsp:All>(11)     <wsp:All> <!-- Alternative A2 -->(12)       <sp:SignedParts>(13)         <sp:Body />(14)         <sp:Header                Namespace="http://www.w3.org/2005/08/addressing" />(15)       </sp:SignedParts>(16)       <sp:EncryptedParts>(17)         <sp:Body />(18)       </sp:EncryptedParts>(19)     </wsp:All>(20)   </wsp:ExactlyOne>(21) </wsp:Policy> The listing above contains two policy alternatives. The firstalternative, (Lines 03-10) contains two policy assertions. Oneindicates which elements should be signed (Lines 04-06); its typeis sp:SignedElements (Line 04), and its parametersinclude an XPath expression for the content to be signed (Line 05).The other assertion (Lines 07-09) has a similar structure: type(Line 07) and parameters (Line 08). The second alternative (Lines 11-19) also contains twoassertions, each with type (Line 12 and Line 16) and parameters(Lines 13-14 and Line 17). As this example illustrates, compatibility between two policyassertions is based on assertion type and delegates parameterprocessing to domain-specific processing. (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >       <!-- Policy P2 -->(02)   <wsp:ExactlyOne>(03)     <wsp:All> <!-- Alternative A3 -->(04)       <sp:SignedParts />(05)       <sp:EncryptedParts>(06)         <sp:Body />(07)       </sp:EncryptedParts>(08)     </wsp:All>(09)     <wsp:All> <!-- Alternative A4 -->(10)       <sp:SignedElements>(11)         <sp:XPath>/S:Envelope/S:Body</sp:XPath>(12)       </sp:SignedElements>(13)     </wsp:All>(14)   </wsp:ExactlyOne>(15) </wsp:Policy> Because there is only one alternative (A2) in policy P1 with thesame assertion type as another alternative (A3) in policy P2, theintersection is a policy with a single alternative that containsall of the assertions in A2 and in A3. (01) <wsp:Policy        xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"        xmlns:wsp="http://www.w3.org/ns/ws-policy" >       <!-- Intersection of P1 and P2 -->(02)   <wsp:ExactlyOne>(03)     <wsp:All>(04)       <sp:SignedParts >(05)         <sp:Body />(06)         <sp:Header                Namespace="http://www.w3.org/2005/08/addressing" />(07)       </sp:SignedParts>(08)       <sp:EncryptedParts>(09)         <sp:Body />(10)       </sp:EncryptedParts>(11)       <sp:SignedParts />(12)       <sp:EncryptedParts>(13)         <sp:Body />(14)       </sp:EncryptedParts>(15)     </wsp:All>(16)   </wsp:ExactlyOne>(17) </wsp:Policy> Note that there are two assertions of the typesp:SignedParts and two assertions of the typesp:EncryptedParts, one from each of the inputPolicies. In general, whethertwo assertions of the same type arecompatible or repetition is redundancy depends on thedomain-specific semantics of the assertion type. As mentionedabove, if the assertions have no parameters and the assertions innested policiy expressions have noparameters, then multipleassertionsof the type within a policyalternative in the intersection result have the same meaning asa single assertion of the typewithin the policy alternative. Based on the semantics of multiple assertions of the EncryptedPartsassertion type, as specified in theWS-SecurityPolicy [WS-SecurityPolicy] specification,one of the sp:EncryptedParts assertion in theabove example is redundant. Whether the two sp:SignedParts assertions arecompatible or one of them is redundant depends on the semanticsdefined for this assertion type. As another example of intersection of WS-Addressing assertionsthat utilize the framework intersection algorithm, consider twoinput policies: (01) <wsp:Policy      xmlns:wsp="http://www.w3.org/ns/ws-policy"      xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>        <!-- Alternative A5 -->(04)       <wsam:Addressing>(05)         <wsp:Policy/>(06)       </wsam:Addressing>(07)     </wsp:All>(08)   </wsp:ExactlyOne>(09) </wsp:Policy> Lines (04)-(06) in the above policy expression contain anaddressing policy assertion with the empty<wsp:Policy/> in line (05). The empty<wsp:Policy/> is a nested policy expression withan alternative that has zero assertions. In the example above, theaddressing assertion indicates the use of addressing without anyrestriction. (01) <wsp:Policy      xmlns:wsp="http://www.w3.org/ns/ws-policy"      xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" >(02)   <wsp:ExactlyOne>(03)     <wsp:All>       <!-- Alternative A6 -->(04)       <wsam:Addressing>(05)         <wsp:Policy>(06)           <wsam:AnonymousResponses/>(07)         </wsp:Policy>(08)       </wsam:Addressing>(09)     </wsp:All>(10)   </wsp:ExactlyOne>(11) </wsp:Policy> Lines (04)-(08) in the above policy expression contain anaddressing policy assertion with a nested policy expression inlines (05)-(06). The nested policy expression indicates that theprovider requires request messages to use response endpoint EPRsthat contain the anonymous URI. The nested policy expressioncontains an alternative that has one assertion,wsam:AnonymousResponses. The two assertions in alternatives A5 and A6 have the sameassertion type and have nested policy expressions. The nestedpolicy expression within the addressing assertion in thealternative A5 contains an alternative that has zero assertions.The nested policy expression within the addressing assertion in thealternative A6 contains an alternative that has one assertion. Thenested policy expressions within these two assertions areincompatible because the alternative in one is incompatible withthe alternative in the other. Therefore, the two assertions are incompatible and hence the twoalternatives are incompatible. 4.6 Use of IRIs in PolicyExpressions Policy expressions use IRIs for some identifiers. This documentdoes not define a base URI but relies on the mechanisms defined inXML Base [XML BASE] and RFCs3023 [IETF RFC 3023], 3986[IETF RFC 3986] and 3987[IETF RFC 3987] forestablishing a base URI against which relative IRIs can be madeabsolute. 5. Security Considerations It is RECOMMENDED that policies and assertions beintegrity protected to permit the detection of tampering. This canbe done using a technology such as XML DSig [XML-Signature], SSL/TLS [IETF RFC 2246], or WS-Security 2004[WS-Security 2004]. Policies SHOULD NOT be acceptedunless they are signed and have an associated security token tospecify the signer has the right to "speak for" the scope containing thepolicy. That is, a relying party shouldn't rely on a policy unlessthe policy is signed and presented with sufficient credentials topass the relying parties' acceptance criteria. It should be noted that the mechanisms described in thisdocument could be secured as part of a SOAP message [SOAP 1.1, SOAP 1.2Messaging Framework] using WS-Security [WS-Security 2004] or embedded withinother objects using object-specific security mechanisms. This section describes the security considerations that serviceproviders, requestors, policy authors, policy assertion authors,and policy implementers need to consider when exposing, consumingand designing policy expressions, authoring policyassertions or implementing policy. 5.1 Information DisclosureThreats A policy is used to represent the capabilities and requirementsof a Web Service. Policies may include sensitive information.Malicious consumers may acquire sensitive information, fingerprintthe service and infer service vulnerabilities. These threats can bemitigated by requiring authentication for sensitive information, byomitting sensitive information from the policy or by securingaccess to the policy. For securing access to policy metadata,policy providers can use mechanisms from other Web Servicesspecifications such as WS-Security [WS-Security 2004] and WS-MetadataExchange[WS-MetadataExchange] . 5.2 Spoofing and TamperingThreats If a policy expression is unsigned it could be easily tamperedwith or replaced. To prevent tampering or spoofing of policy,requestors should discard a policy unless it is signed by theprovider and presented with sufficient credentials. Requestorsshould also check that the signer is actually authorized to expresspolicies for the given policy subject. 5.3Downgrade Threats A policy may offer several alternatives that vary from weak tostrong set of requirements. An adversary may interfere and removeall the alternatives except the weakest one (say no securityrequirements). Or, an adversary may interfere and discard thispolicy and insert a weaker policy previously issued by the sameprovider. Policy authors or providers can mitigate these threats bysun-setting older or weaker policy alternatives. Requestors canmitigate these threats by discarding policies unless they aresigned by the provider. 5.4Repudiation Threats Malicious providers may include policy assertions in its policywhose behavior cannot be verified by examining the wire messagefrom the provider to requestor. In general, requestors have noguarantee that a provider will behave as described in theprovider’s policy expression. The provider may not and perform amalicious activity. For example, say the policy assertion isprivacy notice information and the provider violates the semanticsby disclosing private information. Requestors can mitigate thisthreat by discarding policy alternatives which include assertionswhose behavior cannot be verified by examining the wire messagefrom the provider to requestor. Assertion authors can mitigate thisthreat by not designing assertions whose behavior cannot beverified using wire messages. 5.5 Denial of Service Threats Malicious providers may provide a policy expression with a largenumber of alternatives, a large number of assertions inalternatives, deeply nested policy expressions or chains ofPolicyReference elements that expand exponentially (see the chainedsample below; this is similar to the well-known DTD entityexpansion attack). Policy implementers need to anticipate theserogue providers and use a configurable bound with defaults onnumber of policy alternatives, number of assertions in analternative, depth of nested policy expressions, etc. Example5-1. Chained Policy Reference Elements (01) <wsp:Policy wsu:Id="p1">(02)   <wsp:PolicyReference URI="#p2"/ >(03)   <wsp:PolicyReference URI="#p2"/>(04) </wsp:Policy>(05)                 (06) <wsp:Policy wsu:Id="p2" >(07)   <wsp:PolicyReference URI="#p3"/>(08)   <wsp:PolicyReference URI="#p3"/>(09) </wsp:Policy>(10)                 (11) <wsp:Policy wsu:Id="p3" >(12)   <wsp:PolicyReference URI="#p4"/>(13)   <wsp:PolicyReference URI="#p4"/>(14) </wsp:Policy>(15)                 (16) <!-- Policy/@wsu:Id p4 through p99 -->(17)                 (18) <wsp:Policy wsu:Id="p100" >(19)   <wsp:PolicyReference URI="#p101"/>(20)   <wsp:PolicyReference URI="#p101"/>(21) </wsp:Policy>(22)                 (23) <wsp:Policy wsu:Id="p101" >(24)   <mtom:OptimizedMimeSerialization />(25) </wsp:Policy> Malicious providers may provide a policy expression thatincludes multiple PolicyReference elements that use a large numberof different internet addresses. These may require the consumers toestablish a large number of TCP connections. Policy implementersneed to anticipate such rogue providers and use a configurablebound with defaults on number of PolicyReference elements perpolicy expression. 5.6 General XMLConsiderations Implementers of Web Services policy language should be carefulto protect their software against general XML threats like deeplynested XML or XML that contains malicious content. 6. Conformance An element information item whose namespace name is"http://www.w3.org/ns/ws-policy" and whose local part is Policy orPolicyReference conforms to this specification if it is validaccording to the XML Schema [XMLSchema Structures] for that element as defined by thisspecification (http://www.w3.org/2007/02/ws-policy.xsd)and additionally adheres to all the constraints contained in thisspecification. Such a conformant element information itemconstitutes a policy expression. A. Theapplication/wspolicy+xml Media Type This appendix defines the "application/wspolicy+xml" media typewhich can be used to describe Web Services Policy documentsserialized as XML. Either wsp:Policy orwsp:PolicyAttachment could be the root element of sucha document. A.1 Registration MIME media type name: application MIME subtype name: wspolicy+xml Required parameters: none Optional parameters: charset This parameter has identical semantics to the charset parameterof the "application/xml" media type as specified in IETF RFC 3023. Encoding considerations: Identical to those of "application/xml" as described inIETF RFC 3023, section 3.2, asapplied to the Web Services Policy document Infoset. Security considerations: See section 5. SecurityConsiderations in this document, and the SecurityConsideration section in WebServices Policy Attachment. Interoperability considerations: There are no known interoperability issues. Published specifications: This document and WebServices Policy Attachment. Applications which use this media type: This new media type is being registered to allow for deploymentof Web Services Policy and references to Web Services Policy on theWorld Wide Web. Additional information: File extension: wspolicy Fragment identifiers: A syntax identical to that of "application/xml" as described inIETF RFC 3023. Base URI: As specified in IETF RFC3023, section 6. Also see section 4.6 Use of IRIs in PolicyExpressions in this document and section 3.5 Use of IRIs in Policy Attachment in Web Services PolicyAttachment. Macintosh File Type code: TEXT Person and email address to contact for furtherinformation: World Wide Web Consortium <web-human@w3.org> Intended usage: COMMON Author/Change controller: The Web Services Policy 1.5 specification set is a work productof the World Wide Web Consortium's Web Service Policy WorkingGroup. The W3C has change control over thesespecifications. B. References B.1 Normative References [Web Services Policy Attachment] WebServices Policy 1.5 - Attachment, A. S. Vedamuthu, D.Orchard, F. Hirsch, M. Hondo, P. Yendluri, T. Boubez and Ü.Yalçinalp, Editors. World Wide Web Consortium, 04, September 2007.This version of the specification of the Web Services Policy 1.5 -Attachment specification ishttp://www.w3.org/TR/2007/REC-ws-policy-attach-20070904. Thelatest version ofWeb Services Policy 1.5 - Attachment is available athttp://www.w3.org/TR/ws-policy-attach. [IETF RFC2119] Key wordsfor use in RFCs to Indicate Requirement Levels, S.Bradner, Author. Internet Engineering Task Force, March 1997.Available at http://www.ietf.org/rfc/rfc2119.txt. [IETF RFC3986] UniformResource Identifier (URI): Generic Syntax , T.Berners-Lee, R. Fielding and L. Masinter, Authors. Network WorkingGroup, January 2005. Available athttp://www.ietf.org/rfc/rfc3986.txt. [IETF RFC3987] Internationalized ResourceIdentifiers (IRIs) , M. Duerst and M. Suignard, Authors.Internet Engineering Task Force, January 2005. Available athttp://www.ietf.org/rfc/rfc3987.txt. [WS-Security 2004] Web Services Security: SOAP Message Security 1.0 (WS-Security2004), A. Nadalin, C. Kaler, P. Hallam-Baker, and R.Monzillo, Editors. Organization for the Advancement of StructuredInformation Standards, March 2004. Available athttp://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0.pdf. [XMLBASE] XMLBase, Jonathan Marsh, Editor. World Wide Web Consortium,27 June 2001. This version of the XML Base Recommendation ishttp://www.w3.org/TR/2001/REC-xmlbase-20010627/. The latest version of XML Base isavailable at http://www.w3.org/TR/xmlbase/. [XML 1.0] Extensible MarkupLanguage (XML) 1.0 (Fourth Edition), T. Bray, J. Paoli,C. M. Sperberg-McQueen, and E. Maler, Editors. World Wide WebConsortium, 10 February 1998, revised 16 August 2006. This versionof the XML 1.0 Recommendation ishttp://www.w3.org/TR/2006/REC-xml-20060816. The latest version of XML 1.0 isavailable at http://www.w3.org/TR/REC-xml. [XML ID] xml:id Version1.0, J. Marsh, D. Veillard and N. Walsh, Editors. WorldWide Web Consortium, 9 September 2005. This version of the xml:idVersion 1.0 Recommendation ishttp://www.w3.org/TR/2005/REC-xml-id-20050909/. The latest version of xml:id Version1.0 is available at http://www.w3.org/TR/xml-id/. [XMLInformation Set] XMLInformation Set (Second Edition), J. Cowan and R. Tobin,Editors. World Wide Web Consortium, 24 October 2001, revised 4February 2004. This version of the XML Information SetRecommendation ishttp://www.w3.org/TR/2004/REC-xml-infoset-20040204. The latest version of XMLInformation Set is available athttp://www.w3.org/TR/xml-infoset. [XMLNamespaces] Namespaces inXML 1.0, T. Bray, D. Hollander, A. Layman, and R. Tobin,Editors. World Wide Web Consortium, 14 January 1999, revised 16August 2006. This version of the Namespaces in XML Recommendationis http://www.w3.org/TR/2006/REC-xml-names-20060816/. The latest version of Namespacesin XML is available at http://www.w3.org/TR/REC-xml-names. [XML Schema Structures] XML SchemaPart 1: Structures Second Edition, H. Thompson, D.Beech, M. Maloney, and N. Mendelsohn, Editors. World Wide WebConsortium, 2 May 2001, revised 28 October 2004. This version ofthe XML Schema Part 1 Recommendation ishttp://www.w3.org/TR/2004/REC-xmlschema-1-20041028. The latest version of XML SchemaPart 1 is available at http://www.w3.org/TR/xmlschema-1. [XML Schema Datatypes] XML SchemaPart 2: Datatypes Second Edition, P. Byron and A.Malhotra, Editors. World Wide Web Consortium, 2 May 2001, revised28 October 2004. This version of the XML Schema Part 2Recommendation ishttp://www.w3.org/TR/2004/REC-xmlschema-2-20041028. The latest version of XML SchemaPart 2 is available at http://www.w3.org/TR/xmlschema-2. [IETF RFC3023] IETF "RFC 3023: XML Media Types", M. Murata, S. St. Laurent, D.Kohn, July 1998. (See http://www.ietf.org/rfc/rfc3023.txt.) B.2 Other References [C14N 1.0Note] Known Issueswith Canonical XML 1.0 (C14N/1.0), J. Kahan and K. Lanz,Editors. World Wide Web Consortium, 20 December 2006. Available athttp://www.w3.org/TR/2006/NOTE-C14N-issues-20061220/. [IETF RFC2246] IETF "RFC 2246: The TLS Protocol", T. Dierks, C. Allen, January1999. (See http://www.ietf.org/rfc/rfc2246.txt.) [SOAP 1.1] Simple ObjectAccess Protocol (SOAP) 1.1, D. Box, et al, Editors.World Wide Web Consortium, 8 May 2000. Available athttp://www.w3.org/TR/2000/NOTE-SOAP-20000508/. [SOAP 1.2Messaging Framework] SOAP Version1.2 Part 1: Messaging Framework, M. Gudgin, M. Hadley,N. Mendelsohn, J-J. Moreau, H. Frystyk Nielsen, Editors. World WideWeb Consortium, 24 June 2003, revised 27 April 2007. This versionof the SOAP Version 1.2 Part 1: Messaging Framework Recommendationis http://www.w3.org/TR/2007/REC-soap12-part1-20070427/. Thelatest version of SOAPVersion 1.2 Part 1: Messaging Framework is available athttp://www.w3.org/TR/soap12-part1/. [SecSpecMaintWG] XML SecuritySpecifications Maintenance Working Group , Seehttp://www.w3.org/2007/xmlsec. [UDDI API2.0] UDDIVersion 2.04 API, T. Bellwood, Editor. Organization forthe Advancement of Structured Information Standards, 19 July 2002.This version of UDDI Version 2.0 API ishttp://uddi.org/pubs/ProgrammersAPI-V2.04-Published-20020719.htm.The latestversion of the UDDI 2.0 API is available athttp://uddi.org/pubs/ProgrammersAPI_v2.htm. [UDDI Data Structure 2.0] UDDIVersion 2.03 Data Structure Reference, C. von Riegen,Editor. Organization for the Advancement of Structured InformationStandards, 19 July 2002. This version of UDDI Version 2.0 DataStructures ishttp://uddi.org/pubs/DataStructure-V2.03-Published-20020719.htm.The latestversion of the UDDI 2.0 Data Structures is available athttp://uddi.org/pubs/DataStructure_v2.htm. [UDDI 3.0] UDDI Version 3.0.2, L. Clément, et al, Editors.Organization for the Advancement of Structured InformationStandards, 19 October 2004. This version of the UDDI Version 3.0 ishttp://www.oasis-open.org/committees/uddi-spec/doc/spec/v3/uddi-v3.0.2-20041019.htm.The latest version ofthe UDDI 3.0 specification is available athttp://uddi.org/pubs/uddi_v3.htm. [WS-Addressing Metadata] WebServices Addressing 1.0 - Metadata, M. Gudgin, M.Hadley, T. Rogers and Ü. Yalçinalp, Editors. World Wide WebConsortium, 4 September 2007. This version of the Web ServicesAddressing 1.0 - Metadata ishttp://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/. Thelatest version ofWeb Services Addressing 1.0 - Metadata is available athttp://www.w3.org/TR/ws-addr-metadata. [WS-SecurityPolicy] WS-SecurityPolicy v1.2, A. Nadalin, M. Goodner, M.Gudgin, A. Barbir, and H. Granqvist, Editors. Organization for theAdvancement of Structured Information Standards, 1 July 2007.Available athttp://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.pdf.Namespace document available athttp://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702. [WSDL 1.1] Web ServicesDescription Language (WSDL) 1.1, E. Christensen, et al,Authors. World Wide Web Consortium, March 2001. Available athttp://www.w3.org/TR/2001/NOTE-wsdl-20010315. [WSDL 2.0 CoreLanguage] Web ServicesDescription Language (WSDL) Version 2.0 Part 1: CoreLanguage, R. Chinnici, J. J. Moreau, A. Ryman, S.Weerawarana, Editors. World Wide Web Consortium, 26 June 2007. Thisversion of the WSDL 2.0 specification ishttp://www.w3.org/TR/2007/REC-wsdl20-20070626/. The latest version of WSDL 2.0 isavailable at http://www.w3.org/TR/wsdl20/. [WS-MetadataExchange] WebServices Metadata Exchange (WS-MetadataExchange), K.Ballinger, et al, Authors. BEA Systems Inc., Computer AssociatesInternational, Inc., International Business Machines Corporation,Microsoft Corporation, Inc., SAP AG, Sun Microsystems, andwebMethods, August 2006. Available athttp://schemas.xmlsoap.org/ws/2004/09/mex/. [XML-Signature] XML-SignatureSyntax and Processing, D. Eastlake, J. Reagle, and D.Solo, Editors. The Internet Society & World Wide WebConsortium, 12 February 2002. This version of the XML-SignatureSyntax and Processing Recommendation ishttp://www.w3.org/TR/2002/REC-xmldsig-core-20020212/. The latest version ofXML-Signature Syntax and Processing is available athttp://www.w3.org/TR/xmldsig-core/. [C14N11] Canonical XML1.1, J. Boyer and G. Marcy Authors. W3C CandidateRecommendation, 21 June 2007. This is a work in progress. Thisversion is available athttp://www.w3.org/TR/2007/CR-xml-c14n11-20070621. The latest version of Canonical XML1.1 is available at http://www.w3.org/TR//xml-c14n11/. C.Acknowledgements (Non-Normative) This document is the work of the W3C Web Services Policy WorkingGroup. Members of the Working Group are (at the time of writing, and byalphabetical order): Dimitar Angelov (SAP AG), Abbie Barbir (NortelNetworks), Charlton Barreto (Adobe Systems Inc.), Sergey Beryozkin(IONA Technologies, Inc.), Vladislav Bezrukov (SAP AG), TouficBoubez (Layer 7 Technologies), Symon Chang (BEA Systems, Inc.),Paul Cotton (Microsoft Corporation), Glen Daniels (ProgressSoftware), Doug Davis (IBM Corporation), Jacques Durand (FujitsuLimited), Ruchith Fernando (WSO2), Christopher Ferris (IBMCorporation), William Henry (IONA Technologies, Inc.), FrederickHirsch (Nokia), Maryann Hondo (IBM Corporation), Ondrej Hrebicek(Microsoft Corporation), Steve Jones (Layer 7 Technologies), TomJordahl (Adobe Systems Inc.), Paul Knight (Nortel Networks),Philippe Le Hégaret (W3C/MIT), Mark Little (JBoss Inc.), MohammadMakarechian (Microsoft Corporation), Ashok Malhotra (OracleCorporation), Jonathan Marsh (WSO2), Monica Martin (SunMicrosystems, Inc.), Arnaud Meyniel (Axway Software), JeffMischkinsky (Oracle Corporation), Dale Moberg (Axway Software),Anthony Nadalin (IBM Corporation), David Orchard (BEA Systems,Inc.), Sanjay Patil (SAP AG), Manjula Peiris (WSO2), FabianRitzmann (Sun Microsystems, Inc.), Daniel Roth (MicrosoftCorporation), Tom Rutt (Fujitsu Limited), Sanka Samaranayake(WSO2), Felix Sasaki (W3C/Keio), Yakov Sverdlov (CA), AsirVedamuthu (Microsoft Corporation), Sanjiva Weerawarana (WSO2), ÜmitYalçinalp (SAP AG), Prasad Yendluri (webMethods (A subsidiary ofSoftware AG)). Previous members of the Working Group were: Jeffrey Crump, JongLee, Bob Natale, Eugene Osovetsky, Bijan Parsia, Skip Snow, SeumasSoltysik, Mark Temple-Raston. The people who have contributed to discussionson public-ws-policy@w3.org are also gratefullyacknowledged.